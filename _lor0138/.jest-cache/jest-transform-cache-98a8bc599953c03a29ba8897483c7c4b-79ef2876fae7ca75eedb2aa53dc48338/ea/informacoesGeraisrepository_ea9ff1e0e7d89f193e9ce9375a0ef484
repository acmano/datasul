60d429d179bf59cb7e70e29a8fe4bcc5
"use strict";
// src/api/lor0138/item/dadosCadastrais/informacoesGerais/repository/informacoesGerais.repository.ts
Object.defineProperty(exports, "__esModule", { value: true });
exports.ItemInformacoesGeraisRepository = void 0;
const DatabaseManager_1 = require("@infrastructure/database/DatabaseManager");
const QueryCacheService_1 = require("@shared/utils/cache/QueryCacheService");
/**
 * Repository para consultas de Informações Gerais do Item
 */
class ItemInformacoesGeraisRepository {
    /**
     * Busca dados mestres do item (COM CACHE - TTL: 10 minutos)
     */
    static async getItemMaster(itemCodigo) {
        try {
            const query = `
        DECLARE @itemCodigo varchar(16) = @paramItemCodigo;
        DECLARE @sql nvarchar(max);
        
        SET @sql = N'
          SELECT 
            item."it-codigo" as itemCodigo,
            item."desc-item" as itemDescricao,
            item."un" as itemUnidade
          FROM OPENQUERY(PRD_EMS2EMP, ''
            SELECT 
              item."it-codigo",
              item."desc-item", 
              item."un"
            FROM pub.item
            WHERE item."it-codigo" = ''''' + @itemCodigo + '''''
          '') as item
        ';
        
        EXEC sp_executesql @sql;
      `;
            const params = [
                { name: 'paramItemCodigo', type: 'varchar', value: itemCodigo }
            ];
            // ✅ Query com cache L1/L2 (TTL: 10 minutos)
            const result = await QueryCacheService_1.QueryCacheService.withItemCache(query, params, async () => DatabaseManager_1.DatabaseManager.queryEmpWithParams(query, params));
            return result && result.length > 0 ? result[0] : null;
        }
        catch (error) {
            console.error('Erro ao buscar item master:', error);
            throw error;
        }
    }
    /**
     * Busca estabelecimentos do item (COM CACHE - TTL: 15 minutos)
     */
    static async getItemEstabelecimentos(itemCodigo) {
        try {
            const query = `
        DECLARE @itemCodigo varchar(16) = @paramItemCodigo;
        DECLARE @sql nvarchar(max);
        
        SET @sql = N'
          SELECT 
            itemEstab."it-codigo" as itemCodigo,
            itemEstab."cod-estabel" as estabCodigo,
            estab."nome" as estabNome,
            itemEstab."cod-obsoleto" as codObsoleto
          FROM OPENQUERY(PRD_EMS2EMP, ''
            SELECT 
              "item-uni-estab"."it-codigo",
              "item-uni-estab"."cod-estabel",
              "item-uni-estab"."cod-obsoleto"
            FROM pub."item-uni-estab"
            WHERE "item-uni-estab"."it-codigo" = ''''' + @itemCodigo + '''''
          '') as itemEstab
          LEFT JOIN OPENQUERY(PRD_EMS2MULT, ''
            SELECT 
              estabelec."ep-codigo" as cod_estabel,
              estabelec."nome"
            FROM pub.estabelec
          '') as estab ON itemEstab."cod-estabel" = estab.cod_estabel
        ';
        
        EXEC sp_executesql @sql;
      `;
            const params = [
                { name: 'paramItemCodigo', type: 'varchar', value: itemCodigo }
            ];
            // ✅ Query com cache L1/L2 (TTL: 15 minutos)
            const result = await QueryCacheService_1.QueryCacheService.withEstabelecimentoCache(query, params, async () => DatabaseManager_1.DatabaseManager.queryEmpWithParams(query, params));
            return result || [];
        }
        catch (error) {
            console.error('Erro ao buscar estabelecimentos:', error);
            throw error;
        }
    }
    /**
     * Invalida cache do item (chamar após UPDATE/DELETE)
     */
    static async invalidateCache(itemCodigo) {
        await QueryCacheService_1.QueryCacheService.invalidateMultiple([
            'item:*',
            'estabelecimento:*'
        ]);
        console.log('Cache invalidado para item:', itemCodigo);
    }
}
exports.ItemInformacoesGeraisRepository = ItemInformacoesGeraisRepository;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvbWFuby9wcm9qZXRvcy9kYXRhc3VsL2xvcjAxMzgvc3JjL2FwaS9sb3IwMTM4L2l0ZW0vZGFkb3NDYWRhc3RyYWlzL2luZm9ybWFjb2VzR2VyYWlzL3JlcG9zaXRvcnkvaW5mb3JtYWNvZXNHZXJhaXMucmVwb3NpdG9yeS50cyIsIm1hcHBpbmdzIjoiO0FBQUEsb0dBQW9HOzs7QUFFcEcsOEVBQTJFO0FBRTNFLDZFQUEwRTtBQUUxRTs7R0FFRztBQUNILE1BQWEsK0JBQStCO0lBRTFDOztPQUVHO0lBQ0gsTUFBTSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsVUFBa0I7UUFDM0MsSUFBSSxDQUFDO1lBQ0gsTUFBTSxLQUFLLEdBQUc7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O09Bb0JiLENBQUM7WUFFRixNQUFNLE1BQU0sR0FBcUI7Z0JBQy9CLEVBQUUsSUFBSSxFQUFFLGlCQUFpQixFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRTthQUNoRSxDQUFDO1lBRUYsNENBQTRDO1lBQzVDLE1BQU0sTUFBTSxHQUFHLE1BQU0scUNBQWlCLENBQUMsYUFBYSxDQUNsRCxLQUFLLEVBQ0wsTUFBTSxFQUNOLEtBQUssSUFBSSxFQUFFLENBQUMsaUNBQWUsQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQzlELENBQUM7WUFFRixPQUFPLE1BQU0sSUFBSSxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFFeEQsQ0FBQztRQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7WUFDZixPQUFPLENBQUMsS0FBSyxDQUFDLDZCQUE2QixFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQ3BELE1BQU0sS0FBSyxDQUFDO1FBQ2QsQ0FBQztJQUNILENBQUM7SUFFRDs7T0FFRztJQUNILE1BQU0sQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsVUFBa0I7UUFDckQsSUFBSSxDQUFDO1lBQ0gsTUFBTSxLQUFLLEdBQUc7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztPQTJCYixDQUFDO1lBRUYsTUFBTSxNQUFNLEdBQXFCO2dCQUMvQixFQUFFLElBQUksRUFBRSxpQkFBaUIsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUU7YUFDaEUsQ0FBQztZQUVGLDRDQUE0QztZQUM1QyxNQUFNLE1BQU0sR0FBRyxNQUFNLHFDQUFpQixDQUFDLHdCQUF3QixDQUM3RCxLQUFLLEVBQ0wsTUFBTSxFQUNOLEtBQUssSUFBSSxFQUFFLENBQUMsaUNBQWUsQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQzlELENBQUM7WUFFRixPQUFPLE1BQU0sSUFBSSxFQUFFLENBQUM7UUFFdEIsQ0FBQztRQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7WUFDZixPQUFPLENBQUMsS0FBSyxDQUFDLGtDQUFrQyxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQ3pELE1BQU0sS0FBSyxDQUFDO1FBQ2QsQ0FBQztJQUNILENBQUM7SUFFRDs7T0FFRztJQUNILE1BQU0sQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLFVBQWtCO1FBQzdDLE1BQU0scUNBQWlCLENBQUMsa0JBQWtCLENBQUM7WUFDekMsUUFBUTtZQUNSLG1CQUFtQjtTQUNwQixDQUFDLENBQUM7UUFDSCxPQUFPLENBQUMsR0FBRyxDQUFDLDZCQUE2QixFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQ3pELENBQUM7Q0FDRjtBQS9HRCwwRUErR0MiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL2hvbWUvbWFuby9wcm9qZXRvcy9kYXRhc3VsL2xvcjAxMzgvc3JjL2FwaS9sb3IwMTM4L2l0ZW0vZGFkb3NDYWRhc3RyYWlzL2luZm9ybWFjb2VzR2VyYWlzL3JlcG9zaXRvcnkvaW5mb3JtYWNvZXNHZXJhaXMucmVwb3NpdG9yeS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvYXBpL2xvcjAxMzgvaXRlbS9kYWRvc0NhZGFzdHJhaXMvaW5mb3JtYWNvZXNHZXJhaXMvcmVwb3NpdG9yeS9pbmZvcm1hY29lc0dlcmFpcy5yZXBvc2l0b3J5LnRzXHJcblxyXG5pbXBvcnQgeyBEYXRhYmFzZU1hbmFnZXIgfSBmcm9tICdAaW5mcmFzdHJ1Y3R1cmUvZGF0YWJhc2UvRGF0YWJhc2VNYW5hZ2VyJztcclxuaW1wb3J0IHsgUXVlcnlQYXJhbWV0ZXIgfSBmcm9tICdAaW5mcmFzdHJ1Y3R1cmUvZGF0YWJhc2UvdHlwZXMnO1xyXG5pbXBvcnQgeyBRdWVyeUNhY2hlU2VydmljZSB9IGZyb20gJ0BzaGFyZWQvdXRpbHMvY2FjaGUvUXVlcnlDYWNoZVNlcnZpY2UnO1xyXG5cclxuLyoqXHJcbiAqIFJlcG9zaXRvcnkgcGFyYSBjb25zdWx0YXMgZGUgSW5mb3JtYcOnw7VlcyBHZXJhaXMgZG8gSXRlbVxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEl0ZW1JbmZvcm1hY29lc0dlcmFpc1JlcG9zaXRvcnkge1xyXG4gIFxyXG4gIC8qKlxyXG4gICAqIEJ1c2NhIGRhZG9zIG1lc3RyZXMgZG8gaXRlbSAoQ09NIENBQ0hFIC0gVFRMOiAxMCBtaW51dG9zKVxyXG4gICAqL1xyXG4gIHN0YXRpYyBhc3luYyBnZXRJdGVtTWFzdGVyKGl0ZW1Db2RpZ286IHN0cmluZyk6IFByb21pc2U8YW55IHwgbnVsbD4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgcXVlcnkgPSBgXHJcbiAgICAgICAgREVDTEFSRSBAaXRlbUNvZGlnbyB2YXJjaGFyKDE2KSA9IEBwYXJhbUl0ZW1Db2RpZ287XHJcbiAgICAgICAgREVDTEFSRSBAc3FsIG52YXJjaGFyKG1heCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgU0VUIEBzcWwgPSBOJ1xyXG4gICAgICAgICAgU0VMRUNUIFxyXG4gICAgICAgICAgICBpdGVtLlwiaXQtY29kaWdvXCIgYXMgaXRlbUNvZGlnbyxcclxuICAgICAgICAgICAgaXRlbS5cImRlc2MtaXRlbVwiIGFzIGl0ZW1EZXNjcmljYW8sXHJcbiAgICAgICAgICAgIGl0ZW0uXCJ1blwiIGFzIGl0ZW1VbmlkYWRlXHJcbiAgICAgICAgICBGUk9NIE9QRU5RVUVSWShQUkRfRU1TMkVNUCwgJydcclxuICAgICAgICAgICAgU0VMRUNUIFxyXG4gICAgICAgICAgICAgIGl0ZW0uXCJpdC1jb2RpZ29cIixcclxuICAgICAgICAgICAgICBpdGVtLlwiZGVzYy1pdGVtXCIsIFxyXG4gICAgICAgICAgICAgIGl0ZW0uXCJ1blwiXHJcbiAgICAgICAgICAgIEZST00gcHViLml0ZW1cclxuICAgICAgICAgICAgV0hFUkUgaXRlbS5cIml0LWNvZGlnb1wiID0gJycnJycgKyBAaXRlbUNvZGlnbyArICcnJycnXHJcbiAgICAgICAgICAnJykgYXMgaXRlbVxyXG4gICAgICAgICc7XHJcbiAgICAgICAgXHJcbiAgICAgICAgRVhFQyBzcF9leGVjdXRlc3FsIEBzcWw7XHJcbiAgICAgIGA7XHJcblxyXG4gICAgICBjb25zdCBwYXJhbXM6IFF1ZXJ5UGFyYW1ldGVyW10gPSBbXHJcbiAgICAgICAgeyBuYW1lOiAncGFyYW1JdGVtQ29kaWdvJywgdHlwZTogJ3ZhcmNoYXInLCB2YWx1ZTogaXRlbUNvZGlnbyB9XHJcbiAgICAgIF07XHJcblxyXG4gICAgICAvLyDinIUgUXVlcnkgY29tIGNhY2hlIEwxL0wyIChUVEw6IDEwIG1pbnV0b3MpXHJcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IFF1ZXJ5Q2FjaGVTZXJ2aWNlLndpdGhJdGVtQ2FjaGUoXHJcbiAgICAgICAgcXVlcnksXHJcbiAgICAgICAgcGFyYW1zLFxyXG4gICAgICAgIGFzeW5jICgpID0+IERhdGFiYXNlTWFuYWdlci5xdWVyeUVtcFdpdGhQYXJhbXMocXVlcnksIHBhcmFtcylcclxuICAgICAgKTtcclxuICAgICAgXHJcbiAgICAgIHJldHVybiByZXN1bHQgJiYgcmVzdWx0Lmxlbmd0aCA+IDAgPyByZXN1bHRbMF0gOiBudWxsO1xyXG4gICAgICBcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm8gYW8gYnVzY2FyIGl0ZW0gbWFzdGVyOicsIGVycm9yKTtcclxuICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBCdXNjYSBlc3RhYmVsZWNpbWVudG9zIGRvIGl0ZW0gKENPTSBDQUNIRSAtIFRUTDogMTUgbWludXRvcylcclxuICAgKi9cclxuICBzdGF0aWMgYXN5bmMgZ2V0SXRlbUVzdGFiZWxlY2ltZW50b3MoaXRlbUNvZGlnbzogc3RyaW5nKTogUHJvbWlzZTxhbnlbXT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgcXVlcnkgPSBgXHJcbiAgICAgICAgREVDTEFSRSBAaXRlbUNvZGlnbyB2YXJjaGFyKDE2KSA9IEBwYXJhbUl0ZW1Db2RpZ287XHJcbiAgICAgICAgREVDTEFSRSBAc3FsIG52YXJjaGFyKG1heCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgU0VUIEBzcWwgPSBOJ1xyXG4gICAgICAgICAgU0VMRUNUIFxyXG4gICAgICAgICAgICBpdGVtRXN0YWIuXCJpdC1jb2RpZ29cIiBhcyBpdGVtQ29kaWdvLFxyXG4gICAgICAgICAgICBpdGVtRXN0YWIuXCJjb2QtZXN0YWJlbFwiIGFzIGVzdGFiQ29kaWdvLFxyXG4gICAgICAgICAgICBlc3RhYi5cIm5vbWVcIiBhcyBlc3RhYk5vbWUsXHJcbiAgICAgICAgICAgIGl0ZW1Fc3RhYi5cImNvZC1vYnNvbGV0b1wiIGFzIGNvZE9ic29sZXRvXHJcbiAgICAgICAgICBGUk9NIE9QRU5RVUVSWShQUkRfRU1TMkVNUCwgJydcclxuICAgICAgICAgICAgU0VMRUNUIFxyXG4gICAgICAgICAgICAgIFwiaXRlbS11bmktZXN0YWJcIi5cIml0LWNvZGlnb1wiLFxyXG4gICAgICAgICAgICAgIFwiaXRlbS11bmktZXN0YWJcIi5cImNvZC1lc3RhYmVsXCIsXHJcbiAgICAgICAgICAgICAgXCJpdGVtLXVuaS1lc3RhYlwiLlwiY29kLW9ic29sZXRvXCJcclxuICAgICAgICAgICAgRlJPTSBwdWIuXCJpdGVtLXVuaS1lc3RhYlwiXHJcbiAgICAgICAgICAgIFdIRVJFIFwiaXRlbS11bmktZXN0YWJcIi5cIml0LWNvZGlnb1wiID0gJycnJycgKyBAaXRlbUNvZGlnbyArICcnJycnXHJcbiAgICAgICAgICAnJykgYXMgaXRlbUVzdGFiXHJcbiAgICAgICAgICBMRUZUIEpPSU4gT1BFTlFVRVJZKFBSRF9FTVMyTVVMVCwgJydcclxuICAgICAgICAgICAgU0VMRUNUIFxyXG4gICAgICAgICAgICAgIGVzdGFiZWxlYy5cImVwLWNvZGlnb1wiIGFzIGNvZF9lc3RhYmVsLFxyXG4gICAgICAgICAgICAgIGVzdGFiZWxlYy5cIm5vbWVcIlxyXG4gICAgICAgICAgICBGUk9NIHB1Yi5lc3RhYmVsZWNcclxuICAgICAgICAgICcnKSBhcyBlc3RhYiBPTiBpdGVtRXN0YWIuXCJjb2QtZXN0YWJlbFwiID0gZXN0YWIuY29kX2VzdGFiZWxcclxuICAgICAgICAnO1xyXG4gICAgICAgIFxyXG4gICAgICAgIEVYRUMgc3BfZXhlY3V0ZXNxbCBAc3FsO1xyXG4gICAgICBgO1xyXG5cclxuICAgICAgY29uc3QgcGFyYW1zOiBRdWVyeVBhcmFtZXRlcltdID0gW1xyXG4gICAgICAgIHsgbmFtZTogJ3BhcmFtSXRlbUNvZGlnbycsIHR5cGU6ICd2YXJjaGFyJywgdmFsdWU6IGl0ZW1Db2RpZ28gfVxyXG4gICAgICBdO1xyXG5cclxuICAgICAgLy8g4pyFIFF1ZXJ5IGNvbSBjYWNoZSBMMS9MMiAoVFRMOiAxNSBtaW51dG9zKVxyXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBRdWVyeUNhY2hlU2VydmljZS53aXRoRXN0YWJlbGVjaW1lbnRvQ2FjaGUoXHJcbiAgICAgICAgcXVlcnksXHJcbiAgICAgICAgcGFyYW1zLFxyXG4gICAgICAgIGFzeW5jICgpID0+IERhdGFiYXNlTWFuYWdlci5xdWVyeUVtcFdpdGhQYXJhbXMocXVlcnksIHBhcmFtcylcclxuICAgICAgKTtcclxuICAgICAgXHJcbiAgICAgIHJldHVybiByZXN1bHQgfHwgW107XHJcbiAgICAgIFxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignRXJybyBhbyBidXNjYXIgZXN0YWJlbGVjaW1lbnRvczonLCBlcnJvcik7XHJcbiAgICAgIHRocm93IGVycm9yO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSW52YWxpZGEgY2FjaGUgZG8gaXRlbSAoY2hhbWFyIGFww7NzIFVQREFURS9ERUxFVEUpXHJcbiAgICovXHJcbiAgc3RhdGljIGFzeW5jIGludmFsaWRhdGVDYWNoZShpdGVtQ29kaWdvOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIGF3YWl0IFF1ZXJ5Q2FjaGVTZXJ2aWNlLmludmFsaWRhdGVNdWx0aXBsZShbXHJcbiAgICAgICdpdGVtOionLFxyXG4gICAgICAnZXN0YWJlbGVjaW1lbnRvOionXHJcbiAgICBdKTtcclxuICAgIGNvbnNvbGUubG9nKCdDYWNoZSBpbnZhbGlkYWRvIHBhcmEgaXRlbTonLCBpdGVtQ29kaWdvKTtcclxuICB9XHJcbn0iXSwidmVyc2lvbiI6M30=