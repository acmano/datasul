2435cd648140686d7ffbe0d1aee8f74d
"use strict";
// src/shared/middlewares/cache.middleware.ts
Object.defineProperty(exports, "__esModule", { value: true });
exports.cacheMiddleware = cacheMiddleware;
exports.invalidateCacheMiddleware = invalidateCacheMiddleware;
const cacheManager_1 = require("@shared/utils/cacheManager");
const logger_1 = require("@shared/utils/logger");
function cacheMiddleware(options = {}) {
    const ttl = options.ttl || 300;
    return async (req, res, next) => {
        if (req.method !== 'GET') {
            return next();
        }
        const cacheKey = options.keyGenerator
            ? options.keyGenerator(req)
            : generateDefaultCacheKey(req);
        // ✅ CORRIGIDO: Adicionar await
        const cachedResponse = await cacheManager_1.CacheManager.get(cacheKey);
        if (cachedResponse) {
            logger_1.log.debug('Cache HTTP HIT', {
                correlationId: req.id,
                cacheKey,
                url: req.url
            });
            res.setHeader('X-Cache', 'HIT');
            res.setHeader('X-Cache-Key', cacheKey);
            return res
                .status(cachedResponse.statusCode)
                .set(cachedResponse.headers)
                .json(cachedResponse.body);
        }
        logger_1.log.debug('Cache HTTP MISS', {
            correlationId: req.id,
            cacheKey,
            url: req.url
        });
        const originalJson = res.json.bind(res);
        res.json = function (body) {
            const shouldCache = options.condition
                ? options.condition(req, res)
                : res.statusCode === 200;
            if (shouldCache) {
                const cachedResponse = {
                    statusCode: res.statusCode,
                    headers: getRelevantHeaders(res),
                    body,
                };
                // ✅ CORRIGIDO: Adicionar await (mas como não é async, usar then)
                cacheManager_1.CacheManager.set(cacheKey, cachedResponse, ttl)
                    .then(() => {
                    logger_1.log.debug('Cache HTTP STORED', {
                        correlationId: req.id,
                        cacheKey,
                        ttl,
                        statusCode: res.statusCode,
                    });
                })
                    .catch(err => {
                    logger_1.log.error('Erro ao armazenar cache', { error: err });
                });
            }
            res.setHeader('X-Cache', 'MISS');
            res.setHeader('X-Cache-Key', cacheKey);
            return originalJson(body);
        };
        next();
    };
}
function generateDefaultCacheKey(req) {
    const { method, path, query } = req;
    const sortedQuery = Object.keys(query)
        .sort()
        .map(key => `${key}=${query[key]}`)
        .join('&');
    const parts = [method, path];
    if (sortedQuery) {
        parts.push(sortedQuery);
    }
    return (0, cacheManager_1.generateCacheKey)(...parts);
}
function getRelevantHeaders(res) {
    const relevantHeaders = {};
    const headersToPreserve = [
        'content-type',
        'content-encoding',
        'x-correlation-id',
    ];
    headersToPreserve.forEach(header => {
        const value = res.getHeader(header);
        if (value) {
            relevantHeaders[header] = String(value);
        }
    });
    return relevantHeaders;
}
function invalidateCacheMiddleware(pattern) {
    return (req, res, next) => {
        res.on('finish', async () => {
            if (res.statusCode >= 200 && res.statusCode < 300) {
                const cachePattern = typeof pattern === 'function'
                    ? pattern(req)
                    : pattern;
                // ✅ CORRIGIDO: Adicionar await
                const removed = await cacheManager_1.CacheManager.invalidate(cachePattern);
                if (removed > 0) {
                    logger_1.log.info('Cache invalidado por mutation', {
                        correlationId: req.id,
                        pattern: cachePattern,
                        removed,
                        method: req.method,
                        url: req.url,
                    });
                }
            }
        });
        next();
    };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,