{"file":"/home/mano/projetos/datasul/lor0138/tests/unit/repositories/informacoesGerais.repository.test.ts","mappings":"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","names":[],"sources":["/home/mano/projetos/datasul/lor0138/tests/unit/repositories/informacoesGerais.repository.test.ts"],"sourcesContent":["// tests/unit/repositories/informacoesGerais.repository.test.ts\n\nimport { ItemInformacoesGeraisRepository } from '@api/lor0138/item/dadosCadastrais/informacoesGerais/repository/informacoesGerais.repository';\nimport { DatabaseManager } from '@infrastructure/database/DatabaseManager';\nimport { QueryCacheService } from '@shared/utils/cache/QueryCacheService';\nimport { \n  createItemMasterQueryResult, \n  createItemEstabQueryResult \n} from '../../factories/item.factory';\n\n// Mock do DatabaseManager\njest.mock('@infrastructure/database/DatabaseManager');\n\n// Mock do QueryCacheService\njest.mock('@shared/utils/cache/QueryCacheService');\n\ndescribe('Repository - ItemInformacoesGeraisRepository', () => {\n  \n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  // ========================================\n  // getItemMaster\n  // ========================================\n  describe('getItemMaster', () => {\n    \n    it('deve retornar dados do item quando encontrado', async () => {\n      const mockResult = [createItemMasterQueryResult()];\n      \n      // Mock do cache retornando o resultado da query\n      (QueryCacheService.withItemCache as jest.Mock).mockImplementation(\n        async (query, params, fn) => fn()\n      );\n      \n      (DatabaseManager.queryEmpWithParams as jest.Mock).mockResolvedValue(mockResult);\n\n      const result = await ItemInformacoesGeraisRepository.getItemMaster('7530110');\n\n      expect(result).toEqual(mockResult[0]);\n      expect(DatabaseManager.queryEmpWithParams).toHaveBeenCalledTimes(1);\n      expect(DatabaseManager.queryEmpWithParams).toHaveBeenCalledWith(\n        expect.stringContaining('OPENQUERY'),\n        expect.arrayContaining([\n          expect.objectContaining({ \n            name: 'paramItemCodigo', \n            value: '7530110' \n          })\n        ])\n      );\n    });\n\n    it('deve retornar null quando item não encontrado', async () => {\n      (QueryCacheService.withItemCache as jest.Mock).mockImplementation(\n        async (query, params, fn) => fn()\n      );\n      \n      (DatabaseManager.queryEmpWithParams as jest.Mock).mockResolvedValue([]);\n\n      const result = await ItemInformacoesGeraisRepository.getItemMaster('INEXISTENTE');\n\n      expect(result).toBeNull();\n    });\n\n    it('deve usar queries parametrizadas (proteção SQL Injection)', async () => {\n      const maliciousCode = \"'; DROP TABLE item;--\";\n      \n      (QueryCacheService.withItemCache as jest.Mock).mockImplementation(\n        async (query, params, fn) => fn()\n      );\n      \n      (DatabaseManager.queryEmpWithParams as jest.Mock).mockResolvedValue([]);\n\n      await ItemInformacoesGeraisRepository.getItemMaster(maliciousCode);\n\n      // Verifica que usa parâmetros, não concatenação de string\n      expect(DatabaseManager.queryEmpWithParams).toHaveBeenCalledWith(\n        expect.any(String),\n        expect.arrayContaining([\n          expect.objectContaining({ \n            name: 'paramItemCodigo', \n            value: maliciousCode \n          })\n        ])\n      );\n    });\n\n    it('deve usar cache L1/L2', async () => {\n      const mockResult = [createItemMasterQueryResult()];\n      \n      (QueryCacheService.withItemCache as jest.Mock).mockImplementation(\n        async (query, params, fn) => fn()\n      );\n      \n      (DatabaseManager.queryEmpWithParams as jest.Mock).mockResolvedValue(mockResult);\n\n      await ItemInformacoesGeraisRepository.getItemMaster('7530110');\n\n      expect(QueryCacheService.withItemCache).toHaveBeenCalledTimes(1);\n      expect(QueryCacheService.withItemCache).toHaveBeenCalledWith(\n        expect.stringContaining('OPENQUERY'),\n        expect.any(Array),\n        expect.any(Function)\n      );\n    });\n\n    it('deve propagar erros do banco de dados', async () => {\n      const dbError = new Error('Conexão perdida');\n      \n      (QueryCacheService.withItemCache as jest.Mock).mockImplementation(\n        async (query, params, fn) => fn()\n      );\n      \n      (DatabaseManager.queryEmpWithParams as jest.Mock).mockRejectedValue(dbError);\n\n      await expect(\n        ItemInformacoesGeraisRepository.getItemMaster('7530110')\n      ).rejects.toThrow('Conexão perdida');\n    });\n\n    it('deve construir query OPENQUERY correta para Progress', async () => {\n      (QueryCacheService.withItemCache as jest.Mock).mockImplementation(\n        async (query, params, fn) => fn()\n      );\n      \n      (DatabaseManager.queryEmpWithParams as jest.Mock).mockResolvedValue([]);\n\n      await ItemInformacoesGeraisRepository.getItemMaster('7530110');\n\n      const [query] = (DatabaseManager.queryEmpWithParams as jest.Mock).mock.calls[0];\n      \n      // Valida estrutura da query\n      expect(query).toContain('DECLARE @itemCodigo varchar(16)');\n      expect(query).toContain('OPENQUERY(PRD_EMS2EMP');\n      expect(query).toContain('pub.item');\n      expect(query).toContain('it-codigo');\n      expect(query).toContain('desc-item');\n      expect(query).toContain('EXEC sp_executesql');\n    });\n\n  });\n\n  // ========================================\n  // getItemEstabelecimentos\n  // ========================================\n  describe('getItemEstabelecimentos', () => {\n    \n    it('deve retornar estabelecimentos do item', async () => {\n      const mockResult = [\n        createItemEstabQueryResult(),\n        createItemEstabQueryResult({ estabCodigo: '02.01', estabNome: 'Fábrica' })\n      ];\n      \n      (QueryCacheService.withEstabelecimentoCache as jest.Mock).mockImplementation(\n        async (query, params, fn) => fn()\n      );\n      \n      (DatabaseManager.queryEmpWithParams as jest.Mock).mockResolvedValue(mockResult);\n\n      const result = await ItemInformacoesGeraisRepository.getItemEstabelecimentos('7530110');\n\n      expect(result).toEqual(mockResult);\n      expect(result).toHaveLength(2);\n      expect(DatabaseManager.queryEmpWithParams).toHaveBeenCalledTimes(1);\n    });\n\n    it('deve retornar array vazio quando não há estabelecimentos', async () => {\n      (QueryCacheService.withEstabelecimentoCache as jest.Mock).mockImplementation(\n        async (query, params, fn) => fn()\n      );\n      \n      (DatabaseManager.queryEmpWithParams as jest.Mock).mockResolvedValue([]);\n\n      const result = await ItemInformacoesGeraisRepository.getItemEstabelecimentos('7530110');\n\n      expect(result).toEqual([]);\n    });\n\n    it('deve usar cache específico de estabelecimentos', async () => {\n      (QueryCacheService.withEstabelecimentoCache as jest.Mock).mockImplementation(\n        async (query, params, fn) => fn()\n      );\n      \n      (DatabaseManager.queryEmpWithParams as jest.Mock).mockResolvedValue([]);\n\n      await ItemInformacoesGeraisRepository.getItemEstabelecimentos('7530110');\n\n      expect(QueryCacheService.withEstabelecimentoCache).toHaveBeenCalledTimes(1);\n    });\n\n    it('deve fazer JOIN com dois Linked Servers (EMP + MULT)', async () => {\n      (QueryCacheService.withEstabelecimentoCache as jest.Mock).mockImplementation(\n        async (query, params, fn) => fn()\n      );\n      \n      (DatabaseManager.queryEmpWithParams as jest.Mock).mockResolvedValue([]);\n\n      await ItemInformacoesGeraisRepository.getItemEstabelecimentos('7530110');\n\n      const [query] = (DatabaseManager.queryEmpWithParams as jest.Mock).mock.calls[0];\n      \n      // Valida JOIN entre PRD_EMS2EMP e PRD_EMS2MULT\n      expect(query).toContain('OPENQUERY(PRD_EMS2EMP');\n      expect(query).toContain('OPENQUERY(PRD_EMS2MULT');\n      expect(query).toContain('item-uni-estab');\n      expect(query).toContain('estabelec');\n      expect(query).toContain('LEFT JOIN');\n    });\n\n    it('deve usar parâmetros em ambas as queries OPENQUERY', async () => {\n      (QueryCacheService.withEstabelecimentoCache as jest.Mock).mockImplementation(\n        async (query, params, fn) => fn()\n      );\n      \n      (DatabaseManager.queryEmpWithParams as jest.Mock).mockResolvedValue([]);\n\n      await ItemInformacoesGeraisRepository.getItemEstabelecimentos('7530110');\n\n      expect(DatabaseManager.queryEmpWithParams).toHaveBeenCalledWith(\n        expect.any(String),\n        expect.arrayContaining([\n          expect.objectContaining({ name: 'paramItemCodigo' })\n        ])\n      );\n    });\n\n    it('deve retornar campos corretos do resultado', async () => {\n      const mockResult = [createItemEstabQueryResult()];\n      \n      (QueryCacheService.withEstabelecimentoCache as jest.Mock).mockImplementation(\n        async (query, params, fn) => fn()\n      );\n      \n      (DatabaseManager.queryEmpWithParams as jest.Mock).mockResolvedValue(mockResult);\n\n      const result = await ItemInformacoesGeraisRepository.getItemEstabelecimentos('7530110');\n\n      expect(result[0]).toHaveProperty('itemCodigo');\n      expect(result[0]).toHaveProperty('estabCodigo');\n      expect(result[0]).toHaveProperty('estabNome');\n      expect(result[0]).toHaveProperty('codObsoleto');\n    });\n\n  });\n\n  // ========================================\n  // invalidateCache\n  // ========================================\n  describe('invalidateCache', () => {\n    \n    it('deve invalidar cache de item e estabelecimento', async () => {\n      (QueryCacheService.invalidateMultiple as jest.Mock).mockResolvedValue(undefined);\n\n      await ItemInformacoesGeraisRepository.invalidateCache('7530110');\n\n      expect(QueryCacheService.invalidateMultiple).toHaveBeenCalledTimes(1);\n      expect(QueryCacheService.invalidateMultiple).toHaveBeenCalledWith([\n        'item:*',\n        'estabelecimento:*'\n      ]);\n    });\n\n    it('deve logar invalidação de cache', async () => {\n      const consoleLogSpy = jest.spyOn(console, 'log').mockImplementation();\n      \n      (QueryCacheService.invalidateMultiple as jest.Mock).mockResolvedValue(undefined);\n\n      await ItemInformacoesGeraisRepository.invalidateCache('7530110');\n\n      expect(consoleLogSpy).toHaveBeenCalledWith(\n        'Cache invalidado para item:',\n        '7530110'\n      );\n\n      consoleLogSpy.mockRestore();\n    });\n\n  });\n\n  // ========================================\n  // CENÁRIOS DE ERRO\n  // ========================================\n  describe('Tratamento de Erros', () => {\n    \n    it('deve tratar timeout do banco de dados', async () => {\n      const timeoutError = new Error('Timeout: Request failed to complete');\n      \n      (QueryCacheService.withItemCache as jest.Mock).mockImplementation(\n        async (query, params, fn) => fn()\n      );\n      \n      (DatabaseManager.queryEmpWithParams as jest.Mock).mockRejectedValue(timeoutError);\n\n      await expect(\n        ItemInformacoesGeraisRepository.getItemMaster('7530110')\n      ).rejects.toThrow('Timeout');\n    });\n\n    it('deve tratar erro de conexão perdida', async () => {\n      const connectionError = new Error('ECONNREFUSED');\n      \n      (QueryCacheService.withEstabelecimentoCache as jest.Mock).mockImplementation(\n        async (query, params, fn) => fn()\n      );\n      \n      (DatabaseManager.queryEmpWithParams as jest.Mock).mockRejectedValue(connectionError);\n\n      await expect(\n        ItemInformacoesGeraisRepository.getItemEstabelecimentos('7530110')\n      ).rejects.toThrow('ECONNREFUSED');\n    });\n\n    it('deve tratar erro de sintaxe SQL', async () => {\n      const sqlError = new Error('Incorrect syntax near');\n      \n      (QueryCacheService.withItemCache as jest.Mock).mockImplementation(\n        async (query, params, fn) => fn()\n      );\n      \n      (DatabaseManager.queryEmpWithParams as jest.Mock).mockRejectedValue(sqlError);\n\n      await expect(\n        ItemInformacoesGeraisRepository.getItemMaster('7530110')\n      ).rejects.toThrow('Incorrect syntax');\n    });\n\n  });\n\n  // ========================================\n  // INTEGRAÇÃO COM CACHE\n  // ========================================\n  describe('Integração com Cache', () => {\n    \n    it('deve retornar dados do cache em cache hit', async () => {\n      const cachedData = [createItemMasterQueryResult()];\n      \n      // Mock cache retornando dados diretamente (cache hit)\n      (QueryCacheService.withItemCache as jest.Mock).mockResolvedValue(cachedData);\n\n      const result = await ItemInformacoesGeraisRepository.getItemMaster('7530110');\n\n      expect(result).toEqual(cachedData[0]);\n      // Não deve chamar o banco em cache hit\n      expect(DatabaseManager.queryEmpWithParams).not.toHaveBeenCalled();\n    });\n\n    it('deve buscar do banco em cache miss', async () => {\n      const dbData = [createItemMasterQueryResult()];\n      \n      // Mock cache executando a função (cache miss)\n      (QueryCacheService.withItemCache as jest.Mock).mockImplementation(\n        async (query, params, fn) => fn()\n      );\n      \n      (DatabaseManager.queryEmpWithParams as jest.Mock).mockResolvedValue(dbData);\n\n      const result = await ItemInformacoesGeraisRepository.getItemMaster('7530110');\n\n      expect(result).toEqual(dbData[0]);\n      expect(DatabaseManager.queryEmpWithParams).toHaveBeenCalledTimes(1);\n    });\n\n    it('deve usar TTL diferente para item e estabelecimento', async () => {\n      (QueryCacheService.withItemCache as jest.Mock).mockImplementation(\n        async (query, params, fn) => fn()\n      );\n      \n      (QueryCacheService.withEstabelecimentoCache as jest.Mock).mockImplementation(\n        async (query, params, fn) => fn()\n      );\n      \n      (DatabaseManager.queryEmpWithParams as jest.Mock).mockResolvedValue([]);\n\n      await ItemInformacoesGeraisRepository.getItemMaster('7530110');\n      await ItemInformacoesGeraisRepository.getItemEstabelecimentos('7530110');\n\n      // Verifica que usa caches diferentes\n      expect(QueryCacheService.withItemCache).toHaveBeenCalledTimes(1);\n      expect(QueryCacheService.withEstabelecimentoCache).toHaveBeenCalledTimes(1);\n    });\n\n  });\n\n});"],"version":3}