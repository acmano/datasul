d4d2b120122fdb57b485ecc9bae5b9f9
"use strict";
// src/shared/utils/cache/RedisCacheAdapter.ts
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RedisCacheAdapter = void 0;
const ioredis_1 = __importDefault(require("ioredis"));
const logger_1 = require("../logger");
/**
 * Adaptador de cache Redis (L2)
 * - Compartilhado entre múltiplas instâncias
 * - Persistente (sobrevive a restarts)
 * - Um pouco mais lento que memória (rede)
 */
class RedisCacheAdapter {
    constructor(urlOrOptions, name = 'L2-Redis') {
        this.ready = false;
        this.name = name;
        // Aceita URL ou objeto de configuração
        if (typeof urlOrOptions === 'string') {
            this.redis = new ioredis_1.default(urlOrOptions, {
                retryStrategy: (times) => {
                    const delay = Math.min(times * 50, 2000);
                    logger_1.log.warn(`${this.name} reconectando...`, { attempt: times, delay });
                    return delay;
                },
                maxRetriesPerRequest: 3,
                enableReadyCheck: true,
                lazyConnect: false
            });
        }
        else {
            this.redis = new ioredis_1.default(urlOrOptions);
        }
        this.setupEventHandlers();
    }
    setupEventHandlers() {
        this.redis.on('connect', () => {
            logger_1.log.info(`${this.name} conectando...`);
        });
        this.redis.on('ready', () => {
            this.ready = true;
            logger_1.log.info(`${this.name} pronto`, {
                host: this.redis.options.host,
                port: this.redis.options.port
            });
        });
        this.redis.on('error', (error) => {
            logger_1.log.error(`${this.name} erro`, { error: error.message });
        });
        this.redis.on('close', () => {
            this.ready = false;
            logger_1.log.warn(`${this.name} conexão fechada`);
        });
        this.redis.on('reconnecting', () => {
            logger_1.log.info(`${this.name} reconectando...`);
        });
    }
    async get(key) {
        try {
            if (!this.ready) {
                logger_1.log.warn(`${this.name} não está pronto`, { key });
                return undefined;
            }
            const value = await this.redis.get(key);
            if (value) {
                logger_1.log.debug(`${this.name} HIT`, { key });
                return JSON.parse(value);
            }
            logger_1.log.debug(`${this.name} MISS`, { key });
            return undefined;
        }
        catch (error) {
            logger_1.log.error(`${this.name} GET error`, { key, error });
            return undefined;
        }
    }
    async set(key, value, ttl) {
        try {
            if (!this.ready) {
                logger_1.log.warn(`${this.name} não está pronto`, { key });
                return false;
            }
            const serialized = JSON.stringify(value);
            if (ttl && ttl > 0) {
                // SETEX: Set com expiração
                await this.redis.setex(key, ttl, serialized);
            }
            else {
                // SET: Sem expiração
                await this.redis.set(key, serialized);
            }
            logger_1.log.debug(`${this.name} SET`, { key, ttl });
            return true;
        }
        catch (error) {
            logger_1.log.error(`${this.name} SET error`, { key, error });
            return false;
        }
    }
    async delete(key) {
        try {
            if (!this.ready) {
                logger_1.log.warn(`${this.name} não está pronto`, { key });
                return 0;
            }
            const deleted = await this.redis.del(key);
            logger_1.log.debug(`${this.name} DELETE`, { key, deleted });
            return deleted;
        }
        catch (error) {
            logger_1.log.error(`${this.name} DELETE error`, { key, error });
            return 0;
        }
    }
    async flush() {
        try {
            if (!this.ready) {
                logger_1.log.warn(`${this.name} não está pronto`);
                return;
            }
            await this.redis.flushall();
            logger_1.log.info(`${this.name} FLUSH ALL`);
        }
        catch (error) {
            logger_1.log.error(`${this.name} FLUSH error`, { error });
        }
    }
    async keys(pattern = '*') {
        try {
            if (!this.ready) {
                logger_1.log.warn(`${this.name} não está pronto`);
                return [];
            }
            // SCAN é mais seguro que KEYS em produção
            const keys = [];
            let cursor = '0';
            do {
                const [nextCursor, foundKeys] = await this.redis.scan(cursor, 'MATCH', pattern, 'COUNT', 100);
                cursor = nextCursor;
                keys.push(...foundKeys);
            } while (cursor !== '0');
            return keys;
        }
        catch (error) {
            logger_1.log.error(`${this.name} KEYS error`, { pattern, error });
            return [];
        }
    }
    async isReady() {
        return this.ready;
    }
    async close() {
        try {
            await this.redis.quit();
            this.ready = false;
            logger_1.log.info(`${this.name} fechado`);
        }
        catch (error) {
            logger_1.log.error(`${this.name} CLOSE error`, { error });
        }
    }
    /**
     * Métodos extras específicos do Redis
     */
    async ping() {
        return this.redis.ping();
    }
    async info() {
        return this.redis.info();
    }
    getClient() {
        return this.redis;
    }
}
exports.RedisCacheAdapter = RedisCacheAdapter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,