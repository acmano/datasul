77280474433094c205c47617ae5d3962
"use strict";
// src/shared/middlewares/correlationId.middleware.ts
Object.defineProperty(exports, "__esModule", { value: true });
exports.withCorrelationId = exports.getCorrelationId = exports.correlationIdMiddleware = void 0;
const uuid_1 = require("uuid");
const logger_1 = require("@shared/utils/logger");
/**
 * Middleware de Correlation ID
 *
 * Funcionalidades:
 * 1. Aceita correlation ID do cliente (headers: X-Correlation-ID, X-Request-ID, correlation-id)
 * 2. Gera novo UUID se não fornecido
 * 3. Adiciona ao objeto request (req.id)
 * 4. Retorna no header X-Correlation-ID
 * 5. Adiciona timestamp para métricas de performance
 *
 * @example
 * // Cliente envia:
 * curl -H "X-Correlation-ID: abc-123" http://lor0138.lorenzetti.ibe:3000/api/...
 *
 * // Servidor usa "abc-123" e retorna no header:
 * X-Correlation-ID: abc-123
 *
 * // Se cliente não enviar, servidor gera:
 * X-Correlation-ID: 550e8400-e29b-41d4-a716-446655440000
 */
const correlationIdMiddleware = (req, res, next) => {
    // 1. Tenta pegar correlation ID dos headers do cliente (ordem de prioridade)
    const clientCorrelationId = req.headers['x-correlation-id'] ||
        req.headers['x-request-id'] ||
        req.headers['correlation-id'];
    // 2. Usa ID do cliente ou gera novo UUID
    const correlationId = clientCorrelationId || (0, uuid_1.v4)();
    // 3. Adiciona ao request para uso em toda aplicação
    req.id = correlationId;
    // 4. Adiciona timestamp para cálculo de duração
    req.startTime = Date.now();
    // 5. Retorna correlation ID no header de resposta
    res.setHeader('X-Correlation-ID', correlationId);
    // 6. Log de início da requisição (opcional, pode ser feito no requestLogger)
    if (clientCorrelationId) {
        logger_1.log.debug('Correlation ID recebido do cliente', {
            correlationId,
            method: req.method,
            url: req.url,
        });
    }
    next();
};
exports.correlationIdMiddleware = correlationIdMiddleware;
/**
 * Helper para obter correlation ID do request
 * Útil em lugares onde o request não está disponível diretamente
 */
const getCorrelationId = (req) => {
    return req.id || 'unknown';
};
exports.getCorrelationId = getCorrelationId;
/**
 * Helper para adicionar correlation ID em objetos de log
 */
const withCorrelationId = (req, logData) => {
    return {
        ...logData,
        correlationId: req.id,
    };
};
exports.withCorrelationId = withCorrelationId;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvbWFuby9wcm9qZXRvcy9kYXRhc3VsL2xvcjAxMzgvc3JjL3NoYXJlZC9taWRkbGV3YXJlcy9jb3JyZWxhdGlvbklkLm1pZGRsZXdhcmUudHMiLCJtYXBwaW5ncyI6IjtBQUFBLHFEQUFxRDs7O0FBR3JELCtCQUFvQztBQUNwQyxpREFBMkM7QUFFM0M7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FtQkc7QUFDSSxNQUFNLHVCQUF1QixHQUFHLENBQ3JDLEdBQVksRUFDWixHQUFhLEVBQ2IsSUFBa0IsRUFDWixFQUFFO0lBQ1IsNkVBQTZFO0lBQzdFLE1BQU0sbUJBQW1CLEdBQ3ZCLEdBQUcsQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQVc7UUFDekMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQVc7UUFDckMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBVyxDQUFDO0lBRTFDLHlDQUF5QztJQUN6QyxNQUFNLGFBQWEsR0FBRyxtQkFBbUIsSUFBSSxJQUFBLFNBQU0sR0FBRSxDQUFDO0lBRXRELG9EQUFvRDtJQUNwRCxHQUFHLENBQUMsRUFBRSxHQUFHLGFBQWEsQ0FBQztJQUV2QixnREFBZ0Q7SUFDaEQsR0FBRyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFFM0Isa0RBQWtEO0lBQ2xELEdBQUcsQ0FBQyxTQUFTLENBQUMsa0JBQWtCLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFFakQsNkVBQTZFO0lBQzdFLElBQUksbUJBQW1CLEVBQUUsQ0FBQztRQUN4QixZQUFHLENBQUMsS0FBSyxDQUFDLG9DQUFvQyxFQUFFO1lBQzlDLGFBQWE7WUFDYixNQUFNLEVBQUUsR0FBRyxDQUFDLE1BQU07WUFDbEIsR0FBRyxFQUFFLEdBQUcsQ0FBQyxHQUFHO1NBQ2IsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELElBQUksRUFBRSxDQUFDO0FBQ1QsQ0FBQyxDQUFDO0FBakNXLFFBQUEsdUJBQXVCLDJCQWlDbEM7QUFFRjs7O0dBR0c7QUFDSSxNQUFNLGdCQUFnQixHQUFHLENBQUMsR0FBWSxFQUFVLEVBQUU7SUFDdkQsT0FBTyxHQUFHLENBQUMsRUFBRSxJQUFJLFNBQVMsQ0FBQztBQUM3QixDQUFDLENBQUM7QUFGVyxRQUFBLGdCQUFnQixvQkFFM0I7QUFFRjs7R0FFRztBQUNJLE1BQU0saUJBQWlCLEdBQUcsQ0FDL0IsR0FBWSxFQUNaLE9BQTRCLEVBQ1AsRUFBRTtJQUN2QixPQUFPO1FBQ0wsR0FBRyxPQUFPO1FBQ1YsYUFBYSxFQUFFLEdBQUcsQ0FBQyxFQUFFO0tBQ3RCLENBQUM7QUFDSixDQUFDLENBQUM7QUFSVyxRQUFBLGlCQUFpQixxQkFRNUIiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL2hvbWUvbWFuby9wcm9qZXRvcy9kYXRhc3VsL2xvcjAxMzgvc3JjL3NoYXJlZC9taWRkbGV3YXJlcy9jb3JyZWxhdGlvbklkLm1pZGRsZXdhcmUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL3NoYXJlZC9taWRkbGV3YXJlcy9jb3JyZWxhdGlvbklkLm1pZGRsZXdhcmUudHNcblxuaW1wb3J0IHsgUmVxdWVzdCwgUmVzcG9uc2UsIE5leHRGdW5jdGlvbiB9IGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IHsgdjQgYXMgdXVpZHY0IH0gZnJvbSAndXVpZCc7XG5pbXBvcnQgeyBsb2cgfSBmcm9tICdAc2hhcmVkL3V0aWxzL2xvZ2dlcic7XG5cbi8qKlxuICogTWlkZGxld2FyZSBkZSBDb3JyZWxhdGlvbiBJRFxuICogXG4gKiBGdW5jaW9uYWxpZGFkZXM6XG4gKiAxLiBBY2VpdGEgY29ycmVsYXRpb24gSUQgZG8gY2xpZW50ZSAoaGVhZGVyczogWC1Db3JyZWxhdGlvbi1JRCwgWC1SZXF1ZXN0LUlELCBjb3JyZWxhdGlvbi1pZClcbiAqIDIuIEdlcmEgbm92byBVVUlEIHNlIG7Do28gZm9ybmVjaWRvXG4gKiAzLiBBZGljaW9uYSBhbyBvYmpldG8gcmVxdWVzdCAocmVxLmlkKVxuICogNC4gUmV0b3JuYSBubyBoZWFkZXIgWC1Db3JyZWxhdGlvbi1JRFxuICogNS4gQWRpY2lvbmEgdGltZXN0YW1wIHBhcmEgbcOpdHJpY2FzIGRlIHBlcmZvcm1hbmNlXG4gKiBcbiAqIEBleGFtcGxlXG4gKiAvLyBDbGllbnRlIGVudmlhOlxuICogY3VybCAtSCBcIlgtQ29ycmVsYXRpb24tSUQ6IGFiYy0xMjNcIiBodHRwOi8vbG9yMDEzOC5sb3JlbnpldHRpLmliZTozMDAwL2FwaS8uLi5cbiAqIFxuICogLy8gU2Vydmlkb3IgdXNhIFwiYWJjLTEyM1wiIGUgcmV0b3JuYSBubyBoZWFkZXI6XG4gKiBYLUNvcnJlbGF0aW9uLUlEOiBhYmMtMTIzXG4gKiBcbiAqIC8vIFNlIGNsaWVudGUgbsOjbyBlbnZpYXIsIHNlcnZpZG9yIGdlcmE6XG4gKiBYLUNvcnJlbGF0aW9uLUlEOiA1NTBlODQwMC1lMjliLTQxZDQtYTcxNi00NDY2NTU0NDAwMDBcbiAqL1xuZXhwb3J0IGNvbnN0IGNvcnJlbGF0aW9uSWRNaWRkbGV3YXJlID0gKFxuICByZXE6IFJlcXVlc3QsXG4gIHJlczogUmVzcG9uc2UsXG4gIG5leHQ6IE5leHRGdW5jdGlvblxuKTogdm9pZCA9PiB7XG4gIC8vIDEuIFRlbnRhIHBlZ2FyIGNvcnJlbGF0aW9uIElEIGRvcyBoZWFkZXJzIGRvIGNsaWVudGUgKG9yZGVtIGRlIHByaW9yaWRhZGUpXG4gIGNvbnN0IGNsaWVudENvcnJlbGF0aW9uSWQgPSBcbiAgICByZXEuaGVhZGVyc1sneC1jb3JyZWxhdGlvbi1pZCddIGFzIHN0cmluZyB8fFxuICAgIHJlcS5oZWFkZXJzWyd4LXJlcXVlc3QtaWQnXSBhcyBzdHJpbmcgfHxcbiAgICByZXEuaGVhZGVyc1snY29ycmVsYXRpb24taWQnXSBhcyBzdHJpbmc7XG5cbiAgLy8gMi4gVXNhIElEIGRvIGNsaWVudGUgb3UgZ2VyYSBub3ZvIFVVSURcbiAgY29uc3QgY29ycmVsYXRpb25JZCA9IGNsaWVudENvcnJlbGF0aW9uSWQgfHwgdXVpZHY0KCk7XG5cbiAgLy8gMy4gQWRpY2lvbmEgYW8gcmVxdWVzdCBwYXJhIHVzbyBlbSB0b2RhIGFwbGljYcOnw6NvXG4gIHJlcS5pZCA9IGNvcnJlbGF0aW9uSWQ7XG5cbiAgLy8gNC4gQWRpY2lvbmEgdGltZXN0YW1wIHBhcmEgY8OhbGN1bG8gZGUgZHVyYcOnw6NvXG4gIHJlcS5zdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuXG4gIC8vIDUuIFJldG9ybmEgY29ycmVsYXRpb24gSUQgbm8gaGVhZGVyIGRlIHJlc3Bvc3RhXG4gIHJlcy5zZXRIZWFkZXIoJ1gtQ29ycmVsYXRpb24tSUQnLCBjb3JyZWxhdGlvbklkKTtcblxuICAvLyA2LiBMb2cgZGUgaW7DrWNpbyBkYSByZXF1aXNpw6fDo28gKG9wY2lvbmFsLCBwb2RlIHNlciBmZWl0byBubyByZXF1ZXN0TG9nZ2VyKVxuICBpZiAoY2xpZW50Q29ycmVsYXRpb25JZCkge1xuICAgIGxvZy5kZWJ1ZygnQ29ycmVsYXRpb24gSUQgcmVjZWJpZG8gZG8gY2xpZW50ZScsIHtcbiAgICAgIGNvcnJlbGF0aW9uSWQsXG4gICAgICBtZXRob2Q6IHJlcS5tZXRob2QsXG4gICAgICB1cmw6IHJlcS51cmwsXG4gICAgfSk7XG4gIH1cblxuICBuZXh0KCk7XG59O1xuXG4vKipcbiAqIEhlbHBlciBwYXJhIG9idGVyIGNvcnJlbGF0aW9uIElEIGRvIHJlcXVlc3RcbiAqIMOadGlsIGVtIGx1Z2FyZXMgb25kZSBvIHJlcXVlc3QgbsOjbyBlc3TDoSBkaXNwb27DrXZlbCBkaXJldGFtZW50ZVxuICovXG5leHBvcnQgY29uc3QgZ2V0Q29ycmVsYXRpb25JZCA9IChyZXE6IFJlcXVlc3QpOiBzdHJpbmcgPT4ge1xuICByZXR1cm4gcmVxLmlkIHx8ICd1bmtub3duJztcbn07XG5cbi8qKlxuICogSGVscGVyIHBhcmEgYWRpY2lvbmFyIGNvcnJlbGF0aW9uIElEIGVtIG9iamV0b3MgZGUgbG9nXG4gKi9cbmV4cG9ydCBjb25zdCB3aXRoQ29ycmVsYXRpb25JZCA9IChcbiAgcmVxOiBSZXF1ZXN0LFxuICBsb2dEYXRhOiBSZWNvcmQ8c3RyaW5nLCBhbnk+XG4pOiBSZWNvcmQ8c3RyaW5nLCBhbnk+ID0+IHtcbiAgcmV0dXJuIHtcbiAgICAuLi5sb2dEYXRhLFxuICAgIGNvcnJlbGF0aW9uSWQ6IHJlcS5pZCxcbiAgfTtcbn07Il0sInZlcnNpb24iOjN9