{"file":"/home/mano/projetos/datasul/lor0138/tests/setup.ts","mappings":"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","names":[],"sources":["/home/mano/projetos/datasul/lor0138/tests/setup.ts"],"sourcesContent":["// tests/setup.ts\n// Setup global para todos os testes\n\n// ========================================\n// 1. VARIÁVEIS DE AMBIENTE PARA TESTES\n// ========================================\nprocess.env.NODE_ENV = 'test';\nprocess.env.PORT = '3001'; // Porta diferente para não conflitar\n\n// Database (Mock será usado automaticamente)\nprocess.env.DB_CONNECTION_TYPE = 'sqlserver';\nprocess.env.DB_SERVER = 'test-server';\nprocess.env.DB_PORT = '1433';\nprocess.env.DB_USER = 'test-user';\nprocess.env.DB_PASSWORD = 'test-password';\nprocess.env.DB_DATABASE_EMP = '';\nprocess.env.DB_DATABASE_MULT = '';\nprocess.env.DB_CONNECTION_TIMEOUT = '5000';\nprocess.env.DB_REQUEST_TIMEOUT = '5000';\nprocess.env.DB_ENCRYPT = 'false';\nprocess.env.DB_TRUST_SERVER_CERTIFICATE = 'true';\n\n// Cache (desabilitado para testes por padrão)\nprocess.env.CACHE_ENABLED = 'false';\nprocess.env.CACHE_STRATEGY = 'memory';\n\n// CORS\nprocess.env.CORS_ALLOWED_ORIGINS = 'http://localhost:3001';\n\n// Timeouts\nprocess.env.HTTP_REQUEST_TIMEOUT = '5000';\nprocess.env.HTTP_HEALTH_TIMEOUT = '2000';\n\n// Shutdown\nprocess.env.SHUTDOWN_TIMEOUT = '1000';\n\n// ========================================\n// 2. MOCK DO LOGGER (evita poluir console)\n// ========================================\njest.mock('@shared/utils/logger', () => ({\n  log: {\n    info: jest.fn(),\n    error: jest.fn(),\n    warn: jest.fn(),\n    debug: jest.fn(),\n    http: jest.fn(),\n  },\n}));\n\n// ========================================\n// 3. MOCKS GLOBAIS DE CONSOLE (opcional)\n// ========================================\n// Silencia console.log/error durante testes (descomente se quiser)\n// global.console.log = jest.fn();\n// global.console.error = jest.fn();\n// global.console.warn = jest.fn();\n\n// ========================================\n// 4. TIMEOUT GLOBAL (aumenta se testes forem lentos)\n// ========================================\njest.setTimeout(10000); // 10 segundos\n\n// ========================================\n// 5. EXTEND EXPECT (matchers customizados)\n// ========================================\nexpect.extend({\n  // Matcher customizado para validar erro customizado\n  toBeCustomError(received: any, expectedClass: any) {\n    const pass = received instanceof expectedClass;\n    \n    if (pass) {\n      return {\n        message: () => `Expected error NOT to be instance of ${expectedClass.name}`,\n        pass: true,\n      };\n    } else {\n      return {\n        message: () => `Expected error to be instance of ${expectedClass.name}, but got ${received?.constructor?.name}`,\n        pass: false,\n      };\n    }\n  },\n\n  // Matcher para validar estrutura de API response\n  toBeApiResponse(received: any) {\n    const hasSuccess = 'success' in received;\n    const hasData = 'data' in received || 'error' in received;\n    const pass = hasSuccess && hasData;\n\n    if (pass) {\n      return {\n        message: () => 'Expected NOT to be a valid API response',\n        pass: true,\n      };\n    } else {\n      return {\n        message: () => `Expected to be a valid API response with 'success' and 'data'/'error' fields`,\n        pass: false,\n      };\n    }\n  },\n});\n\n// ========================================\n// 6. DECLARAÇÃO DE TIPOS PARA MATCHERS CUSTOMIZADOS\n// ========================================\ndeclare global {\n  namespace jest {\n    interface Matchers<R> {\n      toBeCustomError(expectedClass: any): R;\n      toBeApiResponse(): R;\n    }\n  }\n}\n\n// ========================================\n// 7. CLEANUP APÓS CADA TESTE\n// ========================================\nafterEach(() => {\n  jest.clearAllMocks(); // Limpa histórico de calls de mocks\n});\n\n// ========================================\n// 8. CLEANUP APÓS TODOS OS TESTES\n// ========================================\nafterAll(async () => {\n  // Aguarda promises pendentes\n  await new Promise((resolve) => setTimeout(resolve, 500));\n  \n  // Fecha conexões abertas (se houver)\n  // await DatabaseManager.close();\n  // await CacheManager.close();\n});\n\n// ========================================\n// 9. ERRO DE PROMISES NÃO TRATADAS\n// ========================================\nprocess.on('unhandledRejection', (reason, promise) => {\n  console.error('Unhandled Rejection during test:', reason);\n  throw reason;\n});\n\nconsole.log('🧪 Ambiente de testes configurado');\n\n// ========================================\n// 10. EXPORT PARA TORNAR ESTE ARQUIVO UM MÓDULO\n// ========================================\n// Necessário para o 'declare global' funcionar\nexport {};"],"version":3}