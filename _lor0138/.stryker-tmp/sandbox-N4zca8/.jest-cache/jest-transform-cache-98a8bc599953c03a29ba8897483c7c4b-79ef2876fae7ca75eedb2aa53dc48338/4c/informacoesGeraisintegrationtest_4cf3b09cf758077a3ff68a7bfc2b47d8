2ee41f3bb1a2d9cb869bddfb55a1920f
"use strict";
// tests/integration/api/informacoesGerais.integration.test.ts
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const supertest_1 = __importDefault(require("supertest"));
const database_helper_1 = require("../../helpers/database.helper");
const app_1 = __importDefault(require("../../../src/app"));
/**
 * TESTES DE INTEGRA√á√ÉO COM BANCO REAL
 *
 * Estes testes conectam no banco de produ√ß√£o (somente leitura)
 * Se o banco n√£o estiver dispon√≠vel, usam MOCK automaticamente
 */
describe('INTEGRA√á√ÉO - API InformacoesGerais (Banco Real)', () => {
    let usingRealDatabase = false;
    let testItemCode;
    // ========================================
    // SETUP
    // ========================================
    beforeAll(async () => {
        await database_helper_1.DatabaseTestHelper.initialize();
        usingRealDatabase = database_helper_1.DatabaseTestHelper.isUsingRealDatabase();
        // Buscar c√≥digo de item real para testes
        testItemCode = await database_helper_1.DatabaseTestHelper.getTestItemCode();
        console.log(`üîó Banco: ${usingRealDatabase ? 'REAL' : 'MOCK'}`);
        console.log(`üì¶ Item de teste: ${testItemCode}`);
    });
    afterAll(async () => {
        await database_helper_1.DatabaseTestHelper.cleanup();
    });
    // ========================================
    // TESTE 1: CONEX√ÉO COM BANCO
    // ========================================
    describe('Conex√£o com Banco de Dados', () => {
        it('deve conectar com banco ou usar mock', async () => {
            const isReady = await database_helper_1.DatabaseTestHelper.waitUntilReady(5000);
            expect(isReady).toBe(true);
        });
        it('deve reportar status correto no health check', async () => {
            const response = await (0, supertest_1.default)(app_1.default)
                .get('/health')
                .expect((res) => {
                expect([200, 503]).toContain(res.status);
            });
            expect(response.body).toHaveProperty('database');
            expect(response.body.database).toHaveProperty('connected');
            if (usingRealDatabase) {
                expect(response.body.database.connected).toBe(true);
                expect(response.body.database.type).toBe('sqlserver');
            }
        });
    });
    // ========================================
    // TESTE 2: BUSCAR ITEM REAL
    // ========================================
    describe('Buscar Informa√ß√µes Gerais (Dados Reais)', () => {
        it('deve buscar item existente com sucesso', async () => {
            const startTime = Date.now();
            const response = await (0, supertest_1.default)(app_1.default)
                .get(`/api/lor0138/item/dadosCadastrais/informacoesGerais/${testItemCode}`)
                .expect(200);
            const duration = Date.now() - startTime;
            // Valida√ß√µes b√°sicas
            expect(response.body).toHaveProperty('success', true);
            expect(response.body).toHaveProperty('data');
            // Se banco real, validar dados
            if (usingRealDatabase) {
                expect(response.body.data).toHaveProperty('item');
                expect(response.body.data.item).toHaveProperty('codigo', testItemCode);
                expect(response.body.data.item).toHaveProperty('descricao');
                expect(response.body.data.item).toHaveProperty('unidade');
                // Validar performance (banco real deve responder r√°pido)
                expect(duration).toRespondWithin(5000); // max 5s
            }
        });
        it('deve retornar 404 para item inexistente', async () => {
            const invalidCode = 'INVALID999';
            const response = await (0, supertest_1.default)(app_1.default)
                .get(`/api/lor0138/item/dadosCadastrais/informacoesGerais/${invalidCode}`)
                .expect(404);
            expect(response.body).toHaveProperty('error');
            expect(response.body.message).toMatch(/n√£o encontrado/i);
        });
    });
    // ========================================
    // TESTE 3: VALIDA√á√ÉO COM DADOS REAIS
    // ========================================
    describe('Valida√ß√£o de Dados do Banco', () => {
        it('deve retornar estrutura de dados correta', async () => {
            const response = await (0, supertest_1.default)(app_1.default)
                .get(`/api/lor0138/item/dadosCadastrais/informacoesGerais/${testItemCode}`)
                .expect(200);
            const { data } = response.body;
            // Estrutura esperada
            expect(data).toHaveProperty('item');
            expect(data).toHaveProperty('estabelecimentos');
            // Item deve ter campos obrigat√≥rios
            expect(data.item).toMatchObject({
                codigo: expect.any(String),
                descricao: expect.any(String),
                unidade: expect.any(String),
            });
            // Estabelecimentos deve ser array
            expect(Array.isArray(data.estabelecimentos)).toBe(true);
        });
        it('campos do item devem ter tipos corretos', async () => {
            const response = await (0, supertest_1.default)(app_1.default)
                .get(`/api/lor0138/item/dadosCadastrais/informacoesGerais/${testItemCode}`)
                .expect(200);
            const { item } = response.body.data;
            expect(typeof item.codigo).toBe('string');
            expect(typeof item.descricao).toBe('string');
            expect(typeof item.unidade).toBe('string');
            // Se tiver campos opcionais
            if (item.tipo) {
                expect(typeof item.tipo).toBe('string');
            }
        });
    });
    // ========================================
    // TESTE 4: PERFORMANCE COM BANCO REAL
    // ========================================
    describe('Performance (Banco Real)', () => {
        it('deve responder em menos de 3 segundos', async function () {
            // Pular se n√£o for banco real
            if (!usingRealDatabase) {
                console.log('‚è≠Ô∏è  Teste de performance pulado - usando mock');
                return;
            }
            const startTime = Date.now();
            await (0, supertest_1.default)(app_1.default)
                .get(`/api/lor0138/item/dadosCadastrais/informacoesGerais/${testItemCode}`)
                .expect(200);
            const duration = Date.now() - startTime;
            expect(duration).toBeLessThan(3000);
        });
        it('deve manter performance consistente em m√∫ltiplas requisi√ß√µes', async function () {
            if (!usingRealDatabase) {
                console.log('‚è≠Ô∏è  Teste de performance pulado - usando mock');
                return;
            }
            const durations = [];
            const iterations = 5;
            for (let i = 0; i < iterations; i++) {
                const start = Date.now();
                await (0, supertest_1.default)(app_1.default)
                    .get(`/api/lor0138/item/dadosCadastrais/informacoesGerais/${testItemCode}`)
                    .expect(200);
                durations.push(Date.now() - start);
            }
            const avgDuration = durations.reduce((a, b) => a + b, 0) / durations.length;
            console.log(`üìä M√©dia de ${iterations} requisi√ß√µes: ${avgDuration.toFixed(0)}ms`);
            expect(avgDuration).toBeLessThan(3000);
        });
    });
    // ========================================
    // TESTE 5: EDGE CASES COM BANCO REAL
    // ========================================
    describe('Edge Cases (Banco Real)', () => {
        it('deve buscar item com c√≥digo alfanum√©rico', async () => {
            // Usar c√≥digo conhecido ou pular se n√£o houver
            const codes = database_helper_1.DatabaseTestHelper.getKnownTestCodes();
            const response = await (0, supertest_1.default)(app_1.default)
                .get(`/api/lor0138/item/dadosCadastrais/informacoesGerais/${codes.validItem}`)
                .expect((res) => {
                // Aceita 200 (encontrado) ou 404 (n√£o encontrado, mas validou)
                expect([200, 404]).toContain(res.status);
            });
            if (response.status === 200) {
                expect(response.body.success).toBe(true);
            }
        });
        it('deve validar c√≥digo com 16 caracteres (m√°ximo)', async () => {
            const maxCode = '1234567890123456';
            const response = await (0, supertest_1.default)(app_1.default)
                .get(`/api/lor0138/item/dadosCadastrais/informacoesGerais/${maxCode}`)
                .expect((res) => {
                expect([200, 404]).toContain(res.status);
            });
            // N√£o deve dar erro de valida√ß√£o (400)
            expect(response.status).not.toBe(400);
        });
        it('deve rejeitar c√≥digo com 17 caracteres', async () => {
            const tooLongCode = '12345678901234567'; // 17 chars
            const response = await (0, supertest_1.default)(app_1.default)
                .get(`/api/lor0138/item/dadosCadastrais/informacoesGerais/${tooLongCode}`)
                .expect(400);
            expect(response.body).toHaveProperty('error');
        });
    });
    // ========================================
    // TESTE 6: ESTABELECIMENTOS (se dispon√≠vel)
    // ========================================
    describe('Estabelecimentos do Item', () => {
        it('deve retornar estabelecimentos se existirem', async () => {
            const response = await (0, supertest_1.default)(app_1.default)
                .get(`/api/lor0138/item/dadosCadastrais/informacoesGerais/${testItemCode}`)
                .expect(200);
            const { estabelecimentos } = response.body.data;
            expect(Array.isArray(estabelecimentos)).toBe(true);
            // Se houver estabelecimentos, validar estrutura
            if (estabelecimentos.length > 0) {
                const estab = estabelecimentos[0];
                expect(estab).toHaveProperty('codigo');
                expect(estab).toHaveProperty('nome');
                expect(typeof estab.codigo).toBe('string');
                expect(typeof estab.nome).toBe('string');
            }
        });
    });
    // ========================================
    // TESTE 7: CORRELATION ID E HEADERS
    // ========================================
    describe('Headers e Correlation ID', () => {
        it('deve incluir Correlation ID na resposta', async () => {
            const response = await (0, supertest_1.default)(app_1.default)
                .get(`/api/lor0138/item/dadosCadastrais/informacoesGerais/${testItemCode}`);
            expect(response.headers['x-correlation-id']).toBeDefined();
        });
        it('deve aceitar Correlation ID customizado', async () => {
            const customId = 'integration-test-123';
            const response = await (0, supertest_1.default)(app_1.default)
                .get(`/api/lor0138/item/dadosCadastrais/informacoesGerais/${testItemCode}`)
                .set('X-Correlation-ID', customId);
            expect(response.headers['x-correlation-id']).toBe(customId);
        });
    });
    // ========================================
    // TESTE 8: TIMEOUT E RESIL√äNCIA
    // ========================================
    describe('Timeout e Resil√™ncia', () => {
        it('n√£o deve travar em requisi√ß√£o inv√°lida', async () => {
            const response = await (0, supertest_1.default)(app_1.default)
                .get('/api/lor0138/item/dadosCadastrais/informacoesGerais/INVALID')
                .timeout(5000); // 5s max
            expect(response.status).toBeDefined();
            expect([200, 404, 400]).toContain(response.status);
        });
    });
    // ========================================
    // TESTE 9: COMPARA√á√ÉO MOCK vs REAL
    // ========================================
    describe('Compara√ß√£o Mock vs Real', () => {
        it('deve informar qual fonte de dados est√° sendo usada', () => {
            console.log(`
        üìä RESULTADO DOS TESTES:
        - Fonte de dados: ${usingRealDatabase ? 'BANCO REAL' : 'MOCK'}
        - C√≥digo testado: ${testItemCode}
        - Ambiente: ${process.env.NODE_ENV}
      `);
            expect(usingRealDatabase).toBeDefined();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,