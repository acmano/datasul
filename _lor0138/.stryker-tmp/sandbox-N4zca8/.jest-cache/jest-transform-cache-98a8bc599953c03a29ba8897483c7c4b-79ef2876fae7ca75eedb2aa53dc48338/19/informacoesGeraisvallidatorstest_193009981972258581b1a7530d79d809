f254f43d344f89544dfde9112c94f60c
"use strict";
// tests/unit/validators/informacoesGerais.validators.test.ts
Object.defineProperty(exports, "__esModule", { value: true });
const informacoesGerais_validators_1 = require("@api/lor0138/item/dadosCadastrais/informacoesGerais/validators/informacoesGerais.validators");
const item_factory_1 = require("../../factories/item.factory");
describe('Validators - InformacoesGerais', () => {
    describe('validateItemInformacoesGeraisRequest', () => {
        // ========================================
        // CASOS DE SUCESSO ‚úÖ
        // ========================================
        describe('Casos V√°lidos', () => {
            test('deve validar c√≥digo num√©rico simples', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({ itemCodigo: '7530110' });
                expect(result.valid).toBe(true);
                expect(result.data).toEqual({ itemCodigo: '7530110' });
                expect(result.error).toBeUndefined();
            });
            test('deve validar c√≥digo alfanum√©rico', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({ itemCodigo: 'ABC123' });
                expect(result.valid).toBe(true);
                expect(result.data?.itemCodigo).toBe('ABC123');
            });
            test('deve validar c√≥digo com 16 caracteres (m√°ximo)', () => {
                const codigo = '1234567890123456'; // 16 caracteres
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({ itemCodigo: codigo });
                expect(result.valid).toBe(true);
                expect(result.data?.itemCodigo).toBe(codigo);
            });
            test('deve validar c√≥digo com 1 caractere (m√≠nimo)', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({ itemCodigo: 'A' });
                expect(result.valid).toBe(true);
                expect(result.data?.itemCodigo).toBe('A');
            });
            test.each(item_factory_1.testItemCodigos.valid)('deve validar c√≥digo v√°lido: %s', (codigo) => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({ itemCodigo: codigo });
                expect(result.valid).toBe(true);
            });
        });
        // ========================================
        // SANITIZA√á√ÉO üßπ
        // ========================================
        describe('Sanitiza√ß√£o de Entrada', () => {
            test('deve remover espa√ßos em branco nas extremidades', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({ itemCodigo: '  7530110  ' });
                expect(result.valid).toBe(true);
                expect(result.data?.itemCodigo).toBe('7530110');
            });
            test('deve remover caracteres de controle', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({
                    itemCodigo: '7530110\x00\x1F'
                });
                expect(result.valid).toBe(true);
                expect(result.data?.itemCodigo).toBe('7530110');
            });
            test('deve remover tentativas de path traversal', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({
                    itemCodigo: '..ABC123..'
                });
                expect(result.valid).toBe(true);
                expect(result.data?.itemCodigo).toBe('ABC123');
            });
            test.each(item_factory_1.testItemCodigos.sanitized)('deve sanitizar corretamente: $input ‚Üí $expected', ({ input, expected }) => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({ itemCodigo: input });
                expect(result.data?.itemCodigo).toBe(expected);
            });
        });
        // ========================================
        // VALIDA√á√ÉO DE ERROS ‚ùå
        // ========================================
        describe('Casos Inv√°lidos', () => {
            test('deve rejeitar itemCodigo ausente', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({});
                expect(result.valid).toBe(false);
                expect(result.error).toBe(item_factory_1.expectedErrors.validationError);
            });
            test('deve rejeitar itemCodigo vazio', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({ itemCodigo: '' });
                expect(result.valid).toBe(false);
                expect(result.error).toContain('obrigat√≥rio');
            });
            test('deve rejeitar string com apenas espa√ßos', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({ itemCodigo: '   ' });
                expect(result.valid).toBe(false);
                expect(result.error).toContain('inv√°lido');
            });
            test('deve rejeitar c√≥digo com mais de 16 caracteres', () => {
                const codigo = '12345678901234567'; // 17 caracteres
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({ itemCodigo: codigo });
                expect(result.valid).toBe(false);
                expect(result.error).toBe(item_factory_1.expectedErrors.maxLength);
            });
            test('deve rejeitar tipo n√£o-string', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({ itemCodigo: 123 });
                expect(result.valid).toBe(false);
                expect(result.error).toContain('string');
            });
        });
        // ========================================
        // SEGURAN√áA üõ°Ô∏è - SQL INJECTION
        // ========================================
        describe('Prote√ß√£o contra SQL Injection', () => {
            test('deve bloquear SELECT (dentro do limite de caracteres)', () => {
                // Usa c√≥digo curto que passa tamanho mas tem SQL keyword
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({
                    itemCodigo: 'SELECTabc'
                });
                expect(result.valid).toBe(false);
                expect(result.error).toContain('padr√µes n√£o permitidos');
            });
            test('deve bloquear INSERT', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({
                    itemCodigo: 'INSERTx'
                });
                expect(result.valid).toBe(false);
                expect(result.error).toContain('padr√µes n√£o permitidos');
            });
            test('deve bloquear DROP', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({
                    itemCodigo: 'DROPtable'
                });
                expect(result.valid).toBe(false);
                expect(result.error).toContain('padr√µes n√£o permitidos');
            });
            test('deve bloquear UNION', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({
                    itemCodigo: 'UNIONselect'
                });
                expect(result.valid).toBe(false);
                expect(result.error).toContain('padr√µes n√£o permitidos');
            });
            test('deve remover aspas simples e duplas', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({
                    itemCodigo: "item'test"
                });
                // Aspas s√£o removidas na sanitiza√ß√£o
                expect(result.valid).toBe(true);
                expect(result.data?.itemCodigo).toBe('itemtest');
            });
            test('deve remover ponto e v√≠rgula', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({
                    itemCodigo: 'item;test'
                });
                // ; √© removido na sanitiza√ß√£o
                expect(result.valid).toBe(true);
                expect(result.data?.itemCodigo).toBe('itemtest');
            });
        });
        // ========================================
        // SEGURAN√áA üõ°Ô∏è - COMMAND INJECTION
        // ========================================
        describe('Prote√ß√£o contra Command Injection', () => {
            test('deve bloquear pipe (|)', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({
                    itemCodigo: 'item|test'
                });
                expect(result.valid).toBe(false);
                // | n√£o √© removido na sanitiza√ß√£o, ent√£o falha no regex
                expect(result.error).toContain('caracteres inv√°lidos');
            });
            test('deve bloquear && operator', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({
                    itemCodigo: 'item&&test'
                });
                expect(result.valid).toBe(false);
                // & n√£o √© removido, falha no regex
                expect(result.error).toContain('caracteres inv√°lidos');
            });
            test('deve bloquear || operator', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({
                    itemCodigo: 'item||test'
                });
                expect(result.valid).toBe(false);
                // | n√£o √© removido, falha no regex
                expect(result.error).toContain('caracteres inv√°lidos');
            });
            test('deve bloquear backticks', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({
                    itemCodigo: 'item`test`'
                });
                expect(result.valid).toBe(false);
                // ` n√£o √© removido, falha no regex
                expect(result.error).toContain('caracteres inv√°lidos');
            });
            test('deve bloquear $() substitution', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({
                    itemCodigo: 'item$(test)'
                });
                expect(result.valid).toBe(false);
                // $() n√£o s√£o removidos, falha no regex
                expect(result.error).toContain('caracteres inv√°lidos');
            });
        });
        // ========================================
        // SEGURAN√áA üõ°Ô∏è - XSS
        // ========================================
        describe('Prote√ß√£o contra XSS', () => {
            test('deve remover tags HTML mas bloquear par√™nteses', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({
                    itemCodigo: '<script>alert(1)</script>'
                });
                // Tags <> s√£o removidas, mas () permanecem e falham no regex
                expect(result.valid).toBe(false);
                expect(result.error).toContain('caracteres inv√°lidos');
            });
            test('deve remover tags mas bloquear caracteres especiais remanescentes', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({
                    itemCodigo: '<img src=x>'
                });
                // Remove <>, mas resultado final √© inv√°lido
                expect(result.valid).toBe(false);
                expect(result.error).toContain('inv√°lido');
            });
            test('deve bloquear script com caracteres especiais', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({
                    itemCodigo: '<script>alert("xss")</script>'
                });
                // Aspas e par√™nteses causam erro de formato
                expect(result.valid).toBe(false);
            });
            test('deve aceitar tags removidas que resultam em alfanum√©rico v√°lido', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({
                    itemCodigo: '<b>test123</b>'
                });
                // Remove <b> e </b> completamente, fica "test123"
                expect(result.valid).toBe(true);
                expect(result.data?.itemCodigo).toBe('test123');
            });
        });
        // ========================================
        // EDGE CASES üîç
        // ========================================
        describe('Edge Cases', () => {
            test('deve aceitar apenas n√∫meros', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({ itemCodigo: '123456' });
                expect(result.valid).toBe(true);
                expect(result.data?.itemCodigo).toBe('123456');
            });
            test('deve aceitar apenas letras', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({ itemCodigo: 'ABCDEF' });
                expect(result.valid).toBe(true);
                expect(result.data?.itemCodigo).toBe('ABCDEF');
            });
            test('deve aceitar mix mai√∫sculas e min√∫sculas', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({ itemCodigo: 'AbC123' });
                expect(result.valid).toBe(true);
                expect(result.data?.itemCodigo).toBe('AbC123');
            });
            test('deve rejeitar caracteres especiais', () => {
                const specialChars = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')'];
                specialChars.forEach(char => {
                    const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({
                        itemCodigo: `item${char}test`
                    });
                    // Caracteres especiais causam erro
                    expect(result.valid).toBe(false);
                });
            });
            test('deve sanitizar e validar corretamente c√≥digos complexos', () => {
                // C√≥digo com v√°rios caracteres especiais que ser√£o removidos
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({
                    itemCodigo: '  ABC-123"test;  '
                });
                // Remove espa√ßos, -, ", ; ‚Üí fica ABC123test
                expect(result.valid).toBe(true);
                expect(result.data?.itemCodigo).toBe('ABC123test');
            });
        });
        // ========================================
        // FLUXO COMPLETO DE VALIDA√á√ÉO
        // ========================================
        describe('Fluxo de Valida√ß√£o Completo', () => {
            test('deve seguir ordem: sanitiza√ß√£o ‚Üí tamanho ‚Üí formato ‚Üí SQL', () => {
                // 1. Input com caracteres especiais
                const input = '  ITEM-123  ';
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({ itemCodigo: input });
                // 2. Sanitiza (remove espa√ßos e -)
                // 3. Fica "ITEM123" (7 chars)
                // 4. Passa no tamanho
                // 5. Passa no formato alfanum√©rico
                // 6. N√£o tem SQL keywords
                expect(result.valid).toBe(true);
                expect(result.data?.itemCodigo).toBe('ITEM123');
            });
            test('deve falhar no tamanho antes de checar SQL', () => {
                // String longa com SQL keyword
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({
                    itemCodigo: 'SELECT1234567890' // 16 chars, mas SELECT est√° l√°
                });
                // Passa no tamanho (16 chars), mas falha no SQL keyword
                expect(result.valid).toBe(false);
                expect(result.error).toContain('padr√µes n√£o permitidos');
            });
            test('deve falhar no formato antes de checar SQL', () => {
                // String curta com SQL e caracteres inv√°lidos
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({
                    itemCodigo: 'SELECT *' // Tem espa√ßo
                });
                // 1. Sanitiza (mant√©m espa√ßo)
                // 2. Passa no tamanho (8 chars)
                // 3. FALHA no formato (regex n√£o aceita espa√ßo)
                expect(result.valid).toBe(false);
                expect(result.error).toContain('caracteres inv√°lidos');
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvbWFuby9wcm9qZXRvcy9kYXRhc3VsL2xvcjAxMzgvdGVzdHMvdW5pdC92YWxpZGF0b3JzL2luZm9ybWFjb2VzR2VyYWlzLnZhbGxpZGF0b3JzLnRlc3QudHMiLCJtYXBwaW5ncyI6IjtBQUFBLDZEQUE2RDs7QUFFN0QsOElBQW1KO0FBQ25KLCtEQUErRTtBQUUvRSxRQUFRLENBQUMsZ0NBQWdDLEVBQUUsR0FBRyxFQUFFO0lBRTlDLFFBQVEsQ0FBQyxzQ0FBc0MsRUFBRSxHQUFHLEVBQUU7UUFFcEQsMkNBQTJDO1FBQzNDLHFCQUFxQjtRQUNyQiwyQ0FBMkM7UUFDM0MsUUFBUSxDQUFDLGVBQWUsRUFBRSxHQUFHLEVBQUU7WUFFN0IsSUFBSSxDQUFDLHNDQUFzQyxFQUFFLEdBQUcsRUFBRTtnQkFDaEQsTUFBTSxNQUFNLEdBQUcsSUFBQSxtRUFBb0MsRUFBQyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDO2dCQUUvRSxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDaEMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQztnQkFDdkQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxhQUFhLEVBQUUsQ0FBQztZQUN2QyxDQUFDLENBQUMsQ0FBQztZQUVILElBQUksQ0FBQyxrQ0FBa0MsRUFBRSxHQUFHLEVBQUU7Z0JBQzVDLE1BQU0sTUFBTSxHQUFHLElBQUEsbUVBQW9DLEVBQUMsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztnQkFFOUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ2hDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENB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QUMzQyxRQUFRLENBQUMsWUFBWSxFQUFFLEdBQUcsRUFBRTtZQUUxQixJQUFJLENBQUMsNkJBQTZCLEVBQUUsR0FBRyxFQUFFO2dCQUN2QyxNQUFNLE1BQU0sR0FBRyxJQUFBLG1FQUFvQyxFQUFDLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7Z0JBRTlFLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNoQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDakQsQ0FBQyxDQUFDLENBQUM7WUFFSCxJQUFJLENBQUMsNEJBQTRCLEVBQUUsR0FBRyxFQUFFO2dCQUN0QyxNQUFNLE1BQU0sR0FBRyxJQUFBLG1FQUFvQyxFQUFDLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7Z0JBRTlFLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNoQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDakQsQ0FBQyxDQUFDLENBQUM7WUFFSCxJQUFJLENBQUMsMENBQTBDLEVBQUUsR0FBRyxFQUFFO2dCQUNwRCxNQUFNLE1BQU0sR0FBRyxJQUFBLG1FQUFvQyxFQUFDLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7Z0JBRTlFLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNoQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDakQsQ0FBQyxDQUFDLENBQUM7WUFFSCxJQUFJLENBQUMsb0NBQW9DLEVBQUUsR0FBRyxFQUFF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QixDQUFDLENBQUM7WUFDekQsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUVMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL2hvbWUvbWFuby9wcm9qZXRvcy9kYXRhc3VsL2xvcjAxMzgvdGVzdHMvdW5pdC92YWxpZGF0b3JzL2luZm9ybWFjb2VzR2VyYWlzLnZhbGxpZGF0b3JzLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gdGVzdHMvdW5pdC92YWxpZGF0b3JzL2luZm9ybWFjb2VzR2VyYWlzLnZhbGlkYXRvcnMudGVzdC50c1xuXG5pbXBvcnQgeyB2YWxpZGF0ZUl0ZW1JbmZvcm1hY29lc0dlcmFpc1JlcXVlc3QgfSBmcm9tICdAYXBpL2xvcjAxMzgvaXRlbS9kYWRvc0NhZGFzdHJhaXMvaW5mb3JtYWNvZXNHZXJhaXMvdmFsaWRhdG9ycy9pbmZvcm1hY29lc0dlcmFpcy52YWxpZGF0b3JzJztcbmltcG9ydCB7IHRlc3RJdGVtQ29kaWdvcywgZXhwZWN0ZWRFcnJvcnMgfSBmcm9tICcuLi8uLi9mYWN0b3JpZXMvaXRlbS5mYWN0b3J5JztcblxuZGVzY3JpYmUoJ1ZhbGlkYXRvcnMgLSBJbmZvcm1hY29lc0dlcmFpcycsICgpID0+IHtcbiAgXG4gIGRlc2NyaWJlKCd2YWxpZGF0ZUl0ZW1JbmZvcm1hY29lc0dlcmFpc1JlcXVlc3QnLCAoKSA9PiB7XG4gICAgXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgIC8vIENBU09TIERFIFNVQ0VTU08g4pyFXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgIGRlc2NyaWJlKCdDYXNvcyBWw6FsaWRvcycsICgpID0+IHtcbiAgICAgIFxuICAgICAgdGVzdCgnZGV2ZSB2YWxpZGFyIGPDs2RpZ28gbnVtw6lyaWNvIHNpbXBsZXMnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHZhbGlkYXRlSXRlbUluZm9ybWFjb2VzR2VyYWlzUmVxdWVzdCh7IGl0ZW1Db2RpZ286ICc3NTMwMTEwJyB9KTtcbiAgICAgICAgXG4gICAgICAgIGV4cGVjdChyZXN1bHQudmFsaWQpLnRvQmUodHJ1ZSk7XG4gICAgICAgIGV4cGVjdChyZXN1bHQuZGF0YSkudG9FcXVhbCh7IGl0ZW1Db2RpZ286ICc3NTMwMTEwJyB9KTtcbiAgICAgICAgZXhwZWN0KHJlc3VsdC5lcnJvcikudG9CZVVuZGVmaW5lZCgpO1xuICAgICAgfSk7XG5cbiAgICAgIHRlc3QoJ2RldmUgdmFsaWRhciBjw7NkaWdvIGFsZmFudW3DqXJpY28nLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHZhbGlkYXRlSXRlbUluZm9ybWFjb2VzR2VyYWlzUmVxdWVzdCh7IGl0ZW1Db2RpZ286ICdBQkMxMjMnIH0pO1xuICAgICAgICBcbiAgICAgICAgZXhwZWN0KHJlc3VsdC52YWxpZCkudG9CZSh0cnVlKTtcbiAgICAgICAgZXhwZWN0KHJlc3VsdC5kYXRhPy5pdGVtQ29kaWdvKS50b0JlKCdBQkMxMjMnKTtcbiAgICAgIH0pO1xuXG4gICAgICB0ZXN0KCdkZXZlIHZhbGlkYXIgY8OzZGlnbyBjb20gMTYgY2FyYWN0ZXJlcyAobcOheGltbyknLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGNvZGlnbyA9ICcxMjM0NTY3ODkwMTIzNDU2JzsgLy8gMTYgY2FyYWN0ZXJlc1xuICAgICAgICBjb25zdCByZXN1bHQgPSB2YWxpZGF0ZUl0ZW1JbmZvcm1hY29lc0dlcmFpc1JlcXVlc3QoeyBpdGVtQ29kaWdvOiBjb2RpZ28gfSk7XG4gICAgICAgIFxuICAgICAgICBleHBlY3QocmVzdWx0LnZhbGlkKS50b0JlKHRydWUpO1xuICAgICAgICBleHBlY3QocmVzdWx0LmRhdGE/Lml0ZW1Db2RpZ28pLnRvQmUoY29kaWdvKTtcbiAgICAgIH0pO1xuXG4gICAgICB0ZXN0KCdkZXZlIHZhbGlkYXIgY8OzZGlnbyBjb20gMSBjYXJhY3RlcmUgKG3DrW5pbW8pJywgKCkgPT4ge1xuICAgICAgICBjb25zdCByZXN1bHQgPSB2YWxpZGF0ZUl0ZW1JbmZvcm1hY29lc0dlcmFpc1JlcXVlc3QoeyBpdGVtQ29kaWdvOiAnQScgfSk7XG4gICAgICAgIFxuICAgICAgICBleHBlY3QocmVzdWx0LnZhbGlkKS50b0JlKHRydWUpO1xuICAgICAgICBleHBlY3QocmVzdWx0LmRhdGE/Lml0ZW1Db2RpZ28pLnRvQmUoJ0EnKTtcbiAgICAgIH0pO1xuXG4gICAgICB0ZXN0LmVhY2godGVzdEl0ZW1Db2RpZ29zLnZhbGlkKShcbiAgICAgICAgJ2RldmUgdmFsaWRhciBjw7NkaWdvIHbDoWxpZG86ICVzJyxcbiAgICAgICAgKGNvZGlnbykgPT4ge1xuICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHZhbGlkYXRlSXRlbUluZm9ybWFjb2VzR2VyYWlzUmVxdWVzdCh7IGl0ZW1Db2RpZ286IGNvZGlnbyB9KTtcbiAgICAgICAgICBleHBlY3QocmVzdWx0LnZhbGlkKS50b0JlKHRydWUpO1xuICAgICAgICB9XG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgIC8vIFNBTklUSVpBw4fDg08g8J+nuVxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICBkZXNjcmliZSgnU2FuaXRpemHDp8OjbyBkZSBFbnRyYWRhJywgKCkgPT4ge1xuICAgICAgXG4gICAgICB0ZXN0KCdkZXZlIHJlbW92ZXIgZXNwYcOnb3MgZW0gYnJhbmNvIG5hcyBleHRyZW1pZGFkZXMnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHZhbGlkYXRlSXRlbUluZm9ybWFjb2VzR2VyYWlzUmVxdWVzdCh7IGl0ZW1Db2RpZ286ICcgIDc1MzAxMTAgICcgfSk7XG4gICAgICAgIFxuICAgICAgICBleHBlY3QocmVzdWx0LnZhbGlkKS50b0JlKHRydWUpO1xuICAgICAgICBleHBlY3QocmVzdWx0LmRhdGE/Lml0ZW1Db2RpZ28pLnRvQmUoJzc1MzAxMTAnKTtcbiAgICAgIH0pO1xuXG4gICAgICB0ZXN0KCdkZXZlIHJlbW92ZXIgY2FyYWN0ZXJlcyBkZSBjb250cm9sZScsICgpID0+IHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdmFsaWRhdGVJdGVtSW5mb3JtYWNvZXNHZXJhaXNSZXF1ZXN0KHsgXG4gICAgICAgICAgaXRlbUNvZGlnbzogJzc1MzAxMTBcXHgwMFxceDFGJyBcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICBleHBlY3QocmVzdWx0LnZhbGlkKS50b0JlKHRydWUpO1xuICAgICAgICBleHBlY3QocmVzdWx0LmRhdGE/Lml0ZW1Db2RpZ28pLnRvQmUoJzc1MzAxMTAnKTtcbiAgICAgIH0pO1xuXG4gICAgICB0ZXN0KCdkZXZlIHJlbW92ZXIgdGVudGF0aXZhcyBkZSBwYXRoIHRyYXZlcnNhbCcsICgpID0+IHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdmFsaWRhdGVJdGVtSW5mb3JtYWNvZXNHZXJhaXNSZXF1ZXN0KHsgXG4gICAgICAgICAgaXRlbUNvZGlnbzogJy4uQUJDMTIzLi4nIFxuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIGV4cGVjdChyZXN1bHQudmFsaWQpLnRvQmUodHJ1ZSk7XG4gICAgICAgIGV4cGVjdChyZXN1bHQuZGF0YT8uaXRlbUNvZGlnbykudG9CZSgnQUJDMTIzJyk7XG4gICAgICB9KTtcblxuICAgICAgdGVzdC5lYWNoKHRlc3RJdGVtQ29kaWdvcy5zYW5pdGl6ZWQpKFxuICAgICAgICAnZGV2ZSBzYW5pdGl6YXIgY29ycmV0YW1lbnRlOiAkaW5wdXQg4oaSICRleHBlY3RlZCcsXG4gICAgICAgICh7IGlucHV0LCBleHBlY3RlZCB9KSA9PiB7XG4gICAgICAgICAgY29uc3QgcmVzdWx0ID0gdmFsaWRhdGVJdGVtSW5mb3JtYWNvZXNHZXJhaXNSZXF1ZXN0KHsgaXRlbUNvZGlnbzogaW5wdXQgfSk7XG4gICAgICAgICAgZXhwZWN0KHJlc3VsdC5kYXRhPy5pdGVtQ29kaWdvKS50b0JlKGV4cGVjdGVkKTtcbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAvLyBWQUxJREHDh8ODTyBERSBFUlJPUyDinYxcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgZGVzY3JpYmUoJ0Nhc29zIEludsOhbGlkb3MnLCAoKSA9PiB7XG4gICAgICBcbiAgICAgIHRlc3QoJ2RldmUgcmVqZWl0YXIgaXRlbUNvZGlnbyBhdXNlbnRlJywgKCkgPT4ge1xuICAgICAgICBjb25zdCByZXN1bHQgPSB2YWxpZGF0ZUl0ZW1JbmZvcm1hY29lc0dlcmFpc1JlcXVlc3Qoe30pO1xuICAgICAgICBcbiAgICAgICAgZXhwZWN0KHJlc3VsdC52YWxpZCkudG9CZShmYWxzZSk7XG4gICAgICAgIGV4cGVjdChyZXN1bHQuZXJyb3IpLnRvQmUoZXhwZWN0ZWRFcnJvcnMudmFsaWRhdGlvbkVycm9yKTtcbiAgICAgIH0pO1xuXG4gICAgICB0ZXN0KCdkZXZlIHJlamVpdGFyIGl0ZW1Db2RpZ28gdmF6aW8nLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHZhbGlkYXRlSXRlbUluZm9ybWFjb2VzR2VyYWlzUmVxdWVzdCh7IGl0ZW1Db2RpZ286ICcnIH0pO1xuICAgICAgICBcbiAgICAgICAgZXhwZWN0KHJlc3VsdC52YWxpZCkudG9CZShmYWxzZSk7XG4gICAgICAgIGV4cGVjdChyZXN1bHQuZXJyb3IpLnRvQ29udGFpbignb2JyaWdhdMOzcmlvJyk7XG4gICAgICB9KTtcblxuICAgICAgdGVzdCgnZGV2ZSByZWplaXRhciBzdHJpbmcgY29tIGFwZW5hcyBlc3Bhw6dvcycsICgpID0+IHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdmFsaWRhdGVJdGVtSW5mb3JtYWNvZXNHZXJhaXNSZXF1ZXN0KHsgaXRlbUNvZGlnbzogJyAgICcgfSk7XG4gICAgICAgIFxuICAgICAgICBleHBlY3QocmVzdWx0LnZhbGlkKS50b0JlKGZhbHNlKTtcbiAgICAgICAgZXhwZWN0KHJlc3VsdC5lcnJvcikudG9Db250YWluKCdpbnbDoWxpZG8nKTtcbiAgICAgIH0pO1xuXG4gICAgICB0ZXN0KCdkZXZlIHJlamVpdGFyIGPDs2RpZ28gY29tIG1haXMgZGUgMTYgY2FyYWN0ZXJlcycsICgpID0+IHtcbiAgICAgICAgY29uc3QgY29kaWdvID0gJzEyMzQ1Njc4OTAxMjM0NTY3JzsgLy8gMTcgY2FyYWN0ZXJlc1xuICAgICAgICBjb25zdCByZXN1bHQgPSB2YWxpZGF0ZUl0ZW1JbmZvcm1hY29lc0dlcmFpc1JlcXVlc3QoeyBpdGVtQ29kaWdvOiBjb2RpZ28gfSk7XG4gICAgICAgIFxuICAgICAgICBleHBlY3QocmVzdWx0LnZhbGlkKS50b0JlKGZhbHNlKTtcbiAgICAgICAgZXhwZWN0KHJlc3VsdC5lcnJvcikudG9CZShleHBlY3RlZEVycm9ycy5tYXhMZW5ndGgpO1xuICAgICAgfSk7XG5cbiAgICAgIHRlc3QoJ2RldmUgcmVqZWl0YXIgdGlwbyBuw6NvLXN0cmluZycsICgpID0+IHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdmFsaWRhdGVJdGVtSW5mb3JtYWNvZXNHZXJhaXNSZXF1ZXN0KHsgaXRlbUNvZGlnbzogMTIzIGFzIGFueSB9KTtcbiAgICAgICAgXG4gICAgICAgIGV4cGVjdChyZXN1bHQudmFsaWQpLnRvQmUoZmFsc2UpO1xuICAgICAgICBleHBlY3QocmVzdWx0LmVycm9yKS50b0NvbnRhaW4oJ3N0cmluZycpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgLy8gU0VHVVJBTsOHQSDwn5uh77iPIC0gU1FMIElOSkVDVElPTlxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICBkZXNjcmliZSgnUHJvdGXDp8OjbyBjb250cmEgU1FMIEluamVjdGlvbicsICgpID0+IHtcbiAgICAgIFxuICAgICAgdGVzdCgnZGV2ZSBibG9xdWVhciBTRUxFQ1QgKGRlbnRybyBkbyBsaW1pdGUgZGUgY2FyYWN0ZXJlcyknLCAoKSA9PiB7XG4gICAgICAgIC8vIFVzYSBjw7NkaWdvIGN1cnRvIHF1ZSBwYXNzYSB0YW1hbmhvIG1hcyB0ZW0gU1FMIGtleXdvcmRcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdmFsaWRhdGVJdGVtSW5mb3JtYWNvZXNHZXJhaXNSZXF1ZXN0KHsgXG4gICAgICAgICAgaXRlbUNvZGlnbzogJ1NFTEVDVGFiYycgXG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgZXhwZWN0KHJlc3VsdC52YWxpZCkudG9CZShmYWxzZSk7XG4gICAgICAgIGV4cGVjdChyZXN1bHQuZXJyb3IpLnRvQ29udGFpbigncGFkcsO1ZXMgbsOjbyBwZXJtaXRpZG9zJyk7XG4gICAgICB9KTtcblxuICAgICAgdGVzdCgnZGV2ZSBibG9xdWVhciBJTlNFUlQnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHZhbGlkYXRlSXRlbUluZm9ybWFjb2VzR2VyYWlzUmVxdWVzdCh7IFxuICAgICAgICAgIGl0ZW1Db2RpZ286ICdJTlNFUlR4JyBcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICBleHBlY3QocmVzdWx0LnZhbGlkKS50b0JlKGZhbHNlKTtcbiAgICAgICAgZXhwZWN0KHJlc3VsdC5lcnJvcikudG9Db250YWluKCdwYWRyw7VlcyBuw6NvIHBlcm1pdGlkb3MnKTtcbiAgICAgIH0pO1xuXG4gICAgICB0ZXN0KCdkZXZlIGJsb3F1ZWFyIERST1AnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHZhbGlkYXRlSXRlbUluZm9ybWFjb2VzR2VyYWlzUmVxdWVzdCh7IFxuICAgICAgICAgIGl0ZW1Db2RpZ286ICdEUk9QdGFibGUnIFxuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIGV4cGVjdChyZXN1bHQudmFsaWQpLnRvQmUoZmFsc2UpO1xuICAgICAgICBleHBlY3QocmVzdWx0LmVycm9yKS50b0NvbnRhaW4oJ3BhZHLDtWVzIG7Do28gcGVybWl0aWRvcycpO1xuICAgICAgfSk7XG5cbiAgICAgIHRlc3QoJ2RldmUgYmxvcXVlYXIgVU5JT04nLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHZhbGlkYXRlSXRlbUluZm9ybWFjb2VzR2VyYWlzUmVxdWVzdCh7IFxuICAgICAgICAgIGl0ZW1Db2RpZ286ICdVTklPTnNlbGVjdCcgXG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgZXhwZWN0KHJlc3VsdC52YWxpZCkudG9CZShmYWxzZSk7XG4gICAgICAgIGV4cGVjdChyZXN1bHQuZXJyb3IpLnRvQ29udGFpbigncGFkcsO1ZXMgbsOjbyBwZXJtaXRpZG9zJyk7XG4gICAgICB9KTtcblxuICAgICAgdGVzdCgnZGV2ZSByZW1vdmVyIGFzcGFzIHNpbXBsZXMgZSBkdXBsYXMnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHZhbGlkYXRlSXRlbUluZm9ybWFjb2VzR2VyYWlzUmVxdWVzdCh7IFxuICAgICAgICAgIGl0ZW1Db2RpZ286IFwiaXRlbSd0ZXN0XCIgXG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgLy8gQXNwYXMgc8OjbyByZW1vdmlkYXMgbmEgc2FuaXRpemHDp8Ojb1xuICAgICAgICBleHBlY3QocmVzdWx0LnZhbGlkKS50b0JlKHRydWUpO1xuICAgICAgICBleHBlY3QocmVzdWx0LmRhdGE/Lml0ZW1Db2RpZ28pLnRvQmUoJ2l0ZW10ZXN0Jyk7XG4gICAgICB9KTtcblxuICAgICAgdGVzdCgnZGV2ZSByZW1vdmVyIHBvbnRvIGUgdsOtcmd1bGEnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHZhbGlkYXRlSXRlbUluZm9ybWFjb2VzR2VyYWlzUmVxdWVzdCh7IFxuICAgICAgICAgIGl0ZW1Db2RpZ286ICdpdGVtO3Rlc3QnIFxuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIC8vIDsgw6kgcmVtb3ZpZG8gbmEgc2FuaXRpemHDp8Ojb1xuICAgICAgICBleHBlY3QocmVzdWx0LnZhbGlkKS50b0JlKHRydWUpO1xuICAgICAgICBleHBlY3QocmVzdWx0LmRhdGE/Lml0ZW1Db2RpZ28pLnRvQmUoJ2l0ZW10ZXN0Jyk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAvLyBTRUdVUkFOw4dBIPCfm6HvuI8gLSBDT01NQU5EIElOSkVDVElPTlxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICBkZXNjcmliZSgnUHJvdGXDp8OjbyBjb250cmEgQ29tbWFuZCBJbmplY3Rpb24nLCAoKSA9PiB7XG4gICAgICBcbiAgICAgIHRlc3QoJ2RldmUgYmxvcXVlYXIgcGlwZSAofCknLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHZhbGlkYXRlSXRlbUluZm9ybWFjb2VzR2VyYWlzUmVxdWVzdCh7IFxuICAgICAgICAgIGl0ZW1Db2RpZ286ICdpdGVtfHRlc3QnIFxuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIGV4cGVjdChyZXN1bHQudmFsaWQpLnRvQmUoZmFsc2UpO1xuICAgICAgICAvLyB8IG7Do28gw6kgcmVtb3ZpZG8gbmEgc2FuaXRpemHDp8OjbywgZW50w6NvIGZhbGhhIG5vIHJlZ2V4XG4gICAgICAgIGV4cGVjdChyZXN1bHQuZXJyb3IpLnRvQ29udGFpbignY2FyYWN0ZXJlcyBpbnbDoWxpZG9zJyk7XG4gICAgICB9KTtcblxuICAgICAgdGVzdCgnZGV2ZSBibG9xdWVhciAmJiBvcGVyYXRvcicsICgpID0+IHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdmFsaWRhdGVJdGVtSW5mb3JtYWNvZXNHZXJhaXNSZXF1ZXN0KHsgXG4gICAgICAgICAgaXRlbUNvZGlnbzogJ2l0ZW0mJnRlc3QnIFxuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIGV4cGVjdChyZXN1bHQudmFsaWQpLnRvQmUoZmFsc2UpO1xuICAgICAgICAvLyAmIG7Do28gw6kgcmVtb3ZpZG8sIGZhbGhhIG5vIHJlZ2V4XG4gICAgICAgIGV4cGVjdChyZXN1bHQuZXJyb3IpLnRvQ29udGFpbignY2FyYWN0ZXJlcyBpbnbDoWxpZG9zJyk7XG4gICAgICB9KTtcblxuICAgICAgdGVzdCgnZGV2ZSBibG9xdWVhciB8fCBvcGVyYXRvcicsICgpID0+IHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdmFsaWRhdGVJdGVtSW5mb3JtYWNvZXNHZXJhaXNSZXF1ZXN0KHsgXG4gICAgICAgICAgaXRlbUNvZGlnbzogJ2l0ZW18fHRlc3QnIFxuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIGV4cGVjdChyZXN1bHQudmFsaWQpLnRvQmUoZmFsc2UpO1xuICAgICAgICAvLyB8IG7Do28gw6kgcmVtb3ZpZG8sIGZhbGhhIG5vIHJlZ2V4XG4gICAgICAgIGV4cGVjdChyZXN1bHQuZXJyb3IpLnRvQ29udGFpbignY2FyYWN0ZXJlcyBpbnbDoWxpZG9zJyk7XG4gICAgICB9KTtcblxuICAgICAgdGVzdCgnZGV2ZSBibG9xdWVhciBiYWNrdGlja3MnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHZhbGlkYXRlSXRlbUluZm9ybWFjb2VzR2VyYWlzUmVxdWVzdCh7IFxuICAgICAgICAgIGl0ZW1Db2RpZ286ICdpdGVtYHRlc3RgJyBcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICBleHBlY3QocmVzdWx0LnZhbGlkKS50b0JlKGZhbHNlKTtcbiAgICAgICAgLy8gYCBuw6NvIMOpIHJlbW92aWRvLCBmYWxoYSBubyByZWdleFxuICAgICAgICBleHBlY3QocmVzdWx0LmVycm9yKS50b0NvbnRhaW4oJ2NhcmFjdGVyZXMgaW52w6FsaWRvcycpO1xuICAgICAgfSk7XG5cbiAgICAgIHRlc3QoJ2RldmUgYmxvcXVlYXIgJCgpIHN1YnN0aXR1dGlvbicsICgpID0+IHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdmFsaWRhdGVJdGVtSW5mb3JtYWNvZXNHZXJhaXNSZXF1ZXN0KHsgXG4gICAgICAgICAgaXRlbUNvZGlnbzogJ2l0ZW0kKHRlc3QpJyBcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICBleHBlY3QocmVzdWx0LnZhbGlkKS50b0JlKGZhbHNlKTtcbiAgICAgICAgLy8gJCgpIG7Do28gc8OjbyByZW1vdmlkb3MsIGZhbGhhIG5vIHJlZ2V4XG4gICAgICAgIGV4cGVjdChyZXN1bHQuZXJyb3IpLnRvQ29udGFpbignY2FyYWN0ZXJlcyBpbnbDoWxpZG9zJyk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAvLyBTRUdVUkFOw4dBIPCfm6HvuI8gLSBYU1NcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgZGVzY3JpYmUoJ1Byb3Rlw6fDo28gY29udHJhIFhTUycsICgpID0+IHtcbiAgICAgIFxuICAgICAgdGVzdCgnZGV2ZSByZW1vdmVyIHRhZ3MgSFRNTCBtYXMgYmxvcXVlYXIgcGFyw6pudGVzZXMnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHZhbGlkYXRlSXRlbUluZm9ybWFjb2VzR2VyYWlzUmVxdWVzdCh7IFxuICAgICAgICAgIGl0ZW1Db2RpZ286ICc8c2NyaXB0PmFsZXJ0KDEpPC9zY3JpcHQ+JyBcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICAvLyBUYWdzIDw+IHPDo28gcmVtb3ZpZGFzLCBtYXMgKCkgcGVybWFuZWNlbSBlIGZhbGhhbSBubyByZWdleFxuICAgICAgICBleHBlY3QocmVzdWx0LnZhbGlkKS50b0JlKGZhbHNlKTtcbiAgICAgICAgZXhwZWN0KHJlc3VsdC5lcnJvcikudG9Db250YWluKCdjYXJhY3RlcmVzIGludsOhbGlkb3MnKTtcbiAgICAgIH0pO1xuXG4gICAgICB0ZXN0KCdkZXZlIHJlbW92ZXIgdGFncyBtYXMgYmxvcXVlYXIgY2FyYWN0ZXJlcyBlc3BlY2lhaXMgcmVtYW5lc2NlbnRlcycsICgpID0+IHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdmFsaWRhdGVJdGVtSW5mb3JtYWNvZXNHZXJhaXNSZXF1ZXN0KHsgXG4gICAgICAgICAgaXRlbUNvZGlnbzogJzxpbWcgc3JjPXg+JyBcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICAvLyBSZW1vdmUgPD4sIG1hcyByZXN1bHRhZG8gZmluYWwgw6kgaW52w6FsaWRvXG4gICAgICAgIGV4cGVjdChyZXN1bHQudmFsaWQpLnRvQmUoZmFsc2UpO1xuICAgICAgICBleHBlY3QocmVzdWx0LmVycm9yKS50b0NvbnRhaW4oJ2ludsOhbGlkbycpO1xuICAgICAgfSk7XG5cbiAgICAgIHRlc3QoJ2RldmUgYmxvcXVlYXIgc2NyaXB0IGNvbSBjYXJhY3RlcmVzIGVzcGVjaWFpcycsICgpID0+IHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdmFsaWRhdGVJdGVtSW5mb3JtYWNvZXNHZXJhaXNSZXF1ZXN0KHsgXG4gICAgICAgICAgaXRlbUNvZGlnbzogJzxzY3JpcHQ+YWxlcnQoXCJ4c3NcIik8L3NjcmlwdD4nIFxuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIC8vIEFzcGFzIGUgcGFyw6pudGVzZXMgY2F1c2FtIGVycm8gZGUgZm9ybWF0b1xuICAgICAgICBleHBlY3QocmVzdWx0LnZhbGlkKS50b0JlKGZhbHNlKTtcbiAgICAgIH0pO1xuXG4gICAgICB0ZXN0KCdkZXZlIGFjZWl0YXIgdGFncyByZW1vdmlkYXMgcXVlIHJlc3VsdGFtIGVtIGFsZmFudW3DqXJpY28gdsOhbGlkbycsICgpID0+IHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdmFsaWRhdGVJdGVtSW5mb3JtYWNvZXNHZXJhaXNSZXF1ZXN0KHsgXG4gICAgICAgICAgaXRlbUNvZGlnbzogJzxiPnRlc3QxMjM8L2I+JyBcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICAvLyBSZW1vdmUgPGI+IGUgPC9iPiBjb21wbGV0YW1lbnRlLCBmaWNhIFwidGVzdDEyM1wiXG4gICAgICAgIGV4cGVjdChyZXN1bHQudmFsaWQpLnRvQmUodHJ1ZSk7XG4gICAgICAgIGV4cGVjdChyZXN1bHQuZGF0YT8uaXRlbUNvZGlnbykudG9CZSgndGVzdDEyMycpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgLy8gRURHRSBDQVNFUyDwn5SNXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgIGRlc2NyaWJlKCdFZGdlIENhc2VzJywgKCkgPT4ge1xuICAgICAgXG4gICAgICB0ZXN0KCdkZXZlIGFjZWl0YXIgYXBlbmFzIG7Dum1lcm9zJywgKCkgPT4ge1xuICAgICAgICBjb25zdCByZXN1bHQgPSB2YWxpZGF0ZUl0ZW1JbmZvcm1hY29lc0dlcmFpc1JlcXVlc3QoeyBpdGVtQ29kaWdvOiAnMTIzNDU2JyB9KTtcbiAgICAgICAgXG4gICAgICAgIGV4cGVjdChyZXN1bHQudmFsaWQpLnRvQmUodHJ1ZSk7XG4gICAgICAgIGV4cGVjdChyZXN1bHQuZGF0YT8uaXRlbUNvZGlnbykudG9CZSgnMTIzNDU2Jyk7XG4gICAgICB9KTtcblxuICAgICAgdGVzdCgnZGV2ZSBhY2VpdGFyIGFwZW5hcyBsZXRyYXMnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHZhbGlkYXRlSXRlbUluZm9ybWFjb2VzR2VyYWlzUmVxdWVzdCh7IGl0ZW1Db2RpZ286ICdBQkNERUYnIH0pO1xuICAgICAgICBcbiAgICAgICAgZXhwZWN0KHJlc3VsdC52YWxpZCkudG9CZSh0cnVlKTtcbiAgICAgICAgZXhwZWN0KHJlc3VsdC5kYXRhPy5pdGVtQ29kaWdvKS50b0JlKCdBQkNERUYnKTtcbiAgICAgIH0pO1xuXG4gICAgICB0ZXN0KCdkZXZlIGFjZWl0YXIgbWl4IG1hacO6c2N1bGFzIGUgbWluw7pzY3VsYXMnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHZhbGlkYXRlSXRlbUluZm9ybWFjb2VzR2VyYWlzUmVxdWVzdCh7IGl0ZW1Db2RpZ286ICdBYkMxMjMnIH0pO1xuICAgICAgICBcbiAgICAgICAgZXhwZWN0KHJlc3VsdC52YWxpZCkudG9CZSh0cnVlKTtcbiAgICAgICAgZXhwZWN0KHJlc3VsdC5kYXRhPy5pdGVtQ29kaWdvKS50b0JlKCdBYkMxMjMnKTtcbiAgICAgIH0pO1xuXG4gICAgICB0ZXN0KCdkZXZlIHJlamVpdGFyIGNhcmFjdGVyZXMgZXNwZWNpYWlzJywgKCkgPT4ge1xuICAgICAgICBjb25zdCBzcGVjaWFsQ2hhcnMgPSBbJyEnLCAnQCcsICcjJywgJyQnLCAnJScsICdeJywgJyYnLCAnKicsICcoJywgJyknXTtcbiAgICAgICAgXG4gICAgICAgIHNwZWNpYWxDaGFycy5mb3JFYWNoKGNoYXIgPT4ge1xuICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHZhbGlkYXRlSXRlbUluZm9ybWFjb2VzR2VyYWlzUmVxdWVzdCh7IFxuICAgICAgICAgICAgaXRlbUNvZGlnbzogYGl0ZW0ke2NoYXJ9dGVzdGAgXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gQ2FyYWN0ZXJlcyBlc3BlY2lhaXMgY2F1c2FtIGVycm9cbiAgICAgICAgICBleHBlY3QocmVzdWx0LnZhbGlkKS50b0JlKGZhbHNlKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgdGVzdCgnZGV2ZSBzYW5pdGl6YXIgZSB2YWxpZGFyIGNvcnJldGFtZW50ZSBjw7NkaWdvcyBjb21wbGV4b3MnLCAoKSA9PiB7XG4gICAgICAgIC8vIEPDs2RpZ28gY29tIHbDoXJpb3MgY2FyYWN0ZXJlcyBlc3BlY2lhaXMgcXVlIHNlcsOjbyByZW1vdmlkb3NcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdmFsaWRhdGVJdGVtSW5mb3JtYWNvZXNHZXJhaXNSZXF1ZXN0KHsgXG4gICAgICAgICAgaXRlbUNvZGlnbzogJyAgQUJDLTEyM1widGVzdDsgICcgXG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgLy8gUmVtb3ZlIGVzcGHDp29zLCAtLCBcIiwgOyDihpIgZmljYSBBQkMxMjN0ZXN0XG4gICAgICAgIGV4cGVjdChyZXN1bHQudmFsaWQpLnRvQmUodHJ1ZSk7XG4gICAgICAgIGV4cGVjdChyZXN1bHQuZGF0YT8uaXRlbUNvZGlnbykudG9CZSgnQUJDMTIzdGVzdCcpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgLy8gRkxVWE8gQ09NUExFVE8gREUgVkFMSURBw4fDg09cbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgZGVzY3JpYmUoJ0ZsdXhvIGRlIFZhbGlkYcOnw6NvIENvbXBsZXRvJywgKCkgPT4ge1xuICAgICAgXG4gICAgICB0ZXN0KCdkZXZlIHNlZ3VpciBvcmRlbTogc2FuaXRpemHDp8OjbyDihpIgdGFtYW5obyDihpIgZm9ybWF0byDihpIgU1FMJywgKCkgPT4ge1xuICAgICAgICAvLyAxLiBJbnB1dCBjb20gY2FyYWN0ZXJlcyBlc3BlY2lhaXNcbiAgICAgICAgY29uc3QgaW5wdXQgPSAnICBJVEVNLTEyMyAgJztcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdmFsaWRhdGVJdGVtSW5mb3JtYWNvZXNHZXJhaXNSZXF1ZXN0KHsgaXRlbUNvZGlnbzogaW5wdXQgfSk7XG4gICAgICAgIFxuICAgICAgICAvLyAyLiBTYW5pdGl6YSAocmVtb3ZlIGVzcGHDp29zIGUgLSlcbiAgICAgICAgLy8gMy4gRmljYSBcIklURU0xMjNcIiAoNyBjaGFycylcbiAgICAgICAgLy8gNC4gUGFzc2Egbm8gdGFtYW5ob1xuICAgICAgICAvLyA1LiBQYXNzYSBubyBmb3JtYXRvIGFsZmFudW3DqXJpY29cbiAgICAgICAgLy8gNi4gTsOjbyB0ZW0gU1FMIGtleXdvcmRzXG4gICAgICAgIGV4cGVjdChyZXN1bHQudmFsaWQpLnRvQmUodHJ1ZSk7XG4gICAgICAgIGV4cGVjdChyZXN1bHQuZGF0YT8uaXRlbUNvZGlnbykudG9CZSgnSVRFTTEyMycpO1xuICAgICAgfSk7XG5cbiAgICAgIHRlc3QoJ2RldmUgZmFsaGFyIG5vIHRhbWFuaG8gYW50ZXMgZGUgY2hlY2FyIFNRTCcsICgpID0+IHtcbiAgICAgICAgLy8gU3RyaW5nIGxvbmdhIGNvbSBTUUwga2V5d29yZFxuICAgICAgICBjb25zdCByZXN1bHQgPSB2YWxpZGF0ZUl0ZW1JbmZvcm1hY29lc0dlcmFpc1JlcXVlc3QoeyBcbiAgICAgICAgICBpdGVtQ29kaWdvOiAnU0VMRUNUMTIzNDU2Nzg5MCcgLy8gMTYgY2hhcnMsIG1hcyBTRUxFQ1QgZXN0w6EgbMOhXG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgLy8gUGFzc2Egbm8gdGFtYW5obyAoMTYgY2hhcnMpLCBtYXMgZmFsaGEgbm8gU1FMIGtleXdvcmRcbiAgICAgICAgZXhwZWN0KHJlc3VsdC52YWxpZCkudG9CZShmYWxzZSk7XG4gICAgICAgIGV4cGVjdChyZXN1bHQuZXJyb3IpLnRvQ29udGFpbigncGFkcsO1ZXMgbsOjbyBwZXJtaXRpZG9zJyk7XG4gICAgICB9KTtcblxuICAgICAgdGVzdCgnZGV2ZSBmYWxoYXIgbm8gZm9ybWF0byBhbnRlcyBkZSBjaGVjYXIgU1FMJywgKCkgPT4ge1xuICAgICAgICAvLyBTdHJpbmcgY3VydGEgY29tIFNRTCBlIGNhcmFjdGVyZXMgaW52w6FsaWRvc1xuICAgICAgICBjb25zdCByZXN1bHQgPSB2YWxpZGF0ZUl0ZW1JbmZvcm1hY29lc0dlcmFpc1JlcXVlc3QoeyBcbiAgICAgICAgICBpdGVtQ29kaWdvOiAnU0VMRUNUIConIC8vIFRlbSBlc3Bhw6dvXG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgLy8gMS4gU2FuaXRpemEgKG1hbnTDqW0gZXNwYcOnbylcbiAgICAgICAgLy8gMi4gUGFzc2Egbm8gdGFtYW5obyAoOCBjaGFycylcbiAgICAgICAgLy8gMy4gRkFMSEEgbm8gZm9ybWF0byAocmVnZXggbsOjbyBhY2VpdGEgZXNwYcOnbylcbiAgICAgICAgZXhwZWN0KHJlc3VsdC52YWxpZCkudG9CZShmYWxzZSk7XG4gICAgICAgIGV4cGVjdChyZXN1bHQuZXJyb3IpLnRvQ29udGFpbignY2FyYWN0ZXJlcyBpbnbDoWxpZG9zJyk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICB9KTtcbn0pOyJdLCJ2ZXJzaW9uIjozfQ==