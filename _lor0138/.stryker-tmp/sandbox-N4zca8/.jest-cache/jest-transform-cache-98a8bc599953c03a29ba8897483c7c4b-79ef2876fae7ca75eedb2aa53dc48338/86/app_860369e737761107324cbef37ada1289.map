{"file":"/home/mano/projetos/datasul/lor0138/src/app.ts","mappings":";;;;;;AAAA,aAAa;AACb,sDAAgF;AAChF,oDAA4B;AAC5B,gDAAwB;AACxB,8DAAsC;AACtC,sEAAsC;AACtC,4EAA2C;AAC3C,2DAA+C;AAC/C,iDAA2C;AAC3C,2DAAuE;AACvE,2FAAuF;AACvF,oJAA2H;AAC3H,8EAA2E;AAC3E,6DAA0D;AAC1D,mFAA0D;AAE1D,iEAAiE;AACjE,2CAA0C;AAE1C,gCAAgC;AAChC,+EAA2E;AAC3E,2EAAwF;AACxF,kEAAiD;AAEjD,MAAa,GAAG;IAGd;QACE,IAAI,CAAC,GAAG,GAAG,IAAA,iBAAO,GAAE,CAAC;QAErB,qDAAqD;QACrD,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAEzB,wBAAwB;QACxB,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAExB,kBAAkB;QAClB,IAAI,CAAC,WAAW,EAAE,CAAC;QAEnB,gCAAgC;QAChC,IAAI,CAAC,kBAAkB,EAAE,CAAC;IAC5B,CAAC;IAED,2CAA2C;IACnC,iBAAiB;QACvB,IAAI,CAAC;YACH,+BAAc,CAAC,WAAW,EAAE,CAAC;YAC7B,YAAG,CAAC,IAAI,CAAC,oCAAoC,CAAC,CAAC;QACjD,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,YAAG,CAAC,KAAK,CAAC,8BAA8B,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC;QACvD,CAAC;IACH,CAAC;IAEO,gBAAgB;QACtB,uDAAuD;QACvD,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,kDAAuB,CAAC,CAAC;QAEtC,iDAAiD;QACjD,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,sCAAiB,CAAC,CAAC;QAEhC,4BAA4B;QAC5B,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;YAC/D,kCAAkC;YAClC,GAAG,CAAC,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YAE3B,GAAG,CAAC,EAAE,CAAC,QAAQ,EAAE,GAAG,EAAE;gBACpB,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,CAAE,GAAG,CAAC,SAAS,IAAI,CAAC,CAAE,CAAC;gBAErD,YAAG,CAAC,IAAI,CAAC,cAAc,EAAE;oBACvB,aAAa,EAAE,GAAG,CAAC,EAAE;oBACrB,MAAM,EAAE,GAAG,CAAC,MAAM;oBAClB,GAAG,EAAE,GAAG,CAAC,GAAG;oBACZ,UAAU,EAAE,GAAG,CAAC,UAAU;oBAC1B,QAAQ,EAAE,QAAQ;oBAClB,SAAS,EAAE,GAAG,CAAC,GAAG,CAAC,YAAY,CAAC;iBACjC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YAEH,IAAI,EAAE,CAAC;QACT,CAAC,CAAC,CAAC;QAEH,sBAAsB;QACtB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,IAAA,gBAAM,EAAC;YAClB,qBAAqB,EAAE,KAAK,EAAE,wCAAwC;SACvE,CAAC,CAAC,CAAC;QAEJ,UAAU;QACV,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,IAAA,cAAI,EAAC;YAChB,MAAM,EAAE,OAAO,CAAC,GAAG,CAAC,oBAAoB,IAAI,GAAG,EAAE,qCAAqC;YACtF,OAAO,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,CAAC;YACzC,cAAc,EAAE,CAAC,cAAc,EAAE,eAAe,EAAE,kBAAkB,EAAE,cAAc,CAAC;YACrF,cAAc,EAAE,CAAC,kBAAkB,CAAC,EAAE,+BAA+B;SACtE,CAAC,CAAC,CAAC;QAEJ,iBAAiB;QACjB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,iBAAO,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC;QAC9C,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,iBAAO,CAAC,UAAU,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC;QAEpE,4BAA4B;QAC5B,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,IAAA,qBAAW,GAAE,CAAC,CAAC;QAE5B,qBAAqB;QACrB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,IAAA,yBAAO,EAAC,KAAK,CAAC,CAAC,CAAC;QAC7B,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;YAC/D,IAAI,CAAC,GAAG,CAAC,QAAQ;gBAAE,IAAI,EAAE,CAAC;QAC5B,CAAC,CAAC,CAAC;QAEH,mBAAmB;QACnB,MAAM,OAAO,GAAG,IAAA,8BAAS,EAAC;YACxB,QAAQ,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI,EAAE,aAAa;YACvC,GAAG,EAAE,GAAG,EAAE,mCAAmC;YAC7C,OAAO,EAAE;gBACP,KAAK,EAAE,qBAAqB;gBAC5B,OAAO,EAAE,iEAAiE;gBAC1E,UAAU,EAAE,YAAY;aACzB;YACD,eAAe,EAAE,IAAI;YACrB,aAAa,EAAE,KAAK;YACpB,OAAO,EAAE,CAAC,GAAY,EAAE,GAAa,EAAE,EAAE;gBACvC,YAAG,CAAC,IAAI,CAAC,qBAAqB,EAAE;oBAC9B,aAAa,EAAE,GAAG,CAAC,EAAE;oBACrB,EAAE,EAAE,GAAG,CAAC,EAAE;oBACV,GAAG,EAAE,GAAG,CAAC,GAAG;iBACb,CAAC,CAAC;gBACH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,KAAK,EAAE,qBAAqB;oBAC5B,OAAO,EAAE,wDAAwD;oBACjE,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;oBACnC,IAAI,EAAE,GAAG,CAAC,GAAG;oBACb,aAAa,EAAE,GAAG,CAAC,EAAE;iBACtB,CAAC,CAAC;YACL,CAAC;SACF,CAAC,CAAC;QAEH,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;IACjC,CAAC;IAEO,WAAW;QACjB,sDAAsD;QACtD,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,UAAU,EAAE,gBAAa,CAAC,CAAC;QAExC,eAAe;QACf,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAExB,2BAA2B;QAC3B,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAExB,uBAAuB;QACvB,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAExB,IAAI,CAAC,gBAAgB,EAAE,CAAA;QAEvB,eAAe;QACf,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,qDAAqD,EAChE,kCAAuB,CACxB,CAAC;QAEF,6BAA6B;QAC7B,IAAI,CAAC,cAAc,EAAE,CAAC;QAEtB,4BAA4B;QAC5B,IAAI,CAAC,eAAe,EAAE,CAAC;IACzB,CAAC;IAEO,gBAAgB;QACtB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;WAsDG;QACL,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,SAAS,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;YACzC,IAAI,CAAC;gBACH,2BAA2B;gBAC3B,IAAI,WAAW,GAAG,KAAK,CAAC;gBACxB,IAAI,cAAc,GAAG,CAAC,CAAC;gBACvB,IAAI,MAAM,GAAG,SAAS,CAAC;gBAEvB,IAAI,CAAC;oBACH,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;oBACzB,MAAM,UAAU,GAAG,iCAAe,CAAC,aAAa,EAAE,CAAC;oBACnD,MAAM,UAAU,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC;oBAC3C,cAAc,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,KAAK,CAAC;oBACpC,WAAW,GAAG,IAAI,CAAC;oBAEnB,MAAM,QAAQ,GAAG,iCAAe,CAAC,mBAAmB,EAAE,CAAC;oBACvD,MAAM,GAAG,QAAQ,CAAC,IAAI,CAAC;oBAEvB,wDAAwD;oBACxD,+BAAc,CAAC,mBAAmB,CAAC,OAAO,CACxC,EAAE,SAAS,EAAE,UAAU,EAAE,EACzB,cAAc,GAAG,IAAI,CACtB,CAAC;oBACF,+BAAc,CAAC,iBAAiB,CAAC,GAAG,CAClC,EAAE,SAAS,EAAE,UAAU,EAAE,EACzB,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACpB,CAAC;gBACJ,CAAC;gBAAC,OAAO,KAAK,EAAE,CAAC;oBACf,YAAG,CAAC,KAAK,CAAC,6BAA6B,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC;oBACpD,WAAW,GAAG,KAAK,CAAC;oBACpB,0BAA0B;oBAC1B,+BAAc,CAAC,iBAAiB,CAAC,GAAG,CAAC,EAAE,SAAS,EAAE,UAAU,EAAE,EAAE,CAAC,CAAC,CAAC;gBACrE,CAAC;gBAED,kBAAkB;gBAClB,MAAM,YAAY,GAAG,OAAO,CAAC,GAAG,CAAC,aAAa,KAAK,OAAO,CAAC;gBAC3D,MAAM,aAAa,GAAG,OAAO,CAAC,GAAG,CAAC,cAAc,IAAI,QAAQ,CAAC;gBAC7D,IAAI,UAAU,GAAG,KAAK,CAAC;gBAEvB,IAAI,YAAY,EAAE,CAAC;oBACjB,IAAI,CAAC;wBACH,UAAU,GAAG,MAAM,2BAAY,CAAC,OAAO,EAAE,CAAC;oBAC5C,CAAC;oBAAC,OAAO,KAAK,EAAE,CAAC;wBACf,YAAG,CAAC,KAAK,CAAC,0BAA0B,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC;wBACjD,UAAU,GAAG,KAAK,CAAC;oBACrB,CAAC;gBACH,CAAC;gBAED,oBAAoB;gBACpB,MAAM,SAAS,GAAG,WAAW,IAAI,CAAC,CAAC,YAAY,IAAI,UAAU,CAAC,CAAC;gBAC/D,MAAM,UAAU,GAAG,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;gBAEzC,wCAAwC;gBACxC,+BAAc,CAAC,iBAAiB,CAAC,GAAG,CAClC,EAAE,SAAS,EAAE,KAAK,EAAE,EACpB,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAClB,CAAC;gBAEF,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC;oBAC1B,MAAM,EAAE,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,WAAW;oBAC3C,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;oBACnC,QAAQ,EAAE;wBACR,SAAS,EAAE,WAAW;wBACtB,YAAY,EAAE,cAAc;wBAC5B,MAAM,EAAE,WAAW,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,WAAW;wBAC7C,IAAI,EAAE,MAAM;qBACb;oBACD,KAAK,EAAE;wBACL,OAAO,EAAE,YAAY;wBACrB,QAAQ,EAAE,aAAa;wBACvB,KAAK,EAAE,UAAU;qBAClB;oBACD,oCAAoC;oBACpC,OAAO,EAAE;wBACP,OAAO,EAAE,+BAAc,CAAC,OAAO,EAAE;wBACjC,QAAQ,EAAE,UAAU;qBACrB;iBACF,CAAC,CAAC;YAEL,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,YAAG,CAAC,KAAK,CAAC,0BAA0B,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC;gBAEjD,gCAAgC;gBAChC,+BAAc,CAAC,iBAAiB,CAAC,GAAG,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC;gBAE9D,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,MAAM,EAAE,WAAW;oBACnB,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;oBACnC,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;iBAChE,CAAC,CAAC;YACL,CAAC;QACH,CAAC,CAAC,CAAC;IACJ,CAAC;IAEQ,gBAAgB;QACtB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;WAoDG;QACD,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,cAAc,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;YACxC,IAAI,CAAC;gBACH,MAAM,KAAK,GAAG,2BAAY,CAAC,QAAQ,EAAE,CAAC;gBACtC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAClB,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,KAAK,EAAE,qCAAqC;oBAC5C,OAAO,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC;iBAChE,CAAC,CAAC;YACL,CAAC;QACH,CAAC,CAAC,CAAC;QACL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;WAoCG;QACD,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,aAAa,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;YAC7C,IAAI,CAAC;gBACH,MAAM,OAAO,GAAG,GAAG,CAAC,KAAK,CAAC,OAA6B,CAAC;gBACxD,MAAM,IAAI,GAAG,MAAM,2BAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBAC9C,GAAG,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;YACzC,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,KAAK,EAAE,uBAAuB;oBAC9B,OAAO,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC;iBAChE,CAAC,CAAC;YACL,CAAC;QACH,CAAC,CAAC,CAAC;QAEL;;;;;;;;;;;;;;;;;;WAkBG;QACH,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,cAAc,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;YAC/C,IAAI,CAAC;gBACH,MAAM,2BAAY,CAAC,KAAK,EAAE,CAAC;gBAC3B,GAAG,CAAC,IAAI,CAAC;oBACP,OAAO,EAAE,IAAI;oBACb,OAAO,EAAE,yBAAyB;iBACnC,CAAC,CAAC;YACL,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,KAAK,EAAE,sBAAsB;oBAC7B,OAAO,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC;iBAChE,CAAC,CAAC;YACL,CAAC;QACH,CAAC,CAAC,CAAC;QAEH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;WAyCG;QACH,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,4BAA4B,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;YAC7D,IAAI,CAAC;gBACH,MAAM,OAAO,GAAG,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC;gBACnC,MAAM,YAAY,GAAG,MAAM,2BAAY,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;gBAC5D,GAAG,CAAC,IAAI,CAAC;oBACP,OAAO,EAAE,IAAI;oBACb,YAAY;oBACZ,OAAO;iBACR,CAAC,CAAC;YACL,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,KAAK,EAAE,yBAAyB;oBAChC,OAAO,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC;iBAChE,CAAC,CAAC;YACL,CAAC;QACH,CAAC,CAAC,CAAC;IACT,CAAC;IAES,gBAAgB;QACtB,mBAAmB;QACnB,IAAI,CAAC,GAAG,CAAC,GAAG,CACV,WAAW,EACX,4BAAS,CAAC,KAAK,EACf,4BAAS,CAAC,KAAK,CAAC,4BAAW,EAAE,iCAAgB,CAAC,CAC/C,CAAC;QAEF,6BAA6B;QAC7B,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC,GAAY,EAAE,GAAa,EAAE,EAAE;YAC7D,GAAG,CAAC,SAAS,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;YAClD,GAAG,CAAC,IAAI,CAAC,4BAAW,CAAC,CAAC;QACxB,CAAC,CAAC,CAAC;QAEH,YAAG,CAAC,IAAI,CAAC,iDAAiD,CAAC,CAAC;IAC9D,CAAC;IAGO,gBAAgB;QACtB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,sBAAW,CAAC,CAAC;QACpC,YAAG,CAAC,IAAI,CAAC,iDAAiD,CAAC,CAAC;IAC9D,CAAC;IAEO,cAAc;QACpB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;WAqCG;QACH,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAY,EAAE,GAAa,EAAE,EAAE;YAChD,GAAG,CAAC,IAAI,CAAC;gBACP,OAAO,EAAE,aAAa;gBACtB,OAAO,EAAE,OAAO;gBAChB,aAAa,EAAE,WAAW;gBAC1B,MAAM,EAAE,SAAS;gBACjB,OAAO,EAAE,UAAU,EAAE,SAAS;gBAC9B,SAAS,EAAE;oBACT,iBAAiB,EAAE,iEAAiE;iBACrF;gBACD,aAAa,EAAE,GAAG,CAAC,EAAE;aACtB,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,eAAe;QACrB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAY,EAAE,GAAa,EAAE,EAAE;YAC3C,YAAG,CAAC,IAAI,CAAC,qBAAqB,EAAE;gBAC9B,aAAa,EAAE,GAAG,CAAC,EAAE;gBACrB,MAAM,EAAE,GAAG,CAAC,MAAM;gBAClB,GAAG,EAAE,GAAG,CAAC,GAAG;aACb,CAAC,CAAC;YAEH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,KAAK,EAAE,qBAAqB;gBAC5B,OAAO,EAAE,UAAU,GAAG,CAAC,MAAM,IAAI,GAAG,CAAC,GAAG,aAAa;gBACrD,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;gBACnC,IAAI,EAAE,GAAG,CAAC,GAAG;gBACb,aAAa,EAAE,GAAG,CAAC,EAAE;gBACrB,eAAe,EAAE;oBACf,aAAa,EAAE,WAAW;oBAC1B,MAAM,EAAE,SAAS;oBACjB,OAAO,EAAE,UAAU,EAAE,SAAS;oBAC9B,GAAG,EAAE,iEAAiE;iBACvE;aACF,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,kBAAkB;QACxB,qDAAqD;QACrD,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAqB,EAAE,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;YACtF,gBAAgB;YAChB,IAAI,GAAG,CAAC,OAAO,KAAK,kBAAkB,IAAI,GAAG,CAAC,QAAQ,EAAE,CAAC;gBACvD,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,KAAK,EAAE,SAAS;oBAChB,OAAO,EAAE,sDAAsD;oBAC/D,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;oBACnC,IAAI,EAAE,GAAG,CAAC,GAAG;oBACb,aAAa,EAAE,GAAG,CAAC,EAAE;iBACtB,CAAC,CAAC;YACL,CAAC;YAED,mEAAmE;YACnE,IAAI,GAAG,YAAY,iBAAQ,EAAE,CAAC;gBAC5B,MAAM,QAAQ,GAAQ;oBACpB,KAAK,EAAE,GAAG,CAAC,IAAI;oBACf,OAAO,EAAE,GAAG,CAAC,OAAO;oBACpB,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;oBACnC,IAAI,EAAE,GAAG,CAAC,GAAG;oBACb,aAAa,EAAE,GAAG,CAAC,EAAE;iBACtB,CAAC;gBAEF,2CAA2C;gBAC3C,IAAI,GAAG,CAAC,OAAO,EAAE,CAAC;oBAChB,QAAQ,CAAC,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC;gBACjC,CAAC;gBAED,iBAAiB;gBACjB,IAAI,GAAG,CAAC,aAAa,EAAE,CAAC;oBACtB,YAAG,CAAC,IAAI,CAAC,kBAAkB,EAAE;wBAC3B,aAAa,EAAE,GAAG,CAAC,EAAE;wBACrB,KAAK,EAAE,GAAG,CAAC,IAAI;wBACf,OAAO,EAAE,GAAG,CAAC,OAAO;wBACpB,UAAU,EAAE,GAAG,CAAC,UAAU;wBAC1B,OAAO,EAAE,GAAG,CAAC,OAAO;qBACrB,CAAC,CAAC;gBACL,CAAC;qBAAM,CAAC;oBACN,YAAG,CAAC,KAAK,CAAC,cAAc,EAAE;wBACxB,aAAa,EAAE,GAAG,CAAC,EAAE;wBACrB,KAAK,EAAE,GAAG,CAAC,IAAI;wBACf,OAAO,EAAE,GAAG,CAAC,OAAO;wBACpB,UAAU,EAAE,GAAG,CAAC,UAAU;wBAC1B,KAAK,EAAE,GAAG,CAAC,KAAK;wBAChB,OAAO,EAAE,GAAG,CAAC,OAAO;qBACrB,CAAC,CAAC;gBACL,CAAC;gBAED,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACnD,CAAC;YAED,4BAA4B;YAC5B,YAAG,CAAC,KAAK,CAAC,kBAAkB,EAAE;gBAC5B,aAAa,EAAE,GAAG,CAAC,EAAE;gBACrB,KAAK,EAAE,GAAG,CAAC,OAAO;gBAClB,KAAK,EAAE,GAAG,CAAC,KAAK;gBAChB,GAAG,EAAE,GAAG,CAAC,GAAG;gBACZ,MAAM,EAAE,GAAG,CAAC,MAAM;aACnB,CAAC,CAAC;YAEH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,KAAK,EAAE,cAAc;gBACrB,OAAO,EAAE,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY;oBAC5C,CAAC,CAAC,6CAA6C;oBAC/C,CAAC,CAAC,GAAG,CAAC,OAAO;gBACf,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;gBACnC,IAAI,EAAE,GAAG,CAAC,GAAG;gBACb,aAAa,EAAE,GAAG,CAAC,EAAE;aACtB,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,aAAa;QAClB,OAAO,IAAI,CAAC,GAAG,CAAC;IAClB,CAAC;CACF;AAnqBD,kBAmqBC;AAED,gCAAgC;AAChC,MAAM,WAAW,GAAG,IAAI,GAAG,EAAE,CAAC;AAC9B,kBAAe,WAAW,CAAC,aAAa,EAAE,CAAC","names":[],"sources":["/home/mano/projetos/datasul/lor0138/src/app.ts"],"sourcesContent":["// src/app.ts\r\nimport express, { Application, Request, Response, NextFunction } from 'express';\r\nimport helmet from 'helmet';\r\nimport cors from 'cors';\r\nimport compression from 'compression';\r\nimport timeout from 'connect-timeout';\r\nimport swaggerUi from 'swagger-ui-express';\r\nimport { rateLimit } from 'express-rate-limit';\r\nimport { log } from '@shared/utils/logger';\r\nimport { swaggerSpec, swaggerUiOptions } from '@config/swagger.config';\r\nimport { correlationIdMiddleware } from '@shared/middlewares/correlationId.middleware';\r\nimport informacoesGeraisRoutes from './api/lor0138/item/dadosCadastrais/informacoesGerais/routes/informacoesGerais.routes';\r\nimport { DatabaseManager } from '@infrastructure/database/DatabaseManager';\r\nimport { CacheManager } from '@shared/utils/cacheManager';\r\nimport adminRoutes from './api/admin/routes/admin.routes';\r\n\r\n// ✅ ÚNICA MUDANÇA: Importar classes de erro do sistema unificado\r\nimport { AppError } from '@shared/errors';\r\n\r\n// ✅ NOVO: Imports para métricas\r\nimport { metricsMiddleware } from '@shared/middlewares/metrics.middleware';\r\nimport { MetricsManager, metricsManager } from '@infrastructure/metrics/MetricsManager';\r\nimport metricsRoutes from './api/metrics/routes';\r\n\r\nexport class App {\r\n  public app: Application;\r\n\r\n  constructor() {\r\n    this.app = express();\r\n    \r\n    // ✅ NOVO: Inicializar métricas ANTES dos middlewares\r\n    this.initializeMetrics();\r\n    \r\n    // Configura middlewares\r\n    this.setupMiddlewares();\r\n    \r\n    // Configura rotas\r\n    this.setupRoutes();\r\n    \r\n    // Configura tratamento de erros\r\n    this.setupErrorHandling();\r\n  }\r\n\r\n  // ✅ NOVO: Método para inicializar métricas\r\n  private initializeMetrics(): void {\r\n    try {\r\n      MetricsManager.getInstance();\r\n      log.info('✅ Sistema de métricas inicializado');\r\n    } catch (error) {\r\n      log.error('Erro ao inicializar métricas', { error });\r\n    }\r\n  }\r\n\r\n  private setupMiddlewares(): void {\r\n    // ✅ 1. Correlation ID - DEVE ser o PRIMEIRO middleware\r\n    this.app.use(correlationIdMiddleware);\r\n\r\n    // ✅ NOVO: 2. Métricas - logo após Correlation ID\r\n    this.app.use(metricsMiddleware);\r\n\r\n    // 3. Logging de requisições\r\n    this.app.use((req: Request, res: Response, next: NextFunction) => {\r\n      // ✅ CORREÇÃO 2: Definir startTime\r\n      req.startTime = Date.now();\r\n\r\n      res.on('finish', () => {\r\n        const duration = Date.now() - ( req.startTime || 0 );\r\n        \r\n        log.info('HTTP Request', {\r\n          correlationId: req.id,\r\n          method: req.method,\r\n          url: req.url,\r\n          statusCode: res.statusCode,\r\n          duration: duration,\r\n          userAgent: req.get('user-agent'),\r\n        });\r\n      });\r\n\r\n      next();\r\n    });\r\n\r\n    // 4. Security headers\r\n    this.app.use(helmet({\r\n      contentSecurityPolicy: false, // Desabilita CSP para Swagger funcionar\r\n    }));\r\n\r\n    // 5. CORS\r\n    this.app.use(cors({\r\n      origin: process.env.CORS_ALLOWED_ORIGINS || '*', // ✅ CORREÇÃO 1: CORS_ALLOWED_ORIGINS\r\n      methods: ['GET', 'POST', 'PUT', 'DELETE'],\r\n      allowedHeaders: ['Content-Type', 'Authorization', 'X-Correlation-ID', 'X-Request-ID'],\r\n      exposedHeaders: ['X-Correlation-ID'], // Permite cliente ler o header\r\n    }));\r\n\r\n    // 6. Body parser\r\n    this.app.use(express.json({ limit: '10mb' }));\r\n    this.app.use(express.urlencoded({ extended: true, limit: '10mb' }));\r\n\r\n    // 7. Compressão de resposta\r\n    this.app.use(compression());\r\n\r\n    // 8. Request timeout\r\n    this.app.use(timeout('30s'));\r\n    this.app.use((req: Request, res: Response, next: NextFunction) => {\r\n      if (!req.timedout) next();\r\n    });\r\n\r\n    // 9. Rate limiting\r\n    const limiter = rateLimit({\r\n      windowMs: 15 * 60 * 1000, // 15 minutos\r\n      max: 100, // limite de 100 requisições por IP\r\n      message: {\r\n        error: 'Rate limit excedido',\r\n        message: 'Muitas requisições deste IP. Tente novamente em alguns minutos.',\r\n        retryAfter: '15 minutos'\r\n      },\r\n      standardHeaders: true,\r\n      legacyHeaders: false,\r\n      handler: (req: Request, res: Response) => {\r\n        log.warn('Rate limit excedido', {\r\n          correlationId: req.id,\r\n          ip: req.ip,\r\n          url: req.url\r\n        });\r\n        res.status(429).json({\r\n          error: 'Rate limit excedido',\r\n          message: 'Muitas requisições. Tente novamente em alguns minutos.',\r\n          timestamp: new Date().toISOString(),\r\n          path: req.url,\r\n          correlationId: req.id\r\n        });\r\n      }\r\n    });\r\n\r\n    this.app.use('/api/', limiter);\r\n  }\r\n\r\n  private setupRoutes(): void {\r\n    // ✅ NOVO: Rota de métricas (PRIMEIRO - antes de tudo)\r\n    this.app.use('/metrics', metricsRoutes);\r\n\r\n    // Health check\r\n    this.setupHealthCheck();\r\n\r\n    // Configura rotas de cache\r\n    this.setupCacheRoutes();\r\n\r\n    // Documentação Swagger\r\n    this.setupSwaggerDocs();\r\n\r\n    this.setupAdminRoutes()\r\n\r\n    // Rotas da API\r\n    this.app.use('/api/lor0138/item/dadosCadastrais/informacoesGerais', \r\n      informacoesGeraisRoutes\r\n    );\r\n\r\n    // Rota raiz com documentação\r\n    this.setupRootRoute();\r\n\r\n    // 404 - Rota não encontrada\r\n    this.setup404Handler();\r\n  }\r\n\r\n  private setupHealthCheck(): void {\r\n    /**\r\n     * @openapi\r\n     * /health:\r\n     *   get:\r\n     *     summary: Health Check do Sistema\r\n     *     description: |\r\n     *       Verifica o status de saúde do sistema, incluindo:\r\n     *       - Status geral (healthy/degraded/unhealthy)\r\n     *       - Conectividade com banco de dados\r\n     *       - Tempo de resposta do banco\r\n     *       - Uso de memória da aplicação\r\n     *       - Tempo de atividade (uptime)\r\n     *       - **Correlation ID** para rastreamento\r\n     *       \r\n     *       **Status possíveis:**\r\n     *       - `healthy`: Sistema operacional (DB < 100ms)\r\n     *       - `degraded`: Sistema lento (DB >= 100ms)\r\n     *       - `unhealthy`: Sistema com falhas (DB não conectado)\r\n     *     tags:\r\n     *       - Health\r\n     *     parameters:\r\n     *       - in: header\r\n     *         name: X-Correlation-ID\r\n     *         schema:\r\n     *           type: string\r\n     *           format: uuid\r\n     *         required: false\r\n     *         description: Correlation ID para rastreamento (gerado automaticamente se não fornecido)\r\n     *         example: '550e8400-e29b-41d4-a716-446655440000'\r\n     *     responses:\r\n     *       200:\r\n     *         description: Sistema saudável ou degradado\r\n     *         headers:\r\n     *           X-Correlation-ID:\r\n     *             description: Correlation ID da requisição\r\n     *             schema:\r\n     *               type: string\r\n     *               format: uuid\r\n     *         content:\r\n     *           application/json:\r\n     *             schema:\r\n     *               $ref: '#/components/schemas/HealthCheck'\r\n     *       503:\r\n     *         description: Sistema não saudável\r\n     *         headers:\r\n     *           X-Correlation-ID:\r\n     *             description: Correlation ID da requisição\r\n     *             schema:\r\n     *               type: string\r\n     *               format: uuid\r\n     *         content:\r\n     *           application/json:\r\n     *             schema:\r\n     *               $ref: '#/components/schemas/HealthCheck'\r\n     */\r\n  this.app.get('/health', async (req, res) => {\r\n    try {\r\n      // Verificar banco de dados\r\n      let dbConnected = false;\r\n      let dbResponseTime = 0;\r\n      let dbType = 'unknown';\r\n\r\n      try {\r\n        const start = Date.now();\r\n        const connection = DatabaseManager.getConnection();\r\n        await connection.query('SELECT 1 as test');\r\n        dbResponseTime = Date.now() - start;\r\n        dbConnected = true;\r\n        \r\n        const dbStatus = DatabaseManager.getConnectionStatus();\r\n        dbType = dbStatus.type;\r\n\r\n        // ✅ NOVO: Registrar métrica de health check do database\r\n        metricsManager.healthCheckDuration.observe(\r\n          { component: 'database' },\r\n          dbResponseTime / 1000\r\n        );\r\n        metricsManager.healthCheckStatus.set(\r\n          { component: 'database' },\r\n          dbConnected ? 1 : 0\r\n        );\r\n      } catch (error) {\r\n        log.error('Health check database error', { error });\r\n        dbConnected = false;\r\n        // ✅ NOVO: Registrar falha\r\n        metricsManager.healthCheckStatus.set({ component: 'database' }, 0);\r\n      }\r\n\r\n      // Verificar cache\r\n      const cacheEnabled = process.env.CACHE_ENABLED !== 'false';\r\n      const cacheStrategy = process.env.CACHE_STRATEGY || 'memory';\r\n      let cacheReady = false;\r\n\r\n      if (cacheEnabled) {\r\n        try {\r\n          cacheReady = await CacheManager.isReady();\r\n        } catch (error) {\r\n          log.error('Health check cache error', { error });\r\n          cacheReady = false;\r\n        }\r\n      }\r\n\r\n      // Determinar status\r\n      const isHealthy = dbConnected && (!cacheEnabled || cacheReady);\r\n      const statusCode = isHealthy ? 200 : 503;\r\n\r\n      // ✅ NOVO: Registrar status geral da API\r\n      metricsManager.healthCheckStatus.set(\r\n        { component: 'api' },\r\n        isHealthy ? 1 : 0\r\n      );\r\n\r\n      res.status(statusCode).json({\r\n        status: isHealthy ? 'healthy' : 'unhealthy',\r\n        timestamp: new Date().toISOString(),\r\n        database: {\r\n          connected: dbConnected,\r\n          responseTime: dbResponseTime,\r\n          status: dbConnected ? 'healthy' : 'unhealthy',\r\n          type: dbType\r\n        },\r\n        cache: {\r\n          enabled: cacheEnabled,\r\n          strategy: cacheStrategy,\r\n          ready: cacheReady\r\n        },\r\n        // ✅ NOVO: Informação sobre métricas\r\n        metrics: {\r\n          enabled: metricsManager.isReady(),\r\n          endpoint: '/metrics'\r\n        }\r\n      });\r\n\r\n    } catch (error) {\r\n      log.error('Health check fatal error', { error });\r\n      \r\n      // ✅ NOVO: Registrar falha total\r\n      metricsManager.healthCheckStatus.set({ component: 'api' }, 0);\r\n      \r\n      res.status(503).json({\r\n        status: 'unhealthy',\r\n        timestamp: new Date().toISOString(),\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      });\r\n    }\r\n  });\r\n }\r\n\r\n  private setupCacheRoutes(): void {\r\n    /**\r\n     * @openapi\r\n     * /cache/stats:\r\n     *   get:\r\n     *     summary: Estatísticas do Cache\r\n     *     description: |\r\n     *       Retorna estatísticas de uso do cache:\r\n     *       - Total de hits (acertos)\r\n     *       - Total de misses (erros)\r\n     *       - Taxa de acerto (hit rate)\r\n     *       - Número de chaves em cache\r\n     *       - Informações de configuração\r\n     *     tags:\r\n     *       - Cache\r\n     *     responses:\r\n     *       200:\r\n     *         description: Estatísticas do cache\r\n     *         content:\r\n     *           application/json:\r\n     *             schema:\r\n     *               type: object\r\n     *               properties:\r\n     *                 stats:\r\n     *                   type: object\r\n     *                   properties:\r\n     *                     hits:\r\n     *                       type: number\r\n     *                     misses:\r\n     *                       type: number\r\n     *                     keys:\r\n     *                       type: number\r\n     *                     hitRate:\r\n     *                       type: number\r\n     *                 config:\r\n     *                   type: object\r\n     *                   properties:\r\n     *                     stdTTL:\r\n     *                       type: number\r\n     *                     checkperiod:\r\n     *                       type: number\r\n     *                     enabled:\r\n     *                       type: boolean\r\n     *             example:\r\n     *               stats:\r\n     *                 hits: 150\r\n     *                 misses: 30\r\n     *                 keys: 45\r\n     *                 hitRate: 83.33\r\n     *               config:\r\n     *                 stdTTL: 300\r\n     *                 checkperiod: 600\r\n     *                 enabled: true\r\n     */\r\n      this.app.get('/cache/stats', (req, res) => {\r\n        try {\r\n          const stats = CacheManager.getStats();\r\n          res.json(stats);\r\n        } catch (error) {\r\n          res.status(500).json({\r\n            error: 'Erro ao obter estatísticas de cache',\r\n            message: error instanceof Error ? error.message : String(error)\r\n          });\r\n        }\r\n      });\r\n    /**\r\n     * @openapi\r\n     * /cache/keys:\r\n     *   get:\r\n     *     summary: Listar Chaves do Cache\r\n     *     description: |\r\n     *       Lista todas as chaves armazenadas no cache com seus TTLs.\r\n     *       Útil para debug e monitoramento.\r\n     *     tags:\r\n     *       - Cache\r\n     *     responses:\r\n     *       200:\r\n     *         description: Lista de chaves\r\n     *         content:\r\n     *           application/json:\r\n     *             schema:\r\n     *               type: object\r\n     *               properties:\r\n     *                 keys:\r\n     *                   type: array\r\n     *                   items:\r\n     *                     type: object\r\n     *                     properties:\r\n     *                       key:\r\n     *                         type: string\r\n     *                       ttl:\r\n     *                         type: number\r\n     *                 total:\r\n     *                   type: number\r\n     *             example:\r\n     *               keys:\r\n     *                 - key: 'item:7530110:informacoesGerais'\r\n     *                   ttl: 1735995600000\r\n     *                 - key: 'GET:/health'\r\n     *                   ttl: 1735995630000\r\n     *               total: 2\r\n     */\r\n      this.app.get('/cache/keys', async (req, res) => {\r\n        try {\r\n          const pattern = req.query.pattern as string | undefined;\r\n          const keys = await CacheManager.keys(pattern);\r\n          res.json({ keys, count: keys.length });\r\n        } catch (error) {\r\n          res.status(500).json({\r\n            error: 'Erro ao listar chaves',\r\n            message: error instanceof Error ? error.message : String(error)\r\n          });\r\n        }\r\n      });\r\n\r\n    /**\r\n     * @openapi\r\n     * /cache/clear:\r\n     *   post:\r\n     *     summary: Limpar Cache\r\n     *     description: |\r\n     *       Limpa todo o cache e reseta estatísticas.\r\n     *       **ATENÇÃO**: Use com cuidado em produção!\r\n     *     tags:\r\n     *       - Cache\r\n     *     responses:\r\n     *       200:\r\n     *         description: Cache limpo com sucesso\r\n     *         content:\r\n     *           application/json:\r\n     *             example:\r\n     *               message: 'Cache limpo com sucesso'\r\n     *               keysRemoved: 45\r\n     */\r\n    this.app.post('/cache/clear', async (req, res) => {\r\n      try {\r\n        await CacheManager.flush();\r\n        res.json({ \r\n          success: true, \r\n          message: 'Cache limpo com sucesso' \r\n        });\r\n      } catch (error) {\r\n        res.status(500).json({\r\n          error: 'Erro ao limpar cache',\r\n          message: error instanceof Error ? error.message : String(error)\r\n        });\r\n      }\r\n    });\r\n\r\n    /**\r\n     * @openapi\r\n     * /cache/invalidate/{pattern}:\r\n     *   delete:\r\n     *     summary: Invalidar Cache por Padrão\r\n     *     description: |\r\n     *       Invalida cache usando padrão de chaves.\r\n     *       Suporta wildcard (*).\r\n     *       \r\n     *       Exemplos:\r\n     *       - `item:*` - Todas as chaves de itens\r\n     *       - `item:7530110:*` - Todas as chaves do item 7530110\r\n     *       - `GET:/api/*` - Todas as requisições GET da API\r\n     *     tags:\r\n     *       - Cache\r\n     *     parameters:\r\n     *       - in: path\r\n     *         name: pattern\r\n     *         required: true\r\n     *         schema:\r\n     *           type: string\r\n     *         description: Padrão de chaves (suporta *)\r\n     *         examples:\r\n     *           allItems:\r\n     *             value: 'item:*'\r\n     *             summary: Todos os itens\r\n     *           singleItem:\r\n     *             value: 'item:7530110:*'\r\n     *             summary: Item específico\r\n     *           apiRequests:\r\n     *             value: 'GET:/api/*'\r\n     *             summary: Todas as requisições GET\r\n     *     responses:\r\n     *       200:\r\n     *         description: Cache invalidado\r\n     *         content:\r\n     *           application/json:\r\n     *             example:\r\n     *               message: 'Cache invalidado'\r\n     *               pattern: 'item:*'\r\n     *               keysRemoved: 12\r\n     */\r\n    this.app.delete('/cache/invalidate/:pattern', async (req, res) => {\r\n        try {\r\n          const pattern = req.params.pattern;\r\n          const deletedCount = await CacheManager.invalidate(pattern);\r\n          res.json({ \r\n            success: true, \r\n            deletedCount,\r\n            pattern \r\n          });\r\n        } catch (error) {\r\n          res.status(500).json({\r\n            error: 'Erro ao invalidar cache',\r\n            message: error instanceof Error ? error.message : String(error)\r\n          });\r\n        }\r\n      });\r\n}\r\n\r\n  private setupSwaggerDocs(): void {\r\n    // Serve Swagger UI\r\n    this.app.use(\r\n      '/api-docs',\r\n      swaggerUi.serve,\r\n      swaggerUi.setup(swaggerSpec, swaggerUiOptions)\r\n    );\r\n\r\n    // Serve OpenAPI spec em JSON\r\n    this.app.get('/api-docs.json', (req: Request, res: Response) => {\r\n      res.setHeader('Content-Type', 'application/json');\r\n      res.send(swaggerSpec);\r\n    });\r\n\r\n    log.info('📚 Documentação Swagger disponível em /api-docs');\r\n  }\r\n\r\n  \r\n  private setupAdminRoutes(): void {\r\n    this.app.use('/admin', adminRoutes);\r\n    log.info('🔑 Rotas de administração disponíveis em /admin');\r\n  }\r\n\r\n  private setupRootRoute(): void {\r\n    /**\r\n     * @openapi\r\n     * /:\r\n     *   get:\r\n     *     summary: Informações da API\r\n     *     description: |\r\n     *       Retorna informações básicas sobre a API e links úteis para navegação.\r\n     *       Inclui **Correlation ID** para rastreamento de requisições.\r\n     *     tags:\r\n     *       - Health\r\n     *     parameters:\r\n     *       - in: header\r\n     *         name: X-Correlation-ID\r\n     *         schema:\r\n     *           type: string\r\n     *           format: uuid\r\n     *         required: false\r\n     *         description: Correlation ID para rastreamento\r\n     *     responses:\r\n     *       200:\r\n     *         description: Informações da API\r\n     *         headers:\r\n     *           X-Correlation-ID:\r\n     *             description: Correlation ID da requisição\r\n     *             schema:\r\n     *               type: string\r\n     *               format: uuid\r\n     *         content:\r\n     *           application/json:\r\n     *             example:\r\n     *               message: 'Datasul API'\r\n     *               version: '1.0.0'\r\n     *               documentation: '/api-docs'\r\n     *               health: '/health'\r\n     *               endpoints:\r\n     *                 informacoesGerais: '/api/lor0138/item/dadosCadastrais/informacoesGerais/:itemCodigo'\r\n     *               correlationId: '550e8400-e29b-41d4-a716-446655440000'\r\n     */\r\n    this.app.get('/', (req: Request, res: Response) => {\r\n      res.json({\r\n        message: 'Datasul API',\r\n        version: '1.0.0',\r\n        documentation: '/api-docs',\r\n        health: '/health',\r\n        metrics: '/metrics', // ✅ NOVO\r\n        endpoints: {\r\n          informacoesGerais: '/api/lor0138/item/dadosCadastrais/informacoesGerais/:itemCodigo'\r\n        },\r\n        correlationId: req.id\r\n      });\r\n    });\r\n  }\r\n\r\n  private setup404Handler(): void {\r\n    this.app.use((req: Request, res: Response) => {\r\n      log.warn('Rota não encontrada', {\r\n        correlationId: req.id,\r\n        method: req.method,\r\n        url: req.url\r\n      });\r\n      \r\n      res.status(404).json({\r\n        error: 'Rota não encontrada',\r\n        message: `A rota ${req.method} ${req.url} não existe`,\r\n        timestamp: new Date().toISOString(),\r\n        path: req.url,\r\n        correlationId: req.id,\r\n        availableRoutes: {\r\n          documentation: '/api-docs',\r\n          health: '/health',\r\n          metrics: '/metrics', // ✅ NOVO\r\n          api: '/api/lor0138/item/dadosCadastrais/informacoesGerais/:itemCodigo'\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  private setupErrorHandling(): void {\r\n    // ✅ MUDANÇA: Error handler melhorado usando AppError\r\n    this.app.use((err: Error | AppError, req: Request, res: Response, next: NextFunction) => {\r\n      // Timeout error\r\n      if (err.message === 'Response timeout' || req.timedout) {\r\n        return res.status(408).json({\r\n          error: 'Timeout',\r\n          message: 'A requisição demorou muito tempo para ser processada',\r\n          timestamp: new Date().toISOString(),\r\n          path: req.url,\r\n          correlationId: req.id\r\n        });\r\n      }\r\n\r\n      // Se for AppError (do sistema unificado), usa statusCode e context\r\n      if (err instanceof AppError) {\r\n        const response: any = {\r\n          error: err.name,\r\n          message: err.message,\r\n          timestamp: new Date().toISOString(),\r\n          path: req.url,\r\n          correlationId: req.id\r\n        };\r\n\r\n        // Adiciona context como details se existir\r\n        if (err.context) {\r\n          response.details = err.context;\r\n        }\r\n\r\n        // Log apropriado\r\n        if (err.isOperational) {\r\n          log.warn('Erro operacional', {\r\n            correlationId: req.id,\r\n            error: err.name,\r\n            message: err.message,\r\n            statusCode: err.statusCode,\r\n            context: err.context\r\n          });\r\n        } else {\r\n          log.error('Erro crítico', {\r\n            correlationId: req.id,\r\n            error: err.name,\r\n            message: err.message,\r\n            statusCode: err.statusCode,\r\n            stack: err.stack,\r\n            context: err.context\r\n          });\r\n        }\r\n\r\n        return res.status(err.statusCode).json(response);\r\n      }\r\n\r\n      // Erro genérico não tratado\r\n      log.error('Erro não tratado', {\r\n        correlationId: req.id,\r\n        error: err.message,\r\n        stack: err.stack,\r\n        url: req.url,\r\n        method: req.method\r\n      });\r\n\r\n      res.status(500).json({\r\n        error: 'Erro interno',\r\n        message: process.env.NODE_ENV === 'production' \r\n          ? 'Ocorreu um erro ao processar sua requisição' \r\n          : err.message,\r\n        timestamp: new Date().toISOString(),\r\n        path: req.url,\r\n        correlationId: req.id\r\n      });\r\n    });\r\n  }\r\n\r\n  public getExpressApp(): Application {\r\n    return this.app;\r\n  }\r\n}\r\n\r\n// ✅ Export default da instância\r\nconst appInstance = new App();\r\nexport default appInstance.getExpressApp();"],"version":3}