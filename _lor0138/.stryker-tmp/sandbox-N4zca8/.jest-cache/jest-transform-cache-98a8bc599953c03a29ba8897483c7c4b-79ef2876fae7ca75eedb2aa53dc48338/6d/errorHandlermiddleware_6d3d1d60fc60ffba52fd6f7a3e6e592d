7a9b5ec163f1f006c89652000cd61471
"use strict";
// src/shared/middlewares/errorHandler.middleware.ts
Object.defineProperty(exports, "__esModule", { value: true });
exports.errorHandler = errorHandler;
exports.notFoundHandler = notFoundHandler;
exports.asyncHandler = asyncHandler;
const AppError_1 = require("@shared/errors/AppError");
const logger_1 = require("../utils/logger");
/**
 * Sanitiza mensagem de erro (mantido do seu código)
 */
function sanitizeErrorMessage(error) {
    const message = error.message || 'Erro desconhecido';
    let sanitized = message.replace(/\/[^\s]+\.(ts|js|tsx|jsx)/gi, '[arquivo]');
    sanitized = sanitized.replace(/SELECT\s+.*?FROM/gi, 'consulta SQL');
    sanitized = sanitized.replace(/INSERT\s+INTO/gi, 'operação de inserção');
    sanitized = sanitized.replace(/UPDATE\s+.*?SET/gi, 'operação de atualização');
    sanitized = sanitized.replace(/\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}(:\d+)?/g, '[servidor]');
    sanitized = sanitized.replace(/user=\w+/gi, 'user=[oculto]');
    sanitized = sanitized.replace(/password=\w+/gi, 'password=[oculto]');
    return sanitized;
}
/**
 * Middleware global de tratamento de erros
 */
function errorHandler(err, req, res, next) {
    if (res.headersSent) {
        return next(err);
    }
    const statusCode = err instanceof AppError_1.AppError ? err.statusCode : 500;
    const isOperational = err instanceof AppError_1.AppError ? err.isOperational : false;
    const context = err instanceof AppError_1.AppError ? err.context : undefined;
    // Log baseado no tipo
    if (isOperational) {
        logger_1.log.warn('Erro operacional', {
            requestId: req.requestId,
            method: req.method,
            url: req.originalUrl,
            statusCode,
            message: err.message,
            context,
        });
    }
    else {
        logger_1.log.error('Erro não operacional', {
            requestId: req.requestId,
            method: req.method,
            url: req.originalUrl,
            error: err.message,
            stack: err.stack,
        });
    }
    const isDevelopment = process.env.NODE_ENV === 'development';
    if (isDevelopment) {
        return res.status(statusCode).json({
            error: err.name || 'Error',
            message: err.message,
            timestamp: new Date().toISOString(),
            path: req.originalUrl,
            requestId: req.requestId,
            context,
            stack: err.stack?.split('\n').slice(0, 5),
        });
    }
    // Produção: sanitiza mensagem
    const userMessage = isOperational
        ? sanitizeErrorMessage(err)
        : 'Erro interno do servidor. Tente novamente mais tarde.';
    res.status(statusCode).json({
        error: err.name || 'Error',
        message: userMessage,
        timestamp: new Date().toISOString(),
        path: req.originalUrl,
        requestId: req.requestId,
    });
}
/**
 * 404 - Rota não encontrada
 */
function notFoundHandler(req, res, next) {
    const error = new AppError_1.AppError(404, `Rota não encontrada: ${req.method} ${req.originalUrl}`, true, { method: req.method, path: req.originalUrl });
    next(error);
}
/**
 * asyncHandler (mantido do seu código)
 */
function asyncHandler(fn) {
    return (req, res, next) => {
        Promise.resolve(fn(req, res, next)).catch(next);
    };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,