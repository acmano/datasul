{"file":"/home/mano/projetos/datasul/lor0138/src/shared/utils/UserRateLimiter.ts","mappings":"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","names":[],"sources":["/home/mano/projetos/datasul/lor0138/src/shared/utils/UserRateLimiter.ts"],"sourcesContent":["// src/shared/utils/UserRateLimiter.ts\n\nimport { UserTier, RATE_LIMIT_CONFIGS } from '@shared/types/apiKey.types';\nimport { log } from './logger';\n\ninterface RateLimitRecord {\n  userId: string;\n  tier: UserTier;\n  minute: { count: number; resetAt: number };\n  hour: { count: number; resetAt: number };\n  day: { count: number; resetAt: number };\n}\n\nexport interface RateLimitResult {\n  allowed: boolean;\n  limit: number;\n  remaining: number;\n  resetAt: number;\n  retryAfter?: number;\n}\n\n/**\n * Rate Limiter por usuário com múltiplas janelas de tempo\n */\nexport class UserRateLimiter {\n  private static records: Map<string, RateLimitRecord> = new Map();\n\n  /**\n   * Verifica se a requisição está dentro do rate limit\n   */\n  static check(userId: string, tier: UserTier): RateLimitResult {\n    const config = RATE_LIMIT_CONFIGS[tier];\n    const now = Date.now();\n\n    // Busca ou cria record\n    let record = this.records.get(userId);\n    if (!record) {\n      record = this.createRecord(userId, tier);\n      this.records.set(userId, record);\n    }\n\n    // Reseta contadores se necessário\n    this.resetIfNeeded(record, now);\n\n    // Verifica cada limite (minuto, hora, dia)\n    const minuteCheck = this.checkWindow(\n      record.minute,\n      config.limits.perMinute,\n      60 * 1000,\n      now\n    );\n\n    const hourCheck = this.checkWindow(\n      record.hour,\n      config.limits.perHour,\n      60 * 60 * 1000,\n      now\n    );\n\n    const dayCheck = this.checkWindow(\n      record.day,\n      config.limits.perDay,\n      24 * 60 * 60 * 1000,\n      now\n    );\n\n    // Se algum limite foi excedido\n    if (!minuteCheck.allowed || !hourCheck.allowed || !dayCheck.allowed) {\n      // Retorna o limite mais restritivo\n      const mostRestrictive = [minuteCheck, hourCheck, dayCheck]\n        .filter(c => !c.allowed)\n        .sort((a, b) => a.resetAt - b.resetAt)[0];\n\n      log.warn('Rate limit excedido', {\n        userId,\n        tier,\n        limit: mostRestrictive.limit,\n        resetAt: new Date(mostRestrictive.resetAt)\n      });\n\n      return mostRestrictive;\n    }\n\n    // Incrementa contadores\n    record.minute.count++;\n    record.hour.count++;\n    record.day.count++;\n\n    // Retorna limite mais próximo de ser atingido\n    const closest = [minuteCheck, hourCheck, dayCheck]\n      .sort((a, b) => a.remaining - b.remaining)[0];\n\n    return closest;\n  }\n\n  /**\n   * Verifica uma janela de tempo específica\n   */\n  private static checkWindow(\n    window: { count: number; resetAt: number },\n    limit: number,\n    duration: number,\n    now: number\n  ): RateLimitResult {\n    const allowed = window.count < limit;\n    const remaining = Math.max(0, limit - window.count);\n    const retryAfter = allowed ? undefined : Math.ceil((window.resetAt - now) / 1000);\n\n    return {\n      allowed,\n      limit,\n      remaining,\n      resetAt: window.resetAt,\n      retryAfter\n    };\n  }\n\n  /**\n   * Cria novo record para usuário\n   */\n  private static createRecord(userId: string, tier: UserTier): RateLimitRecord {\n    const now = Date.now();\n\n    return {\n      userId,\n      tier,\n      minute: { count: 0, resetAt: now + 60 * 1000 },\n      hour: { count: 0, resetAt: now + 60 * 60 * 1000 },\n      day: { count: 0, resetAt: now + 24 * 60 * 60 * 1000 }\n    };\n  }\n\n  /**\n   * Reseta contadores se janela expirou\n   */\n  private static resetIfNeeded(record: RateLimitRecord, now: number): void {\n    if (now >= record.minute.resetAt) {\n      record.minute.count = 0;\n      record.minute.resetAt = now + 60 * 1000;\n    }\n\n    if (now >= record.hour.resetAt) {\n      record.hour.count = 0;\n      record.hour.resetAt = now + 60 * 60 * 1000;\n    }\n\n    if (now >= record.day.resetAt) {\n      record.day.count = 0;\n      record.day.resetAt = now + 24 * 60 * 60 * 1000;\n    }\n  }\n\n  /**\n   * Limpa records antigos (garbage collection)\n   */\n  static cleanup(): void {\n    const now = Date.now();\n    const threshold = 24 * 60 * 60 * 1000; // 24 horas\n\n    for (const [userId, record] of this.records.entries()) {\n      if (now > record.day.resetAt + threshold) {\n        this.records.delete(userId);\n      }\n    }\n\n    log.debug('Rate limiter cleanup', {\n      recordsRemaining: this.records.size\n    });\n  }\n\n  /**\n   * Retorna estatísticas de uso\n   */\n  static getStats(userId?: string): any {\n    if (userId) {\n      const record = this.records.get(userId);\n      if (!record) return null;\n\n      const config = RATE_LIMIT_CONFIGS[record.tier];\n\n      return {\n        userId: record.userId,\n        tier: record.tier,\n        usage: {\n          minute: {\n            current: record.minute.count,\n            limit: config.limits.perMinute,\n            remaining: config.limits.perMinute - record.minute.count,\n            resetAt: new Date(record.minute.resetAt)\n          },\n          hour: {\n            current: record.hour.count,\n            limit: config.limits.perHour,\n            remaining: config.limits.perHour - record.hour.count,\n            resetAt: new Date(record.hour.resetAt)\n          },\n          day: {\n            current: record.day.count,\n            limit: config.limits.perDay,\n            remaining: config.limits.perDay - record.day.count,\n            resetAt: new Date(record.day.resetAt)\n          }\n        }\n      };\n    }\n\n    // Estatísticas gerais\n    return {\n      totalUsers: this.records.size,\n      byTier: {\n        free: Array.from(this.records.values()).filter(r => r.tier === UserTier.FREE).length,\n        premium: Array.from(this.records.values()).filter(r => r.tier === UserTier.PREMIUM).length,\n        enterprise: Array.from(this.records.values()).filter(r => r.tier === UserTier.ENTERPRISE).length,\n        admin: Array.from(this.records.values()).filter(r => r.tier === UserTier.ADMIN).length,\n      }\n    };\n  }\n\n  /**\n   * Reseta limites de um usuário (admin)\n   */\n  static resetUser(userId: string): void {\n    this.records.delete(userId);\n    log.info('Rate limit resetado', { userId });\n  }\n}\n\n// Cleanup automático a cada hora\nsetInterval(() => {\n  UserRateLimiter.cleanup();\n}, 60 * 60 * 1000);"],"version":3}