8a6f9e6465ff5c947af9b7ca76bd1b52
"use strict";
// @ts-nocheck
// src/shared/utils/retry.ts
Object.defineProperty(exports, "__esModule", { value: true });
exports.retryWithBackoff = retryWithBackoff;
exports.isRetryableError = isRetryableError;
exports.retryOnRetryableError = retryOnRetryableError;
const logger_1 = require("./logger");
const DEFAULT_OPTIONS = {
    maxAttempts: 3,
    initialDelay: 1000,
    maxDelay: 10000,
    backoffFactor: 2,
    jitter: true,
};
/**
 * Executa uma função com retry e exponential backoff
 *
 * @param fn Função async a ser executada
 * @param options Opções de retry
 * @param context Contexto para logs (ex: "SQL Server EMP")
 * @returns Resultado da função ou lança erro após todas as tentativas
 *
 * @example
 * ```typescript
 * const result = await retryWithBackoff(
 *   () => pool.connect(),
 *   { maxAttempts: 5, initialDelay: 1000 },
 *   'SQL Server Connection'
 * );
 * ```
 */
async function retryWithBackoff(fn, options = {}, context = 'Operation') {
    const opts = { ...DEFAULT_OPTIONS, ...options };
    let lastError = null;
    let delay = opts.initialDelay;
    for (let attempt = 1; attempt <= opts.maxAttempts; attempt++) {
        try {
            logger_1.log.debug(`${context}: Tentativa ${attempt}/${opts.maxAttempts}`, {
                attempt,
                maxAttempts: opts.maxAttempts,
            });
            const result = await fn();
            if (attempt > 1) {
                logger_1.log.info(`${context}: Sucesso na tentativa ${attempt}`, { attempt });
            }
            return result;
        }
        catch (error) {
            lastError = error;
            if (attempt === opts.maxAttempts) {
                logger_1.log.error(`${context}: Falhou após ${opts.maxAttempts} tentativas`, {
                    error: lastError.message,
                    attempts: opts.maxAttempts,
                });
                throw lastError;
            }
            // Calcular próximo delay com exponential backoff
            const nextDelay = calculateDelay(delay, opts);
            logger_1.log.warn(`${context}: Tentativa ${attempt} falhou, retry em ${nextDelay}ms`, {
                attempt,
                error: lastError.message,
                nextDelay,
                nextAttempt: attempt + 1,
            });
            // Callback opcional
            if (opts.onRetry) {
                opts.onRetry(lastError, attempt, nextDelay);
            }
            // Aguardar antes do próximo retry
            await sleep(nextDelay);
            // Atualizar delay para próxima iteração
            delay = Math.min(delay * opts.backoffFactor, opts.maxDelay);
        }
    }
    // Nunca deve chegar aqui, mas TypeScript precisa
    throw lastError || new Error(`${context}: Retry failed`);
}
/**
 * Calcula delay com exponential backoff e jitter opcional
 */
function calculateDelay(currentDelay, options) {
    let nextDelay = currentDelay;
    // Adicionar jitter (aleatoriedade) se habilitado
    if (options.jitter) {
        // Jitter entre 50% e 150% do delay
        const jitterFactor = 0.5 + Math.random();
        nextDelay = Math.floor(currentDelay * jitterFactor);
    }
    // Garantir que não excede maxDelay
    return Math.min(nextDelay, options.maxDelay);
}
/**
 * Helper para aguardar um tempo
 */
function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}
/**
 * Verifica se um erro é retryable (temporário)
 */
function isRetryableError(error) {
    const retryablePatterns = [
        /ECONNREFUSED/i,
        /ETIMEDOUT/i,
        /ENOTFOUND/i,
        /EHOSTUNREACH/i,
        /ENETUNREACH/i,
        /timeout/i,
        /connection.*closed/i,
        /connection.*reset/i,
        /socket hang up/i,
    ];
    const errorMessage = error.message || '';
    return retryablePatterns.some(pattern => pattern.test(errorMessage));
}
/**
 * Retry apenas para erros retryable
 */
async function retryOnRetryableError(fn, options = {}, context = 'Operation') {
    return retryWithBackoff(fn, {
        ...options,
        onRetry: (error, attempt, delay) => {
            // Só retry se for erro retryable
            if (!isRetryableError(error)) {
                throw error; // Lança imediatamente se não for retryable
            }
            options.onRetry?.(error, attempt, delay);
        },
    }, context);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,