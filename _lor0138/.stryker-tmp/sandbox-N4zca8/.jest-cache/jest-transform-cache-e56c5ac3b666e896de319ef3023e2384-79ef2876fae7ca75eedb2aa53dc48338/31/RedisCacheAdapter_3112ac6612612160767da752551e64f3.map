{"file":"/home/mano/projetos/datasul/lor0138/.stryker-tmp/sandbox-N4zca8/src/shared/utils/cache/RedisCacheAdapter.ts","mappings":"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","names":[],"sources":["/home/mano/projetos/datasul/lor0138/.stryker-tmp/sandbox-N4zca8/src/shared/utils/cache/RedisCacheAdapter.ts"],"sourcesContent":["// @ts-nocheck\n// src/shared/utils/cache/RedisCacheAdapter.ts\n\nimport Redis from 'ioredis';\nimport type { RedisOptions } from 'ioredis';\nimport { CacheAdapter } from './CacheAdapter';\nimport { log } from '../logger';\n\n/**\n * Adaptador de cache Redis (L2)\n * - Compartilhado entre múltiplas instâncias\n * - Persistente (sobrevive a restarts)\n * - Um pouco mais lento que memória (rede)\n */\nexport class RedisCacheAdapter implements CacheAdapter {\n  private redis: Redis;\n  private name: string;\n  private ready: boolean = false;\n\n  constructor(urlOrOptions: string | RedisOptions, name: string = 'L2-Redis') {\n    this.name = name;\n\n    // Aceita URL ou objeto de configuração\n    if (typeof urlOrOptions === 'string') {\n      this.redis = new Redis(urlOrOptions, {\n        retryStrategy: (times) => {\n          const delay = Math.min(times * 50, 2000);\n          log.warn(`${this.name} reconectando...`, { attempt: times, delay });\n          return delay;\n        },\n        maxRetriesPerRequest: 3,\n        enableReadyCheck: true,\n        lazyConnect: false\n      });\n    } else {\n      this.redis = new Redis(urlOrOptions);\n    }\n\n    this.setupEventHandlers();\n  }\n\n  private setupEventHandlers(): void {\n    this.redis.on('connect', () => {\n      log.info(`${this.name} conectando...`);\n    });\n\n    this.redis.on('ready', () => {\n      this.ready = true;\n      log.info(`${this.name} pronto`, {\n        host: this.redis.options.host,\n        port: this.redis.options.port\n      });\n    });\n\n    this.redis.on('error', (error) => {\n      log.error(`${this.name} erro`, { error: error.message });\n    });\n\n    this.redis.on('close', () => {\n      this.ready = false;\n      log.warn(`${this.name} conexão fechada`);\n    });\n\n    this.redis.on('reconnecting', () => {\n      log.info(`${this.name} reconectando...`);\n    });\n  }\n\n  async get<T>(key: string): Promise<T | undefined> {\n    try {\n      if (!this.ready) {\n        log.warn(`${this.name} não está pronto`, { key });\n        return undefined;\n      }\n\n      const value = await this.redis.get(key);\n\n      if (value) {\n        log.debug(`${this.name} HIT`, { key });\n        return JSON.parse(value) as T;\n      }\n\n      log.debug(`${this.name} MISS`, { key });\n      return undefined;\n    } catch (error) {\n      log.error(`${this.name} GET error`, { key, error });\n      return undefined;\n    }\n  }\n\n  async set<T>(key: string, value: T, ttl?: number): Promise<boolean> {\n    try {\n      if (!this.ready) {\n        log.warn(`${this.name} não está pronto`, { key });\n        return false;\n      }\n\n      const serialized = JSON.stringify(value);\n\n      if (ttl && ttl > 0) {\n        // SETEX: Set com expiração\n        await this.redis.setex(key, ttl, serialized);\n      } else {\n        // SET: Sem expiração\n        await this.redis.set(key, serialized);\n      }\n\n      log.debug(`${this.name} SET`, { key, ttl });\n      return true;\n    } catch (error) {\n      log.error(`${this.name} SET error`, { key, error });\n      return false;\n    }\n  }\n\n  async delete(key: string): Promise<number> {\n    try {\n      if (!this.ready) {\n        log.warn(`${this.name} não está pronto`, { key });\n        return 0;\n      }\n\n      const deleted = await this.redis.del(key);\n      log.debug(`${this.name} DELETE`, { key, deleted });\n      return deleted;\n    } catch (error) {\n      log.error(`${this.name} DELETE error`, { key, error });\n      return 0;\n    }\n  }\n\n  async flush(): Promise<void> {\n    try {\n      if (!this.ready) {\n        log.warn(`${this.name} não está pronto`);\n        return;\n      }\n\n      await this.redis.flushall();\n      log.info(`${this.name} FLUSH ALL`);\n    } catch (error) {\n      log.error(`${this.name} FLUSH error`, { error });\n    }\n  }\n\n  async keys(pattern: string = '*'): Promise<string[]> {\n    try {\n      if (!this.ready) {\n        log.warn(`${this.name} não está pronto`);\n        return [];\n      }\n\n      // SCAN é mais seguro que KEYS em produção\n      const keys: string[] = [];\n      let cursor = '0';\n\n      do {\n        const [nextCursor, foundKeys] = await this.redis.scan(\n          cursor,\n          'MATCH',\n          pattern,\n          'COUNT',\n          100\n        );\n\n        cursor = nextCursor;\n        keys.push(...foundKeys);\n      } while (cursor !== '0');\n\n      return keys;\n    } catch (error) {\n      log.error(`${this.name} KEYS error`, { pattern, error });\n      return [];\n    }\n  }\n\n  async isReady(): Promise<boolean> {\n    return this.ready;\n  }\n\n  async close(): Promise<void> {\n    try {\n      await this.redis.quit();\n      this.ready = false;\n      log.info(`${this.name} fechado`);\n    } catch (error) {\n      log.error(`${this.name} CLOSE error`, { error });\n    }\n  }\n\n  /**\n   * Métodos extras específicos do Redis\n   */\n  async ping(): Promise<string> {\n    return this.redis.ping();\n  }\n\n  async info(): Promise<string> {\n    return this.redis.info();\n  }\n\n  getClient(): Redis {\n    return this.redis;\n  }\n}"],"version":3}