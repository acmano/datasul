e88647f085fb5ee9c5eda54fe6ff94c4
"use strict";
// @ts-nocheck
// src/shared/utils/cache/MemoryCacheAdapter.ts
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MemoryCacheAdapter = void 0;
const node_cache_1 = __importDefault(require("node-cache"));
const logger_1 = require("../logger");
/**
 * Adaptador de cache em memória (L1)
 * - Ultra rápido (acesso local)
 * - Volátil (perde dados ao reiniciar)
 * - Não compartilhado entre instâncias
 */
class MemoryCacheAdapter {
    constructor(stdTTL = 300, name = 'L1-Memory') {
        this.cache = new node_cache_1.default({
            stdTTL,
            checkperiod: 120, // Verifica expiração a cada 2min
            useClones: false // Performance: não clona objetos
        });
        this.name = name;
        logger_1.log.info(`${this.name} cache inicializado`, {
            ttl: stdTTL,
            checkPeriod: 120
        });
    }
    async get(key) {
        try {
            const value = this.cache.get(key);
            if (value !== undefined) {
                logger_1.log.debug(`${this.name} HIT`, { key });
            }
            else {
                logger_1.log.debug(`${this.name} MISS`, { key });
            }
            return value;
        }
        catch (error) {
            logger_1.log.error(`${this.name} GET error`, { key, error });
            return undefined;
        }
    }
    async set(key, value, ttl) {
        try {
            const success = ttl
                ? this.cache.set(key, value, ttl)
                : this.cache.set(key, value);
            if (success) {
                logger_1.log.debug(`${this.name} SET`, { key, ttl });
            }
            return success;
        }
        catch (error) {
            logger_1.log.error(`${this.name} SET error`, { key, error });
            return false;
        }
    }
    async delete(key) {
        try {
            const deleted = this.cache.del(key);
            logger_1.log.debug(`${this.name} DELETE`, { key, deleted });
            return deleted;
        }
        catch (error) {
            logger_1.log.error(`${this.name} DELETE error`, { key, error });
            return 0;
        }
    }
    async flush() {
        try {
            this.cache.flushAll();
            logger_1.log.info(`${this.name} FLUSH ALL`);
        }
        catch (error) {
            logger_1.log.error(`${this.name} FLUSH error`, { error });
        }
    }
    async keys(pattern) {
        try {
            const allKeys = this.cache.keys();
            if (!pattern) {
                return allKeys;
            }
            // Converte pattern com * para regex
            const regex = new RegExp('^' + pattern.replace(/\*/g, '.*') + '$');
            return allKeys.filter(key => regex.test(key));
        }
        catch (error) {
            logger_1.log.error(`${this.name} KEYS error`, { pattern, error });
            return [];
        }
    }
    async isReady() {
        return true; // Memória sempre está pronta
    }
    async close() {
        try {
            this.cache.close();
            logger_1.log.info(`${this.name} fechado`);
        }
        catch (error) {
            logger_1.log.error(`${this.name} CLOSE error`, { error });
        }
    }
    /**
     * Métodos extras específicos do NodeCache
     */
    getStats() {
        return this.cache.getStats();
    }
    getTtl(key) {
        return this.cache.getTtl(key);
    }
}
exports.MemoryCacheAdapter = MemoryCacheAdapter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,