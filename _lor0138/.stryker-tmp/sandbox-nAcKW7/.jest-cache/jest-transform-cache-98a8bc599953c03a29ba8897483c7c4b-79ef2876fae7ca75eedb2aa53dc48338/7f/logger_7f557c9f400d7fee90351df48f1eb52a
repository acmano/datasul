1b037caded51a2f7a5158c275242f686
"use strict";
// src/shared/utils/logger.ts
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.log = void 0;
const winston_1 = __importDefault(require("winston"));
const winston_daily_rotate_file_1 = __importDefault(require("winston-daily-rotate-file"));
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const logDir = 'logs';
// Cria diretório de logs se não existir
if (!fs_1.default.existsSync(logDir)) {
    fs_1.default.mkdirSync(logDir, { recursive: true });
}
// Formatos customizados
const logFormat = winston_1.default.format.combine(winston_1.default.format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }), winston_1.default.format.errors({ stack: true }), winston_1.default.format.splat(), winston_1.default.format.json());
// Formato para console (mais legível)
const consoleFormat = winston_1.default.format.combine(winston_1.default.format.colorize(), winston_1.default.format.timestamp({ format: 'HH:mm:ss' }), winston_1.default.format.printf(({ timestamp, level, message, ...meta }) => {
    let msg = `${timestamp} [${level}] ${message}`;
    if (Object.keys(meta).length > 0) {
        msg += ` ${JSON.stringify(meta)}`;
    }
    return msg;
}));
// Transportes (onde os logs vão)
const transports = [
    // Console (sempre ativo)
    new winston_1.default.transports.Console({
        format: consoleFormat,
        level: process.env.LOG_LEVEL || 'info',
    }),
];
// ✅ MUDANÇA: Logs em arquivo também em desenvolvimento
if (process.env.NODE_ENV !== 'test') {
    // Logs de erro em arquivo separado
    transports.push(new winston_daily_rotate_file_1.default({
        filename: path_1.default.join(logDir, 'error-%DATE%.log'),
        datePattern: 'YYYY-MM-DD',
        level: 'error',
        maxSize: '20m',
        maxFiles: '30d',
        format: logFormat,
    }));
    // Todos os logs combinados
    transports.push(new winston_daily_rotate_file_1.default({
        filename: path_1.default.join(logDir, 'app-%DATE%.log'),
        datePattern: 'YYYY-MM-DD',
        maxSize: '20m',
        maxFiles: '14d',
        format: logFormat,
    }));
}
// Cria o logger
const logger = winston_1.default.createLogger({
    level: process.env.LOG_LEVEL || 'info',
    format: logFormat,
    transports,
    exitOnError: false,
});
// Funções auxiliares tipadas
exports.log = {
    error: (message, context) => {
        logger.error(message, context);
    },
    warn: (message, context) => {
        logger.warn(message, context);
    },
    info: (message, context) => {
        logger.info(message, context);
    },
    http: (message, context) => {
        logger.http(message, context);
    },
    debug: (message, context) => {
        logger.debug(message, context);
    },
};
exports.default = logger;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvbWFuby9wcm9qZXRvcy9kYXRhc3VsL2xvcjAxMzgvc3JjL3NoYXJlZC91dGlscy9sb2dnZXIudHMiLCJtYXBwaW5ncyI6IjtBQUFBLDZCQUE2Qjs7Ozs7O0FBRTdCLHNEQUE4QjtBQUM5QiwwRkFBd0Q7QUFDeEQsZ0RBQXdCO0FBQ3hCLDRDQUFvQjtBQUVwQixNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUM7QUFFdEIsd0NBQXdDO0FBQ3hDLElBQUksQ0FBQyxZQUFFLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7SUFDM0IsWUFBRSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUM1QyxDQUFDO0FBRUQsd0JBQXdCO0FBQ3hCLE1BQU0sU0FBUyxHQUFHLGlCQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FDdEMsaUJBQU8sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEVBQUUsTUFBTSxFQUFFLHFCQUFxQixFQUFFLENBQUMsRUFDM0QsaUJBQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQ3RDLGlCQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxFQUN0QixpQkFBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FDdEIsQ0FBQztBQUVGLHNDQUFzQztBQUN0QyxNQUFNLGFBQWEsR0FBRyxpQkFBTyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQzFDLGlCQUFPLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxFQUN6QixpQkFBTyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLENBQUMsRUFDaEQsaUJBQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxHQUFHLElBQUksRUFBRSxFQUFFLEVBQUU7SUFDL0QsSUFBSSxHQUFHLEdBQUcsR0FBRyxTQUFTLEtBQUssS0FBSyxLQUFLLE9BQU8sRUFBRSxDQUFDO0lBQy9DLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUM7UUFDakMsR0FBRyxJQUFJLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO0lBQ3BDLENBQUM7SUFDRCxPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUMsQ0FBQyxDQUNILENBQUM7QUFFRixpQ0FBaUM7QUFDakMsTUFBTSxVQUFVLEdBQXdCO0lBQ3RDLHlCQUF5QjtJQUN6QixJQUFJLGlCQUFPLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQztRQUM3QixNQUFNLEVBQUUsYUFBYTtRQUNyQixLQUFLLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLElBQUksTUFBTTtLQUN2QyxDQUFDO0NBQ0gsQ0FBQztBQUVGLHVEQUF1RDtBQUN2RCxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxLQUFLLE1BQU0sRUFBRSxDQUFDO0lBQ3BDLG1DQUFtQztJQUNuQyxVQUFVLENBQUMsSUFBSSxDQUNiLElBQUksbUNBQWUsQ0FBQztRQUNsQixRQUFRLEVBQUUsY0FBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsa0JBQWtCLENBQUM7UUFDL0MsV0FBVyxFQUFFLFlBQVk7UUFDekIsS0FBSyxFQUFFLE9BQU87UUFDZCxPQUFPLEVBQUUsS0FBSztRQUNkLFFBQVEsRUFBRSxLQUFLO1FBQ2YsTUFBTSxFQUFFLFNBQVM7S0FDbEIsQ0FBQyxDQUNILENBQUM7SUFFRiwyQkFBMkI7SUFDM0IsVUFBVSxDQUFDLElBQUksQ0FDYixJQUFJLG1DQUFlLENBQUM7UUFDbEIsUUFBUSxFQUFFLGNBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLGdCQUFnQixDQUFDO1FBQzdDLFdBQVcsRUFBRSxZQUFZO1FBQ3pCLE9BQU8sRUFBRSxLQUFLO1FBQ2QsUUFBUSxFQUFFLEtBQUs7UUFDZixNQUFNLEVBQUUsU0FBUztLQUNsQixDQUFDLENBQ0gsQ0FBQztBQUNKLENBQUM7QUFFRCxnQkFBZ0I7QUFDaEIsTUFBTSxNQUFNLEdBQUcsaUJBQU8sQ0FBQyxZQUFZLENBQUM7SUFDbEMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxJQUFJLE1BQU07SUFDdEMsTUFBTSxFQUFFLFNBQVM7SUFDakIsVUFBVTtJQUNWLFdBQVcsRUFBRSxLQUFLO0NBQ25CLENBQUMsQ0FBQztBQWVILDZCQUE2QjtBQUNoQixRQUFBLEdBQUcsR0FBRztJQUNqQixLQUFLLEVBQUUsQ0FBQyxPQUFlLEVBQUUsT0FBb0IsRUFBRSxFQUFFO1FBQy9DLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFFRCxJQUFJLEVBQUUsQ0FBQyxPQUFlLEVBQUUsT0FBb0IsRUFBRSxFQUFFO1FBQzlDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFRCxJQUFJLEVBQUUsQ0FBQyxPQUFlLEVBQUUsT0FBb0IsRUFBRSxFQUFFO1FBQzlDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFRCxJQUFJLEVBQUUsQ0FBQyxPQUFlLEVBQUUsT0FBb0IsRUFBRSxFQUFFO1FBQzlDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFRCxLQUFLLEVBQUUsQ0FBQyxPQUFlLEVBQUUsT0FBb0IsRUFBRSxFQUFFO1FBQy9DLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ2pDLENBQUM7Q0FDRixDQUFDO0FBRUYsa0JBQWUsTUFBTSxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9ob21lL21hbm8vcHJvamV0b3MvZGF0YXN1bC9sb3IwMTM4L3NyYy9zaGFyZWQvdXRpbHMvbG9nZ2VyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9zaGFyZWQvdXRpbHMvbG9nZ2VyLnRzXG5cbmltcG9ydCB3aW5zdG9uIGZyb20gJ3dpbnN0b24nO1xuaW1wb3J0IERhaWx5Um90YXRlRmlsZSBmcm9tICd3aW5zdG9uLWRhaWx5LXJvdGF0ZS1maWxlJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IGZzIGZyb20gJ2ZzJztcblxuY29uc3QgbG9nRGlyID0gJ2xvZ3MnO1xuXG4vLyBDcmlhIGRpcmV0w7NyaW8gZGUgbG9ncyBzZSBuw6NvIGV4aXN0aXJcbmlmICghZnMuZXhpc3RzU3luYyhsb2dEaXIpKSB7XG4gIGZzLm1rZGlyU3luYyhsb2dEaXIsIHsgcmVjdXJzaXZlOiB0cnVlIH0pO1xufVxuXG4vLyBGb3JtYXRvcyBjdXN0b21pemFkb3NcbmNvbnN0IGxvZ0Zvcm1hdCA9IHdpbnN0b24uZm9ybWF0LmNvbWJpbmUoXG4gIHdpbnN0b24uZm9ybWF0LnRpbWVzdGFtcCh7IGZvcm1hdDogJ1lZWVktTU0tREQgSEg6bW06c3MnIH0pLFxuICB3aW5zdG9uLmZvcm1hdC5lcnJvcnMoeyBzdGFjazogdHJ1ZSB9KSxcbiAgd2luc3Rvbi5mb3JtYXQuc3BsYXQoKSxcbiAgd2luc3Rvbi5mb3JtYXQuanNvbigpXG4pO1xuXG4vLyBGb3JtYXRvIHBhcmEgY29uc29sZSAobWFpcyBsZWfDrXZlbClcbmNvbnN0IGNvbnNvbGVGb3JtYXQgPSB3aW5zdG9uLmZvcm1hdC5jb21iaW5lKFxuICB3aW5zdG9uLmZvcm1hdC5jb2xvcml6ZSgpLFxuICB3aW5zdG9uLmZvcm1hdC50aW1lc3RhbXAoeyBmb3JtYXQ6ICdISDptbTpzcycgfSksXG4gIHdpbnN0b24uZm9ybWF0LnByaW50ZigoeyB0aW1lc3RhbXAsIGxldmVsLCBtZXNzYWdlLCAuLi5tZXRhIH0pID0+IHtcbiAgICBsZXQgbXNnID0gYCR7dGltZXN0YW1wfSBbJHtsZXZlbH1dICR7bWVzc2FnZX1gO1xuICAgIGlmIChPYmplY3Qua2V5cyhtZXRhKS5sZW5ndGggPiAwKSB7XG4gICAgICBtc2cgKz0gYCAke0pTT04uc3RyaW5naWZ5KG1ldGEpfWA7XG4gICAgfVxuICAgIHJldHVybiBtc2c7XG4gIH0pXG4pO1xuXG4vLyBUcmFuc3BvcnRlcyAob25kZSBvcyBsb2dzIHbDo28pXG5jb25zdCB0cmFuc3BvcnRzOiB3aW5zdG9uLnRyYW5zcG9ydFtdID0gW1xuICAvLyBDb25zb2xlIChzZW1wcmUgYXRpdm8pXG4gIG5ldyB3aW5zdG9uLnRyYW5zcG9ydHMuQ29uc29sZSh7XG4gICAgZm9ybWF0OiBjb25zb2xlRm9ybWF0LFxuICAgIGxldmVsOiBwcm9jZXNzLmVudi5MT0dfTEVWRUwgfHwgJ2luZm8nLFxuICB9KSxcbl07XG5cbi8vIOKchSBNVURBTsOHQTogTG9ncyBlbSBhcnF1aXZvIHRhbWLDqW0gZW0gZGVzZW52b2x2aW1lbnRvXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICd0ZXN0Jykge1xuICAvLyBMb2dzIGRlIGVycm8gZW0gYXJxdWl2byBzZXBhcmFkb1xuICB0cmFuc3BvcnRzLnB1c2goXG4gICAgbmV3IERhaWx5Um90YXRlRmlsZSh7XG4gICAgICBmaWxlbmFtZTogcGF0aC5qb2luKGxvZ0RpciwgJ2Vycm9yLSVEQVRFJS5sb2cnKSxcbiAgICAgIGRhdGVQYXR0ZXJuOiAnWVlZWS1NTS1ERCcsXG4gICAgICBsZXZlbDogJ2Vycm9yJyxcbiAgICAgIG1heFNpemU6ICcyMG0nLFxuICAgICAgbWF4RmlsZXM6ICczMGQnLFxuICAgICAgZm9ybWF0OiBsb2dGb3JtYXQsXG4gICAgfSlcbiAgKTtcblxuICAvLyBUb2RvcyBvcyBsb2dzIGNvbWJpbmFkb3NcbiAgdHJhbnNwb3J0cy5wdXNoKFxuICAgIG5ldyBEYWlseVJvdGF0ZUZpbGUoe1xuICAgICAgZmlsZW5hbWU6IHBhdGguam9pbihsb2dEaXIsICdhcHAtJURBVEUlLmxvZycpLFxuICAgICAgZGF0ZVBhdHRlcm46ICdZWVlZLU1NLUREJyxcbiAgICAgIG1heFNpemU6ICcyMG0nLFxuICAgICAgbWF4RmlsZXM6ICcxNGQnLFxuICAgICAgZm9ybWF0OiBsb2dGb3JtYXQsXG4gICAgfSlcbiAgKTtcbn1cblxuLy8gQ3JpYSBvIGxvZ2dlclxuY29uc3QgbG9nZ2VyID0gd2luc3Rvbi5jcmVhdGVMb2dnZXIoe1xuICBsZXZlbDogcHJvY2Vzcy5lbnYuTE9HX0xFVkVMIHx8ICdpbmZvJyxcbiAgZm9ybWF0OiBsb2dGb3JtYXQsXG4gIHRyYW5zcG9ydHMsXG4gIGV4aXRPbkVycm9yOiBmYWxzZSxcbn0pO1xuXG4vLyBIZWxwZXIgcGFyYSBhZGljaW9uYXIgY29udGV4dG8gw6BzIG1lbnNhZ2Vuc1xuZXhwb3J0IGludGVyZmFjZSBMb2dDb250ZXh0IHtcbiAgcmVxdWVzdElkPzogc3RyaW5nO1xuICB1c2VySWQ/OiBzdHJpbmc7XG4gIGl0ZW1Db2RpZ28/OiBzdHJpbmc7XG4gIGlwPzogc3RyaW5nO1xuICBtZXRob2Q/OiBzdHJpbmc7XG4gIHVybD86IHN0cmluZztcbiAgc3RhdHVzQ29kZT86IG51bWJlcjtcbiAgZHVyYXRpb24/OiBudW1iZXI7XG4gIFtrZXk6IHN0cmluZ106IGFueTtcbn1cblxuLy8gRnVuw6fDtWVzIGF1eGlsaWFyZXMgdGlwYWRhc1xuZXhwb3J0IGNvbnN0IGxvZyA9IHtcbiAgZXJyb3I6IChtZXNzYWdlOiBzdHJpbmcsIGNvbnRleHQ/OiBMb2dDb250ZXh0KSA9PiB7XG4gICAgbG9nZ2VyLmVycm9yKG1lc3NhZ2UsIGNvbnRleHQpO1xuICB9LFxuXG4gIHdhcm46IChtZXNzYWdlOiBzdHJpbmcsIGNvbnRleHQ/OiBMb2dDb250ZXh0KSA9PiB7XG4gICAgbG9nZ2VyLndhcm4obWVzc2FnZSwgY29udGV4dCk7XG4gIH0sXG5cbiAgaW5mbzogKG1lc3NhZ2U6IHN0cmluZywgY29udGV4dD86IExvZ0NvbnRleHQpID0+IHtcbiAgICBsb2dnZXIuaW5mbyhtZXNzYWdlLCBjb250ZXh0KTtcbiAgfSxcblxuICBodHRwOiAobWVzc2FnZTogc3RyaW5nLCBjb250ZXh0PzogTG9nQ29udGV4dCkgPT4ge1xuICAgIGxvZ2dlci5odHRwKG1lc3NhZ2UsIGNvbnRleHQpO1xuICB9LFxuXG4gIGRlYnVnOiAobWVzc2FnZTogc3RyaW5nLCBjb250ZXh0PzogTG9nQ29udGV4dCkgPT4ge1xuICAgIGxvZ2dlci5kZWJ1ZyhtZXNzYWdlLCBjb250ZXh0KTtcbiAgfSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGxvZ2dlcjsiXSwidmVyc2lvbiI6M30=