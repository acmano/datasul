9fb3ca2cc7de127a463e3d77fc39daa0
"use strict";
// src/infrastructure/database/connections/SqlServerConnection.ts
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SqlServerConnection = void 0;
const mssql_1 = __importDefault(require("mssql"));
const logger_1 = require("@shared/utils/logger");
const retry_1 = require("@shared/utils/retry");
const env_config_1 = require("@config/env.config");
class SqlServerConnection {
    constructor(config, name = 'SQL Server') {
        this.pool = null;
        this.config = config;
        this.name = name;
    }
    async connect() {
        const context = `${this.name} (SQL Server)`;
        logger_1.log.info(`Conectando ${context}...`);
        logger_1.log.debug('🔍 DEBUG - Config recebida:', {
            server: this.config.server,
            user: this.config.user,
            password: '*********',
            database: this.config.database,
            port: this.config.port,
        });
        const sqlConfig = {
            server: this.config.server || '',
            port: this.config.port || 1433,
            user: this.config.user || '',
            password: this.config.password || '',
            database: this.config.database || '',
            connectionTimeout: this.config.connectionTimeout || 15000,
            requestTimeout: this.config.requestTimeout || 30000,
            options: {
                encrypt: this.config.encrypt ?? false,
                trustServerCertificate: this.config.trustServerCertificate ?? true,
                enableArithAbort: true,
            },
            pool: {
                max: 10,
                min: 0,
                idleTimeoutMillis: 30000,
            },
        };
        // ✅ NOVO: Retry com backoff exponencial
        const retryOptions = {
            maxAttempts: env_config_1.config.database.retry.maxAttempts,
            initialDelay: env_config_1.config.database.retry.initialDelay,
            maxDelay: env_config_1.config.database.retry.maxDelay,
            backoffFactor: env_config_1.config.database.retry.backoffFactor,
            jitter: true,
            onRetry: (error, attempt, delay) => {
                // Só retry em erros de conexão
                if (!(0, retry_1.isRetryableError)(error)) {
                    logger_1.log.error(`${context}: Erro não-retryable, abortando`, {
                        error: error.message,
                        attempt,
                    });
                    throw error;
                }
            },
        };
        try {
            this.pool = await (0, retry_1.retryWithBackoff)(async () => {
                const pool = new mssql_1.default.ConnectionPool(sqlConfig);
                // ✅ CRITICAL: Timeout manual para forçar erro se travar
                const connectPromise = pool.connect();
                const timeoutPromise = new Promise((_, reject) => {
                    setTimeout(() => {
                        reject(new Error(`Connection timeout after ${sqlConfig.connectionTimeout}ms`));
                    }, sqlConfig.connectionTimeout);
                });
                // Race: o que resolver/rejeitar primeiro ganha
                await Promise.race([connectPromise, timeoutPromise]);
                return pool;
            }, retryOptions, context);
            logger_1.log.info(`${context} conectado`);
        }
        catch (error) {
            logger_1.log.error(`${context}: Falha após todas as tentativas de retry`, {
                error: error instanceof Error ? error.message : 'Erro desconhecido',
                maxAttempts: retryOptions.maxAttempts,
            });
            throw error;
        }
    }
    async query(sql) {
        if (!this.pool) {
            throw new Error(`${this.name}: Pool não inicializado`);
        }
        try {
            const result = await this.pool.request().query(sql);
            return result.recordset;
        }
        catch (error) {
            logger_1.log.error(`${this.name}: Erro na query`, {
                error: error instanceof Error ? error.message : 'Erro desconhecido',
                sql: sql.substring(0, 100), // Log apenas início da query
            });
            throw error;
        }
    }
    async queryWithParams(sql, params) {
        if (!this.pool) {
            throw new Error(`${this.name}: Pool não inicializado`);
        }
        try {
            const request = this.pool.request();
            // Adicionar parâmetros
            params.forEach(param => {
                const sqlType = this.getSqlType(param.type);
                request.input(param.name, sqlType, param.value);
            });
            const result = await request.query(sql);
            return result.recordset;
        }
        catch (error) {
            logger_1.log.error(`${this.name}: Erro na query parametrizada`, {
                error: error instanceof Error ? error.message : 'Erro desconhecido',
                params: params.map(p => ({ name: p.name, type: p.type })),
            });
            throw error;
        }
    }
    async close() {
        if (this.pool) {
            await this.pool.close();
            this.pool = null;
            logger_1.log.info(`${this.name} desconectado`);
        }
    }
    isConnected() {
        return this.pool !== null;
    }
    async healthCheck() {
        const startTime = Date.now();
        try {
            if (!this.pool) {
                return { connected: false, responseTime: 0 };
            }
            await this.pool.request().query('SELECT 1 AS health');
            const responseTime = Date.now() - startTime;
            return { connected: true, responseTime };
        }
        catch (error) {
            logger_1.log.error(`${this.name}: Health check falhou`, {
                error: error instanceof Error ? error.message : 'Erro desconhecido',
            });
            return { connected: false, responseTime: Date.now() - startTime };
        }
    }
    getSqlType(type) {
        const typeMap = {
            varchar: mssql_1.default.VarChar,
            int: mssql_1.default.Int,
            bigint: mssql_1.default.BigInt,
            float: mssql_1.default.Float,
            decimal: mssql_1.default.Decimal,
            datetime: mssql_1.default.DateTime,
            bit: mssql_1.default.Bit,
        };
        return typeMap[type.toLowerCase()] || mssql_1.default.VarChar;
    }
}
exports.SqlServerConnection = SqlServerConnection;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,