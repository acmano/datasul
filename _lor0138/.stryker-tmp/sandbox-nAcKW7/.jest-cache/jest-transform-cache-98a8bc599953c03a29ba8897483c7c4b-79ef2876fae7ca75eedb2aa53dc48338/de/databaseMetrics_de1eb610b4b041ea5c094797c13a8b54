d53801cf9de72c7ca2baf3cca73fcf31
"use strict";
// src/infrastructure/metrics/helpers/databaseMetrics.ts
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatabaseMetricsHelper = void 0;
const MetricsManager_1 = require("../MetricsManager");
/**
 * Helper para instrumentar queries e coletar métricas de banco de dados
 */
class DatabaseMetricsHelper {
    /**
     * Detecta o tipo de operação SQL
     */
    static detectOperation(sql) {
        const normalizedSql = sql.trim().toUpperCase();
        if (normalizedSql.startsWith('SELECT'))
            return 'select';
        if (normalizedSql.startsWith('INSERT'))
            return 'insert';
        if (normalizedSql.startsWith('UPDATE'))
            return 'update';
        if (normalizedSql.startsWith('DELETE'))
            return 'delete';
        return 'other';
    }
    /**
     * Executa uma query e coleta métricas automaticamente
     */
    static async instrumentQuery(database, sql, queryFn) {
        const operation = this.detectOperation(sql);
        const startTime = Date.now();
        // Incrementa queries em progresso
        MetricsManager_1.metricsManager.dbQueriesInProgress.inc({ database });
        try {
            const result = await queryFn();
            // Sucesso - registra métricas
            const duration = (Date.now() - startTime) / 1000; // segundos
            MetricsManager_1.metricsManager.dbQueriesTotal.inc({ database, operation });
            MetricsManager_1.metricsManager.dbQueryDuration.observe({ database, operation }, duration);
            return result;
        }
        catch (error) {
            // Erro - registra métrica de erro
            const errorType = this.classifyError(error);
            MetricsManager_1.metricsManager.dbQueryErrors.inc({ database, error_type: errorType });
            throw error;
        }
        finally {
            // Decrementa queries em progresso
            MetricsManager_1.metricsManager.dbQueriesInProgress.dec({ database });
        }
    }
    /**
     * Classifica o tipo de erro
     */
    static classifyError(error) {
        const message = error?.message?.toLowerCase() || '';
        if (message.includes('timeout'))
            return 'timeout';
        if (message.includes('connection'))
            return 'connection';
        if (message.includes('syntax'))
            return 'syntax';
        if (message.includes('permission') || message.includes('denied'))
            return 'permission';
        if (message.includes('deadlock'))
            return 'deadlock';
        return 'unknown';
    }
    /**
     * Registra erro de conexão
     */
    static recordConnectionError(database, error) {
        const errorType = this.classifyError(error);
        MetricsManager_1.metricsManager.dbConnectionErrors.inc({ database, error_type: errorType });
    }
    /**
     * Atualiza o gauge de conexões ativas
     */
    static setActiveConnections(database, count) {
        MetricsManager_1.metricsManager.dbConnectionsActive.set({ database }, count);
    }
}
exports.DatabaseMetricsHelper = DatabaseMetricsHelper;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvbWFuby9wcm9qZXRvcy9kYXRhc3VsL2xvcjAxMzgvc3JjL2luZnJhc3RydWN0dXJlL21ldHJpY3MvaGVscGVycy9kYXRhYmFzZU1ldHJpY3MudHMiLCJtYXBwaW5ncyI6IjtBQUFBLHdEQUF3RDs7O0FBRXhELHNEQUFtRDtBQUtuRDs7R0FFRztBQUNILE1BQWEscUJBQXFCO0lBQ2hDOztPQUVHO0lBQ0ssTUFBTSxDQUFDLGVBQWUsQ0FBQyxHQUFXO1FBQ3hDLE1BQU0sYUFBYSxHQUFHLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUUvQyxJQUFJLGFBQWEsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDO1lBQUUsT0FBTyxRQUFRLENBQUM7UUFDeEQsSUFBSSxhQUFhLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQztZQUFFLE9BQU8sUUFBUSxDQUFDO1FBQ3hELElBQUksYUFBYSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUM7WUFBRSxPQUFPLFFBQVEsQ0FBQztRQUN4RCxJQUFJLGFBQWEsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDO1lBQUUsT0FBTyxRQUFRLENBQUM7UUFFeEQsT0FBTyxPQUFPLENBQUM7SUFDakIsQ0FBQztJQUVEOztPQUVHO0lBQ0gsTUFBTSxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQzFCLFFBQXNCLEVBQ3RCLEdBQVcsRUFDWCxPQUF5QjtRQUV6QixNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzVDLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUU3QixrQ0FBa0M7UUFDbEMsK0JBQWMsQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBRXJELElBQUksQ0FBQztZQUNILE1BQU0sTUFBTSxHQUFHLE1BQU0sT0FBTyxFQUFFLENBQUM7WUFFL0IsOEJBQThCO1lBQzlCLE1BQU0sUUFBUSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLFNBQVMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLFdBQVc7WUFFN0QsK0JBQWMsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUM7WUFDM0QsK0JBQWMsQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBRTFFLE9BQU8sTUFBTSxDQUFDO1FBQ2hCLENBQUM7UUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1lBQ2Ysa0NBQWtDO1lBQ2xDLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDNUMsK0JBQWMsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDO1lBRXRFLE1BQU0sS0FBSyxDQUFDO1FBQ2QsQ0FBQztnQkFBUyxDQUFDO1lBQ1Qsa0NBQWtDO1lBQ2xDLCtCQUFjLENBQUMsbUJBQW1CLENBQUMsR0FBRyxDQUFDLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUN2RCxDQUFDO0lBQ0gsQ0FBQztJQUVEOztPQUVHO0lBQ0ssTUFBTSxDQUFDLGFBQWEsQ0FBQyxLQUFVO1FBQ3JDLE1BQU0sT0FBTyxHQUFHLEtBQUssRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRSxDQUFDO1FBRXBELElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUM7WUFBRSxPQUFPLFNBQVMsQ0FBQztRQUNsRCxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDO1lBQUUsT0FBTyxZQUFZLENBQUM7UUFDeEQsSUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQztZQUFFLE9BQU8sUUFBUSxDQUFDO1FBQ2hELElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsSUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQztZQUFFLE9BQU8sWUFBWSxDQUFDO1FBQ3RGLElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUM7WUFBRSxPQUFPLFVBQVUsQ0FBQztRQUVwRCxPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0lBRUQ7O09BRUc7SUFDSCxNQUFNLENBQUMscUJBQXFCLENBQUMsUUFBc0IsRUFBRSxLQUFVO1FBQzdELE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDNUMsK0JBQWMsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUM7SUFDN0UsQ0FBQztJQUVEOztPQUVHO0lBQ0gsTUFBTSxDQUFDLG9CQUFvQixDQUFDLFFBQXNCLEVBQUUsS0FBYTtRQUMvRCwrQkFBYyxDQUFDLG1CQUFtQixDQUFDLEdBQUcsQ0FBQyxFQUFFLFFBQVEsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzlELENBQUM7Q0FDRjtBQWhGRCxzREFnRkMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL2hvbWUvbWFuby9wcm9qZXRvcy9kYXRhc3VsL2xvcjAxMzgvc3JjL2luZnJhc3RydWN0dXJlL21ldHJpY3MvaGVscGVycy9kYXRhYmFzZU1ldHJpY3MudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL2luZnJhc3RydWN0dXJlL21ldHJpY3MvaGVscGVycy9kYXRhYmFzZU1ldHJpY3MudHNcblxuaW1wb3J0IHsgbWV0cmljc01hbmFnZXIgfSBmcm9tICcuLi9NZXRyaWNzTWFuYWdlcic7XG5cbmV4cG9ydCB0eXBlIERhdGFiYXNlVHlwZSA9ICdFTVAnIHwgJ01VTFQnO1xuZXhwb3J0IHR5cGUgUXVlcnlPcGVyYXRpb24gPSAnc2VsZWN0JyB8ICdpbnNlcnQnIHwgJ3VwZGF0ZScgfCAnZGVsZXRlJyB8ICdvdGhlcic7XG5cbi8qKlxuICogSGVscGVyIHBhcmEgaW5zdHJ1bWVudGFyIHF1ZXJpZXMgZSBjb2xldGFyIG3DqXRyaWNhcyBkZSBiYW5jbyBkZSBkYWRvc1xuICovXG5leHBvcnQgY2xhc3MgRGF0YWJhc2VNZXRyaWNzSGVscGVyIHtcbiAgLyoqXG4gICAqIERldGVjdGEgbyB0aXBvIGRlIG9wZXJhw6fDo28gU1FMXG4gICAqL1xuICBwcml2YXRlIHN0YXRpYyBkZXRlY3RPcGVyYXRpb24oc3FsOiBzdHJpbmcpOiBRdWVyeU9wZXJhdGlvbiB7XG4gICAgY29uc3Qgbm9ybWFsaXplZFNxbCA9IHNxbC50cmltKCkudG9VcHBlckNhc2UoKTtcblxuICAgIGlmIChub3JtYWxpemVkU3FsLnN0YXJ0c1dpdGgoJ1NFTEVDVCcpKSByZXR1cm4gJ3NlbGVjdCc7XG4gICAgaWYgKG5vcm1hbGl6ZWRTcWwuc3RhcnRzV2l0aCgnSU5TRVJUJykpIHJldHVybiAnaW5zZXJ0JztcbiAgICBpZiAobm9ybWFsaXplZFNxbC5zdGFydHNXaXRoKCdVUERBVEUnKSkgcmV0dXJuICd1cGRhdGUnO1xuICAgIGlmIChub3JtYWxpemVkU3FsLnN0YXJ0c1dpdGgoJ0RFTEVURScpKSByZXR1cm4gJ2RlbGV0ZSc7XG5cbiAgICByZXR1cm4gJ290aGVyJztcbiAgfVxuXG4gIC8qKlxuICAgKiBFeGVjdXRhIHVtYSBxdWVyeSBlIGNvbGV0YSBtw6l0cmljYXMgYXV0b21hdGljYW1lbnRlXG4gICAqL1xuICBzdGF0aWMgYXN5bmMgaW5zdHJ1bWVudFF1ZXJ5PFQ+KFxuICAgIGRhdGFiYXNlOiBEYXRhYmFzZVR5cGUsXG4gICAgc3FsOiBzdHJpbmcsXG4gICAgcXVlcnlGbjogKCkgPT4gUHJvbWlzZTxUPlxuICApOiBQcm9taXNlPFQ+IHtcbiAgICBjb25zdCBvcGVyYXRpb24gPSB0aGlzLmRldGVjdE9wZXJhdGlvbihzcWwpO1xuICAgIGNvbnN0IHN0YXJ0VGltZSA9IERhdGUubm93KCk7XG5cbiAgICAvLyBJbmNyZW1lbnRhIHF1ZXJpZXMgZW0gcHJvZ3Jlc3NvXG4gICAgbWV0cmljc01hbmFnZXIuZGJRdWVyaWVzSW5Qcm9ncmVzcy5pbmMoeyBkYXRhYmFzZSB9KTtcblxuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBxdWVyeUZuKCk7XG5cbiAgICAgIC8vIFN1Y2Vzc28gLSByZWdpc3RyYSBtw6l0cmljYXNcbiAgICAgIGNvbnN0IGR1cmF0aW9uID0gKERhdGUubm93KCkgLSBzdGFydFRpbWUpIC8gMTAwMDsgLy8gc2VndW5kb3NcblxuICAgICAgbWV0cmljc01hbmFnZXIuZGJRdWVyaWVzVG90YWwuaW5jKHsgZGF0YWJhc2UsIG9wZXJhdGlvbiB9KTtcbiAgICAgIG1ldHJpY3NNYW5hZ2VyLmRiUXVlcnlEdXJhdGlvbi5vYnNlcnZlKHsgZGF0YWJhc2UsIG9wZXJhdGlvbiB9LCBkdXJhdGlvbik7XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIC8vIEVycm8gLSByZWdpc3RyYSBtw6l0cmljYSBkZSBlcnJvXG4gICAgICBjb25zdCBlcnJvclR5cGUgPSB0aGlzLmNsYXNzaWZ5RXJyb3IoZXJyb3IpO1xuICAgICAgbWV0cmljc01hbmFnZXIuZGJRdWVyeUVycm9ycy5pbmMoeyBkYXRhYmFzZSwgZXJyb3JfdHlwZTogZXJyb3JUeXBlIH0pO1xuXG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgLy8gRGVjcmVtZW50YSBxdWVyaWVzIGVtIHByb2dyZXNzb1xuICAgICAgbWV0cmljc01hbmFnZXIuZGJRdWVyaWVzSW5Qcm9ncmVzcy5kZWMoeyBkYXRhYmFzZSB9KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2xhc3NpZmljYSBvIHRpcG8gZGUgZXJyb1xuICAgKi9cbiAgcHJpdmF0ZSBzdGF0aWMgY2xhc3NpZnlFcnJvcihlcnJvcjogYW55KTogc3RyaW5nIHtcbiAgICBjb25zdCBtZXNzYWdlID0gZXJyb3I/Lm1lc3NhZ2U/LnRvTG93ZXJDYXNlKCkgfHwgJyc7XG5cbiAgICBpZiAobWVzc2FnZS5pbmNsdWRlcygndGltZW91dCcpKSByZXR1cm4gJ3RpbWVvdXQnO1xuICAgIGlmIChtZXNzYWdlLmluY2x1ZGVzKCdjb25uZWN0aW9uJykpIHJldHVybiAnY29ubmVjdGlvbic7XG4gICAgaWYgKG1lc3NhZ2UuaW5jbHVkZXMoJ3N5bnRheCcpKSByZXR1cm4gJ3N5bnRheCc7XG4gICAgaWYgKG1lc3NhZ2UuaW5jbHVkZXMoJ3Blcm1pc3Npb24nKSB8fCBtZXNzYWdlLmluY2x1ZGVzKCdkZW5pZWQnKSkgcmV0dXJuICdwZXJtaXNzaW9uJztcbiAgICBpZiAobWVzc2FnZS5pbmNsdWRlcygnZGVhZGxvY2snKSkgcmV0dXJuICdkZWFkbG9jayc7XG5cbiAgICByZXR1cm4gJ3Vua25vd24nO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdHJhIGVycm8gZGUgY29uZXjDo29cbiAgICovXG4gIHN0YXRpYyByZWNvcmRDb25uZWN0aW9uRXJyb3IoZGF0YWJhc2U6IERhdGFiYXNlVHlwZSwgZXJyb3I6IGFueSk6IHZvaWQge1xuICAgIGNvbnN0IGVycm9yVHlwZSA9IHRoaXMuY2xhc3NpZnlFcnJvcihlcnJvcik7XG4gICAgbWV0cmljc01hbmFnZXIuZGJDb25uZWN0aW9uRXJyb3JzLmluYyh7IGRhdGFiYXNlLCBlcnJvcl90eXBlOiBlcnJvclR5cGUgfSk7XG4gIH1cblxuICAvKipcbiAgICogQXR1YWxpemEgbyBnYXVnZSBkZSBjb25leMO1ZXMgYXRpdmFzXG4gICAqL1xuICBzdGF0aWMgc2V0QWN0aXZlQ29ubmVjdGlvbnMoZGF0YWJhc2U6IERhdGFiYXNlVHlwZSwgY291bnQ6IG51bWJlcik6IHZvaWQge1xuICAgIG1ldHJpY3NNYW5hZ2VyLmRiQ29ubmVjdGlvbnNBY3RpdmUuc2V0KHsgZGF0YWJhc2UgfSwgY291bnQpO1xuICB9XG59Il0sInZlcnNpb24iOjN9