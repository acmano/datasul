fbeef5fbde7475e8fd632add98ea8664
"use strict";
// @ts-nocheck
// src/infrastructure/metrics/helpers/databaseMetrics.ts
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatabaseMetricsHelper = void 0;
const MetricsManager_1 = require("../MetricsManager");
/**
 * Helper para instrumentar queries e coletar métricas de banco de dados
 */
class DatabaseMetricsHelper {
    /**
     * Detecta o tipo de operação SQL
     */
    static detectOperation(sql) {
        const normalizedSql = sql.trim().toUpperCase();
        if (normalizedSql.startsWith('SELECT'))
            return 'select';
        if (normalizedSql.startsWith('INSERT'))
            return 'insert';
        if (normalizedSql.startsWith('UPDATE'))
            return 'update';
        if (normalizedSql.startsWith('DELETE'))
            return 'delete';
        return 'other';
    }
    /**
     * Executa uma query e coleta métricas automaticamente
     */
    static async instrumentQuery(database, sql, queryFn) {
        const operation = this.detectOperation(sql);
        const startTime = Date.now();
        // Incrementa queries em progresso
        MetricsManager_1.metricsManager.dbQueriesInProgress.inc({ database });
        try {
            const result = await queryFn();
            // Sucesso - registra métricas
            const duration = (Date.now() - startTime) / 1000; // segundos
            MetricsManager_1.metricsManager.dbQueriesTotal.inc({ database, operation });
            MetricsManager_1.metricsManager.dbQueryDuration.observe({ database, operation }, duration);
            return result;
        }
        catch (error) {
            // Erro - registra métrica de erro
            const errorType = this.classifyError(error);
            MetricsManager_1.metricsManager.dbQueryErrors.inc({ database, error_type: errorType });
            throw error;
        }
        finally {
            // Decrementa queries em progresso
            MetricsManager_1.metricsManager.dbQueriesInProgress.dec({ database });
        }
    }
    /**
     * Classifica o tipo de erro
     */
    static classifyError(error) {
        const message = error?.message?.toLowerCase() || '';
        if (message.includes('timeout'))
            return 'timeout';
        if (message.includes('connection'))
            return 'connection';
        if (message.includes('syntax'))
            return 'syntax';
        if (message.includes('permission') || message.includes('denied'))
            return 'permission';
        if (message.includes('deadlock'))
            return 'deadlock';
        return 'unknown';
    }
    /**
     * Registra erro de conexão
     */
    static recordConnectionError(database, error) {
        const errorType = this.classifyError(error);
        MetricsManager_1.metricsManager.dbConnectionErrors.inc({ database, error_type: errorType });
    }
    /**
     * Atualiza o gauge de conexões ativas
     */
    static setActiveConnections(database, count) {
        MetricsManager_1.metricsManager.dbConnectionsActive.set({ database }, count);
    }
}
exports.DatabaseMetricsHelper = DatabaseMetricsHelper;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvbWFuby9wcm9qZXRvcy9kYXRhc3VsL2xvcjAxMzgvLnN0cnlrZXItdG1wL3NhbmRib3gtc0NWSHgwL3NyYy9pbmZyYXN0cnVjdHVyZS9tZXRyaWNzL2hlbHBlcnMvZGF0YWJhc2VNZXRyaWNzLnRzIiwibWFwcGluZ3MiOiI7QUFBQSxjQUFjO0FBQ2Qsd0RBQXdEOzs7QUFFeEQsc0RBQW1EO0FBS25EOztHQUVHO0FBQ0gsTUFBYSxxQkFBcUI7SUFDaEM7O09BRUc7SUFDSyxNQUFNLENBQUMsZUFBZSxDQUFDLEdBQVc7UUFDeEMsTUFBTSxhQUFhLEdBQUcsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBRS9DLElBQUksYUFBYSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUM7WUFBRSxPQUFPLFFBQVEsQ0FBQztRQUN4RCxJQUFJLGFBQWEsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDO1lBQUUsT0FBTyxRQUFRLENBQUM7UUFDeEQsSUFBSSxhQUFhLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQztZQUFFLE9BQU8sUUFBUSxDQUFDO1FBQ3hELElBQUksYUFBYSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUM7WUFBRSxPQUFPLFFBQVEsQ0FBQztRQUV4RCxPQUFPLE9BQU8sQ0FBQztJQUNqQixDQUFDO0lBRUQ7O09BRUc7SUFDSCxNQUFNLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FDMUIsUUFBc0IsRUFDdEIsR0FBVyxFQUNYLE9BQXlCO1FBRXpCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDNUMsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBRTdCLGtDQUFrQztRQUNsQywrQkFBYyxDQUFDLG1CQUFtQixDQUFDLEdBQUcsQ0FBQyxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFFckQsSUFBSSxDQUFDO1lBQ0gsTUFBTSxNQUFNLEdBQUcsTUFBTSxPQUFPLEVBQUUsQ0FBQztZQUUvQiw4QkFBOEI7WUFDOUIsTUFBTSxRQUFRLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsU0FBUyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsV0FBVztZQUU3RCwrQkFBYyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQztZQUMzRCwrQkFBYyxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFFMUUsT0FBTyxNQUFNLENBQUM7UUFDaEIsQ0FBQztRQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7WUFDZixrQ0FBa0M7WUFDbEMsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUM1QywrQkFBYyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUM7WUFFdEUsTUFBTSxLQUFLLENBQUM7UUFDZCxDQUFDO2dCQUFTLENBQUM7WUFDVCxrQ0FBa0M7WUFDbEMsK0JBQWMsQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZELENBQUM7SUFDSCxDQUFDO0lBRUQ7O09BRUc7SUFDSyxNQUFNLENBQUMsYUFBYSxDQUFDLEtBQVU7UUFDckMsTUFBTSxPQUFPLEdBQUcsS0FBSyxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFLENBQUM7UUFFcEQsSUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQztZQUFFLE9BQU8sU0FBUyxDQUFDO1FBQ2xELElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUM7WUFBRSxPQUFPLFlBQVksQ0FBQztRQUN4RCxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDO1lBQUUsT0FBTyxRQUFRLENBQUM7UUFDaEQsSUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDO1lBQUUsT0FBTyxZQUFZLENBQUM7UUFDdEYsSUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQztZQUFFLE9BQU8sVUFBVSxDQUFDO1FBRXBELE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7SUFFRDs7T0FFRztJQUNILE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxRQUFzQixFQUFFLEtBQVU7UUFDN0QsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM1QywrQkFBYyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQztJQUM3RSxDQUFDO0lBRUQ7O09BRUc7SUFDSCxNQUFNLENBQUMsb0JBQW9CLENBQUMsUUFBc0IsRUFBRSxLQUFhO1FBQy9ELCtCQUFjLENBQUMsbUJBQW1CLENBQUMsR0FBRyxDQUFDLEVBQUUsUUFBUSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDOUQsQ0FBQztDQUNGO0FBaEZELHNEQWdGQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS9tYW5vL3Byb2pldG9zL2RhdGFzdWwvbG9yMDEzOC8uc3RyeWtlci10bXAvc2FuZGJveC1zQ1ZIeDAvc3JjL2luZnJhc3RydWN0dXJlL21ldHJpY3MvaGVscGVycy9kYXRhYmFzZU1ldHJpY3MudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQHRzLW5vY2hlY2tcbi8vIHNyYy9pbmZyYXN0cnVjdHVyZS9tZXRyaWNzL2hlbHBlcnMvZGF0YWJhc2VNZXRyaWNzLnRzXG5cbmltcG9ydCB7IG1ldHJpY3NNYW5hZ2VyIH0gZnJvbSAnLi4vTWV0cmljc01hbmFnZXInO1xuXG5leHBvcnQgdHlwZSBEYXRhYmFzZVR5cGUgPSAnRU1QJyB8ICdNVUxUJztcbmV4cG9ydCB0eXBlIFF1ZXJ5T3BlcmF0aW9uID0gJ3NlbGVjdCcgfCAnaW5zZXJ0JyB8ICd1cGRhdGUnIHwgJ2RlbGV0ZScgfCAnb3RoZXInO1xuXG4vKipcbiAqIEhlbHBlciBwYXJhIGluc3RydW1lbnRhciBxdWVyaWVzIGUgY29sZXRhciBtw6l0cmljYXMgZGUgYmFuY28gZGUgZGFkb3NcbiAqL1xuZXhwb3J0IGNsYXNzIERhdGFiYXNlTWV0cmljc0hlbHBlciB7XG4gIC8qKlxuICAgKiBEZXRlY3RhIG8gdGlwbyBkZSBvcGVyYcOnw6NvIFNRTFxuICAgKi9cbiAgcHJpdmF0ZSBzdGF0aWMgZGV0ZWN0T3BlcmF0aW9uKHNxbDogc3RyaW5nKTogUXVlcnlPcGVyYXRpb24ge1xuICAgIGNvbnN0IG5vcm1hbGl6ZWRTcWwgPSBzcWwudHJpbSgpLnRvVXBwZXJDYXNlKCk7XG5cbiAgICBpZiAobm9ybWFsaXplZFNxbC5zdGFydHNXaXRoKCdTRUxFQ1QnKSkgcmV0dXJuICdzZWxlY3QnO1xuICAgIGlmIChub3JtYWxpemVkU3FsLnN0YXJ0c1dpdGgoJ0lOU0VSVCcpKSByZXR1cm4gJ2luc2VydCc7XG4gICAgaWYgKG5vcm1hbGl6ZWRTcWwuc3RhcnRzV2l0aCgnVVBEQVRFJykpIHJldHVybiAndXBkYXRlJztcbiAgICBpZiAobm9ybWFsaXplZFNxbC5zdGFydHNXaXRoKCdERUxFVEUnKSkgcmV0dXJuICdkZWxldGUnO1xuXG4gICAgcmV0dXJuICdvdGhlcic7XG4gIH1cblxuICAvKipcbiAgICogRXhlY3V0YSB1bWEgcXVlcnkgZSBjb2xldGEgbcOpdHJpY2FzIGF1dG9tYXRpY2FtZW50ZVxuICAgKi9cbiAgc3RhdGljIGFzeW5jIGluc3RydW1lbnRRdWVyeTxUPihcbiAgICBkYXRhYmFzZTogRGF0YWJhc2VUeXBlLFxuICAgIHNxbDogc3RyaW5nLFxuICAgIHF1ZXJ5Rm46ICgpID0+IFByb21pc2U8VD5cbiAgKTogUHJvbWlzZTxUPiB7XG4gICAgY29uc3Qgb3BlcmF0aW9uID0gdGhpcy5kZXRlY3RPcGVyYXRpb24oc3FsKTtcbiAgICBjb25zdCBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuXG4gICAgLy8gSW5jcmVtZW50YSBxdWVyaWVzIGVtIHByb2dyZXNzb1xuICAgIG1ldHJpY3NNYW5hZ2VyLmRiUXVlcmllc0luUHJvZ3Jlc3MuaW5jKHsgZGF0YWJhc2UgfSk7XG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcXVlcnlGbigpO1xuXG4gICAgICAvLyBTdWNlc3NvIC0gcmVnaXN0cmEgbcOpdHJpY2FzXG4gICAgICBjb25zdCBkdXJhdGlvbiA9IChEYXRlLm5vdygpIC0gc3RhcnRUaW1lKSAvIDEwMDA7IC8vIHNlZ3VuZG9zXG5cbiAgICAgIG1ldHJpY3NNYW5hZ2VyLmRiUXVlcmllc1RvdGFsLmluYyh7IGRhdGFiYXNlLCBvcGVyYXRpb24gfSk7XG4gICAgICBtZXRyaWNzTWFuYWdlci5kYlF1ZXJ5RHVyYXRpb24ub2JzZXJ2ZSh7IGRhdGFiYXNlLCBvcGVyYXRpb24gfSwgZHVyYXRpb24pO1xuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAvLyBFcnJvIC0gcmVnaXN0cmEgbcOpdHJpY2EgZGUgZXJyb1xuICAgICAgY29uc3QgZXJyb3JUeXBlID0gdGhpcy5jbGFzc2lmeUVycm9yKGVycm9yKTtcbiAgICAgIG1ldHJpY3NNYW5hZ2VyLmRiUXVlcnlFcnJvcnMuaW5jKHsgZGF0YWJhc2UsIGVycm9yX3R5cGU6IGVycm9yVHlwZSB9KTtcblxuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIC8vIERlY3JlbWVudGEgcXVlcmllcyBlbSBwcm9ncmVzc29cbiAgICAgIG1ldHJpY3NNYW5hZ2VyLmRiUXVlcmllc0luUHJvZ3Jlc3MuZGVjKHsgZGF0YWJhc2UgfSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENsYXNzaWZpY2EgbyB0aXBvIGRlIGVycm9cbiAgICovXG4gIHByaXZhdGUgc3RhdGljIGNsYXNzaWZ5RXJyb3IoZXJyb3I6IGFueSk6IHN0cmluZyB7XG4gICAgY29uc3QgbWVzc2FnZSA9IGVycm9yPy5tZXNzYWdlPy50b0xvd2VyQ2FzZSgpIHx8ICcnO1xuXG4gICAgaWYgKG1lc3NhZ2UuaW5jbHVkZXMoJ3RpbWVvdXQnKSkgcmV0dXJuICd0aW1lb3V0JztcbiAgICBpZiAobWVzc2FnZS5pbmNsdWRlcygnY29ubmVjdGlvbicpKSByZXR1cm4gJ2Nvbm5lY3Rpb24nO1xuICAgIGlmIChtZXNzYWdlLmluY2x1ZGVzKCdzeW50YXgnKSkgcmV0dXJuICdzeW50YXgnO1xuICAgIGlmIChtZXNzYWdlLmluY2x1ZGVzKCdwZXJtaXNzaW9uJykgfHwgbWVzc2FnZS5pbmNsdWRlcygnZGVuaWVkJykpIHJldHVybiAncGVybWlzc2lvbic7XG4gICAgaWYgKG1lc3NhZ2UuaW5jbHVkZXMoJ2RlYWRsb2NrJykpIHJldHVybiAnZGVhZGxvY2snO1xuXG4gICAgcmV0dXJuICd1bmtub3duJztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RyYSBlcnJvIGRlIGNvbmV4w6NvXG4gICAqL1xuICBzdGF0aWMgcmVjb3JkQ29ubmVjdGlvbkVycm9yKGRhdGFiYXNlOiBEYXRhYmFzZVR5cGUsIGVycm9yOiBhbnkpOiB2b2lkIHtcbiAgICBjb25zdCBlcnJvclR5cGUgPSB0aGlzLmNsYXNzaWZ5RXJyb3IoZXJyb3IpO1xuICAgIG1ldHJpY3NNYW5hZ2VyLmRiQ29ubmVjdGlvbkVycm9ycy5pbmMoeyBkYXRhYmFzZSwgZXJyb3JfdHlwZTogZXJyb3JUeXBlIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEF0dWFsaXphIG8gZ2F1Z2UgZGUgY29uZXjDtWVzIGF0aXZhc1xuICAgKi9cbiAgc3RhdGljIHNldEFjdGl2ZUNvbm5lY3Rpb25zKGRhdGFiYXNlOiBEYXRhYmFzZVR5cGUsIGNvdW50OiBudW1iZXIpOiB2b2lkIHtcbiAgICBtZXRyaWNzTWFuYWdlci5kYkNvbm5lY3Rpb25zQWN0aXZlLnNldCh7IGRhdGFiYXNlIH0sIGNvdW50KTtcbiAgfVxufSJdLCJ2ZXJzaW9uIjozfQ==