2eaefadb0b2c4e412652da6af1895bbe
"use strict";
// src/shared/services/ApiKeyService.ts
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiKeyService = void 0;
const crypto_1 = __importDefault(require("crypto"));
const apiKey_types_1 = require("@shared/types/apiKey.types");
const logger_1 = require("@shared/utils/logger");
/**
 * Serviço para gerenciar API Keys
 * Em produção, isso deveria vir de um banco de dados
 */
class ApiKeyService {
    /**
     * Inicializa API keys de exemplo
     * Em produção, carregar do banco de dados
     */
    static initialize() {
        // API Keys de exemplo
        const exampleKeys = [
            {
                key: 'free-demo-key-123456',
                userId: 'user-001',
                userName: 'Demo User Free',
                tier: apiKey_types_1.UserTier.FREE,
                active: true,
                createdAt: new Date(),
            },
            {
                key: 'premium-key-abc123',
                userId: 'user-002',
                userName: 'Premium User',
                tier: apiKey_types_1.UserTier.PREMIUM,
                active: true,
                createdAt: new Date(),
            },
            {
                key: 'enterprise-key-xyz789',
                userId: 'user-003',
                userName: 'Enterprise Corp',
                tier: apiKey_types_1.UserTier.ENTERPRISE,
                active: true,
                createdAt: new Date(),
            },
            {
                key: 'admin-key-superuser',
                userId: 'admin-001',
                userName: 'System Admin',
                tier: apiKey_types_1.UserTier.ADMIN,
                active: true,
                createdAt: new Date(),
            },
        ];
        exampleKeys.forEach(key => {
            this.apiKeys.set(key.key, key);
        });
        logger_1.log.info('API Keys inicializadas', {
            count: this.apiKeys.size,
            tiers: Array.from(new Set(exampleKeys.map(k => k.tier)))
        });
    }
    /**
     * Valida uma API Key
     */
    static async validateKey(apiKey) {
        const keyConfig = this.apiKeys.get(apiKey);
        if (!keyConfig) {
            logger_1.log.warn('API Key inválida', { apiKey: this.maskKey(apiKey) });
            return null;
        }
        if (!keyConfig.active) {
            logger_1.log.warn('API Key inativa', {
                apiKey: this.maskKey(apiKey),
                userId: keyConfig.userId
            });
            return null;
        }
        // Verificar expiração
        if (keyConfig.expiresAt && keyConfig.expiresAt < new Date()) {
            logger_1.log.warn('API Key expirada', {
                apiKey: this.maskKey(apiKey),
                userId: keyConfig.userId,
                expiresAt: keyConfig.expiresAt
            });
            return null;
        }
        return keyConfig;
    }
    /**
     * Gera uma nova API Key
     */
    static async generateKey(userId, userName, tier = apiKey_types_1.UserTier.FREE, expiresInDays) {
        const prefix = tier.toLowerCase();
        const randomPart = crypto_1.default.randomBytes(16).toString('hex');
        const apiKey = `${prefix}-${randomPart}`;
        const expiresAt = expiresInDays
            ? new Date(Date.now() + expiresInDays * 24 * 60 * 60 * 1000)
            : undefined;
        const keyConfig = {
            key: apiKey,
            userId,
            userName,
            tier,
            active: true,
            createdAt: new Date(),
            expiresAt,
        };
        this.apiKeys.set(apiKey, keyConfig);
        logger_1.log.info('API Key gerada', {
            userId,
            tier,
            expiresAt,
            apiKey: this.maskKey(apiKey)
        });
        return apiKey;
    }
    /**
     * Revoga uma API Key
     */
    static async revokeKey(apiKey) {
        const keyConfig = this.apiKeys.get(apiKey);
        if (!keyConfig) {
            return false;
        }
        keyConfig.active = false;
        logger_1.log.info('API Key revogada', {
            userId: keyConfig.userId,
            apiKey: this.maskKey(apiKey)
        });
        return true;
    }
    /**
     * Lista API Keys de um usuário
     */
    static async getUserKeys(userId) {
        return Array.from(this.apiKeys.values())
            .filter(key => key.userId === userId);
    }
    /**
     * Atualiza tier de um usuário
     */
    static async updateUserTier(userId, newTier) {
        const userKeys = await this.getUserKeys(userId);
        userKeys.forEach(keyConfig => {
            keyConfig.tier = newTier;
        });
        logger_1.log.info('Tier do usuário atualizado', {
            userId,
            newTier,
            keysUpdated: userKeys.length
        });
    }
    /**
     * Mascara API Key para logs
     */
    static maskKey(apiKey) {
        if (apiKey.length <= 8) {
            return '***';
        }
        return `${apiKey.substring(0, 4)}...${apiKey.substring(apiKey.length - 4)}`;
    }
    /**
     * Retorna estatísticas de API Keys
     */
    static getStats() {
        const keys = Array.from(this.apiKeys.values());
        return {
            total: keys.length,
            active: keys.filter(k => k.active).length,
            inactive: keys.filter(k => !k.active).length,
            byTier: {
                free: keys.filter(k => k.tier === apiKey_types_1.UserTier.FREE).length,
                premium: keys.filter(k => k.tier === apiKey_types_1.UserTier.PREMIUM).length,
                enterprise: keys.filter(k => k.tier === apiKey_types_1.UserTier.ENTERPRISE).length,
                admin: keys.filter(k => k.tier === apiKey_types_1.UserTier.ADMIN).length,
            }
        };
    }
}
exports.ApiKeyService = ApiKeyService;
ApiKeyService.apiKeys = new Map();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvbWFuby9wcm9qZXRvcy9kYXRhc3VsL2xvcjAxMzgvc3JjL3NoYXJlZC9zZXJ2aWNlcy9BcGlLZXlTZXJ2aWNlLnRzIiwibWFwcGluZ3MiOiI7QUFBQSx1Q0FBdUM7Ozs7OztBQUV2QyxvREFBNEI7QUFDNUIsNkRBQW9FO0FBQ3BFLGlEQUEyQztBQUUzQzs7O0dBR0c7QUFDSCxNQUFhLGFBQWE7SUFHeEI7OztPQUdHO0lBQ0gsTUFBTSxDQUFDLFVBQVU7UUFDZixzQkFBc0I7UUFDdEIsTUFBTSxXQUFXLEdBQW1CO1lBQ2xDO2dCQUNFLEdBQUcsRUFBRSxzQkFBc0I7Z0JBQzNCLE1BQU0sRUFBRSxVQUFVO2dCQUNsQixRQUFRLEVBQUUsZ0JBQWdCO2dCQUMxQixJQUFJLEVBQUUsdUJBQVEsQ0FBQyxJQUFJO2dCQUNuQixNQUFNLEVBQUUsSUFBSTtnQkFDWixTQUFTLEVBQUUsSUFBSSxJQUFJLEVBQUU7YUFDdEI7WUFDRDtnQkFDRSxHQUFHLEVBQUUsb0JBQW9CO2dCQUN6QixNQUFNLEVBQUUsVUFBVTtnQkFDbEIsUUFBUSxFQUFFLGNBQWM7Z0JBQ3hCLElBQUksRUFBRSx1QkFBUSxDQUFDLE9BQU87Z0JBQ3RCLE1BQU0sRUFBRSxJQUFJO2dCQUNaLFNBQVMsRUFBRSxJQUFJLElBQUksRUFBRTthQUN0QjtZQUNEO2dCQUNFLEdBQUcsRUFBRSx1QkFBdUI7Z0JBQzVCLE1BQU0sRUFBRSxVQUFVO2dCQUNsQixRQUFRLEVBQUUsaUJBQWlCO2dCQUMzQixJQUFJLEVBQUUsdUJBQVEsQ0FBQyxVQUFVO2dCQUN6QixNQUFNLEVBQUUsSUFBSTtnQkFDWixTQUFTLEVBQUUsSUFBSSxJQUFJLEVBQUU7YUFDdEI7WUFDRDtnQkFDRSxHQUFHLEVBQUUscUJBQXFCO2dCQUMxQixNQUFNLEVBQUUsV0FBVztnQkFDbkIsUUFBUSxFQUFFLGNBQWM7Z0JBQ3hCLElBQUksRUFBRSx1QkFBUSxDQUFDLEtBQUs7Z0JBQ3BCLE1BQU0sRUFBRSxJQUFJO2dCQUNaLFNBQVMsRUFBRSxJQUFJLElBQUksRUFB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QUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLHVCQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTTtnQkFDN0QsVUFBVSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLHVCQUFRLENBQUMsVUFBVSxDQUFDLENBQUMsTUFBTTtnQkFDbkUsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLHVCQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTTthQUMxRDtTQUNGLENBQUM7SUFDSixDQUFDOztBQXJNSCxzQ0FzTUM7QUFyTWdCLHFCQUFPLEdBQThCLElBQUksR0FBRyxFQUFFLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL2hvbWUvbWFuby9wcm9qZXRvcy9kYXRhc3VsL2xvcjAxMzgvc3JjL3NoYXJlZC9zZXJ2aWNlcy9BcGlLZXlTZXJ2aWNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9zaGFyZWQvc2VydmljZXMvQXBpS2V5U2VydmljZS50c1xuXG5pbXBvcnQgY3J5cHRvIGZyb20gJ2NyeXB0byc7XG5pbXBvcnQgeyBBcGlLZXlDb25maWcsIFVzZXJUaWVyIH0gZnJvbSAnQHNoYXJlZC90eXBlcy9hcGlLZXkudHlwZXMnO1xuaW1wb3J0IHsgbG9nIH0gZnJvbSAnQHNoYXJlZC91dGlscy9sb2dnZXInO1xuXG4vKipcbiAqIFNlcnZpw6dvIHBhcmEgZ2VyZW5jaWFyIEFQSSBLZXlzXG4gKiBFbSBwcm9kdcOnw6NvLCBpc3NvIGRldmVyaWEgdmlyIGRlIHVtIGJhbmNvIGRlIGRhZG9zXG4gKi9cbmV4cG9ydCBjbGFzcyBBcGlLZXlTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBzdGF0aWMgYXBpS2V5czogTWFwPHN0cmluZywgQXBpS2V5Q29uZmlnPiA9IG5ldyBNYXAoKTtcblxuICAvKipcbiAgICogSW5pY2lhbGl6YSBBUEkga2V5cyBkZSBleGVtcGxvXG4gICAqIEVtIHByb2R1w6fDo28sIGNhcnJlZ2FyIGRvIGJhbmNvIGRlIGRhZG9zXG4gICAqL1xuICBzdGF0aWMgaW5pdGlhbGl6ZSgpOiB2b2lkIHtcbiAgICAvLyBBUEkgS2V5cyBkZSBleGVtcGxvXG4gICAgY29uc3QgZXhhbXBsZUtleXM6IEFwaUtleUNvbmZpZ1tdID0gW1xuICAgICAge1xuICAgICAgICBrZXk6ICdmcmVlLWRlbW8ta2V5LTEyMzQ1NicsXG4gICAgICAgIHVzZXJJZDogJ3VzZXItMDAxJyxcbiAgICAgICAgdXNlck5hbWU6ICdEZW1vIFVzZXIgRnJlZScsXG4gICAgICAgIHRpZXI6IFVzZXJUaWVyLkZSRUUsXG4gICAgICAgIGFjdGl2ZTogdHJ1ZSxcbiAgICAgICAgY3JlYXRlZEF0OiBuZXcgRGF0ZSgpLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAga2V5OiAncHJlbWl1bS1rZXktYWJjMTIzJyxcbiAgICAgICAgdXNlcklkOiAndXNlci0wMDInLFxuICAgICAgICB1c2VyTmFtZTogJ1ByZW1pdW0gVXNlcicsXG4gICAgICAgIHRpZXI6IFVzZXJUaWVyLlBSRU1JVU0sXG4gICAgICAgIGFjdGl2ZTogdHJ1ZSxcbiAgICAgICAgY3JlYXRlZEF0OiBuZXcgRGF0ZSgpLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAga2V5OiAnZW50ZXJwcmlzZS1rZXkteHl6Nzg5JyxcbiAgICAgICAgdXNlcklkOiAndXNlci0wMDMnLFxuICAgICAgICB1c2VyTmFtZTogJ0VudGVycHJpc2UgQ29ycCcsXG4gICAgICAgIHRpZXI6IFVzZXJUaWVyLkVOVEVSUFJJU0UsXG4gICAgICAgIGFjdGl2ZTogdHJ1ZSxcbiAgICAgICAgY3JlYXRlZEF0OiBuZXcgRGF0ZSgpLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAga2V5OiAnYWRtaW4ta2V5LXN1cGVydXNlcicsXG4gICAgICAgIHVzZXJJZDogJ2FkbWluLTAwMScsXG4gICAgICAgIHVzZXJOYW1lOiAnU3lzdGVtIEFkbWluJyxcbiAgICAgICAgdGllcjogVXNlclRpZXIuQURNSU4sXG4gICAgICAgIGFjdGl2ZTogdHJ1ZSxcbiAgICAgICAgY3JlYXRlZEF0OiBuZXcgRGF0ZSgpLFxuICAgICAgfSxcbiAgICBdO1xuXG4gICAgZXhhbXBsZUtleXMuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgdGhpcy5hcGlLZXlzLnNldChrZXkua2V5LCBrZXkpO1xuICAgIH0pO1xuXG4gICAgbG9nLmluZm8oJ0FQSSBLZXlzIGluaWNpYWxpemFkYXMnLCB7XG4gICAgICBjb3VudDogdGhpcy5hcGlLZXlzLnNpemUsXG4gICAgICB0aWVyczogQXJyYXkuZnJvbShuZXcgU2V0KGV4YW1wbGVLZXlzLm1hcChrID0+IGsudGllcikpKVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFZhbGlkYSB1bWEgQVBJIEtleVxuICAgKi9cbiAgc3RhdGljIGFzeW5jIHZhbGlkYXRlS2V5KGFwaUtleTogc3RyaW5nKTogUHJvbWlzZTxBcGlLZXlDb25maWcgfCBudWxsPiB7XG4gICAgY29uc3Qga2V5Q29uZmlnID0gdGhpcy5hcGlLZXlzLmdldChhcGlLZXkpO1xuXG4gICAgaWYgKCFrZXlDb25maWcpIHtcbiAgICAgIGxvZy53YXJuKCdBUEkgS2V5IGludsOhbGlkYScsIHsgYXBpS2V5OiB0aGlzLm1hc2tLZXkoYXBpS2V5KSB9KTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGlmICgha2V5Q29uZmlnLmFjdGl2ZSkge1xuICAgICAgbG9nLndhcm4oJ0FQSSBLZXkgaW5hdGl2YScsIHsgXG4gICAgICAgIGFwaUtleTogdGhpcy5tYXNrS2V5KGFwaUtleSksXG4gICAgICAgIHVzZXJJZDoga2V5Q29uZmlnLnVzZXJJZCBcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgLy8gVmVyaWZpY2FyIGV4cGlyYcOnw6NvXG4gICAgaWYgKGtleUNvbmZpZy5leHBpcmVzQXQgJiYga2V5Q29uZmlnLmV4cGlyZXNBdCA8IG5ldyBEYXRlKCkpIHtcbiAgICAgIGxvZy53YXJuKCdBUEkgS2V5IGV4cGlyYWRhJywge1xuICAgICAgICBhcGlLZXk6IHRoaXMubWFza0tleShhcGlLZXkpLFxuICAgICAgICB1c2VySWQ6IGtleUNvbmZpZy51c2VySWQsXG4gICAgICAgIGV4cGlyZXNBdDoga2V5Q29uZmlnLmV4cGlyZXNBdFxuICAgICAgfSk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4ga2V5Q29uZmlnO1xuICB9XG5cbiAgLyoqXG4gICAqIEdlcmEgdW1hIG5vdmEgQVBJIEtleVxuICAgKi9cbiAgc3RhdGljIGFzeW5jIGdlbmVyYXRlS2V5KFxuICAgIHVzZXJJZDogc3RyaW5nLFxuICAgIHVzZXJOYW1lOiBzdHJpbmcsXG4gICAgdGllcjogVXNlclRpZXIgPSBVc2VyVGllci5GUkVFLFxuICAgIGV4cGlyZXNJbkRheXM/OiBudW1iZXJcbiAgKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICBjb25zdCBwcmVmaXggPSB0aWVyLnRvTG93ZXJDYXNlKCk7XG4gICAgY29uc3QgcmFuZG9tUGFydCA9IGNyeXB0by5yYW5kb21CeXRlcygxNikudG9TdHJpbmcoJ2hleCcpO1xuICAgIGNvbnN0IGFwaUtleSA9IGAke3ByZWZpeH0tJHtyYW5kb21QYXJ0fWA7XG5cbiAgICBjb25zdCBleHBpcmVzQXQgPSBleHBpcmVzSW5EYXlzXG4gICAgICA/IG5ldyBEYXRlKERhdGUubm93KCkgKyBleHBpcmVzSW5EYXlzICogMjQgKiA2MCAqIDYwICogMTAwMClcbiAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgY29uc3Qga2V5Q29uZmlnOiBBcGlLZXlDb25maWcgPSB7XG4gICAgICBrZXk6IGFwaUtleSxcbiAgICAgIHVzZXJJZCxcbiAgICAgIHVzZXJOYW1lLFxuICAgICAgdGllcixcbiAgICAgIGFjdGl2ZTogdHJ1ZSxcbiAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoKSxcbiAgICAgIGV4cGlyZXNBdCxcbiAgICB9O1xuXG4gICAgdGhpcy5hcGlLZXlzLnNldChhcGlLZXksIGtleUNvbmZpZyk7XG5cbiAgICBsb2cuaW5mbygnQVBJIEtleSBnZXJhZGEnLCB7XG4gICAgICB1c2VySWQsXG4gICAgICB0aWVyLFxuICAgICAgZXhwaXJlc0F0LFxuICAgICAgYXBpS2V5OiB0aGlzLm1hc2tLZXkoYXBpS2V5KVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGFwaUtleTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXZvZ2EgdW1hIEFQSSBLZXlcbiAgICovXG4gIHN0YXRpYyBhc3luYyByZXZva2VLZXkoYXBpS2V5OiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICBjb25zdCBrZXlDb25maWcgPSB0aGlzLmFwaUtleXMuZ2V0KGFwaUtleSk7XG5cbiAgICBpZiAoIWtleUNvbmZpZykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGtleUNvbmZpZy5hY3RpdmUgPSBmYWxzZTtcblxuICAgIGxvZy5pbmZvKCdBUEkgS2V5IHJldm9nYWRhJywge1xuICAgICAgdXNlcklkOiBrZXlDb25maWcudXNlcklkLFxuICAgICAgYXBpS2V5OiB0aGlzLm1hc2tLZXkoYXBpS2V5KVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICogTGlzdGEgQVBJIEtleXMgZGUgdW0gdXN1w6FyaW9cbiAgICovXG4gIHN0YXRpYyBhc3luYyBnZXRVc2VyS2V5cyh1c2VySWQ6IHN0cmluZyk6IFByb21pc2U8QXBpS2V5Q29uZmlnW10+IHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLmFwaUtleXMudmFsdWVzKCkpXG4gICAgICAuZmlsdGVyKGtleSA9PiBrZXkudXNlcklkID09PSB1c2VySWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEF0dWFsaXphIHRpZXIgZGUgdW0gdXN1w6FyaW9cbiAgICovXG4gIHN0YXRpYyBhc3luYyB1cGRhdGVVc2VyVGllcih1c2VySWQ6IHN0cmluZywgbmV3VGllcjogVXNlclRpZXIpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCB1c2VyS2V5cyA9IGF3YWl0IHRoaXMuZ2V0VXNlcktleXModXNlcklkKTtcblxuICAgIHVzZXJLZXlzLmZvckVhY2goa2V5Q29uZmlnID0+IHtcbiAgICAgIGtleUNvbmZpZy50aWVyID0gbmV3VGllcjtcbiAgICB9KTtcblxuICAgIGxvZy5pbmZvKCdUaWVyIGRvIHVzdcOhcmlvIGF0dWFsaXphZG8nLCB7XG4gICAgICB1c2VySWQsXG4gICAgICBuZXdUaWVyLFxuICAgICAga2V5c1VwZGF0ZWQ6IHVzZXJLZXlzLmxlbmd0aFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIE1hc2NhcmEgQVBJIEtleSBwYXJhIGxvZ3NcbiAgICovXG4gIHByaXZhdGUgc3RhdGljIG1hc2tLZXkoYXBpS2V5OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGlmIChhcGlLZXkubGVuZ3RoIDw9IDgpIHtcbiAgICAgIHJldHVybiAnKioqJztcbiAgICB9XG4gICAgcmV0dXJuIGAke2FwaUtleS5zdWJzdHJpbmcoMCwgNCl9Li4uJHthcGlLZXkuc3Vic3RyaW5nKGFwaUtleS5sZW5ndGggLSA0KX1gO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldG9ybmEgZXN0YXTDrXN0aWNhcyBkZSBBUEkgS2V5c1xuICAgKi9cbiAgc3RhdGljIGdldFN0YXRzKCk6IGFueSB7XG4gICAgY29uc3Qga2V5cyA9IEFycmF5LmZyb20odGhpcy5hcGlLZXlzLnZhbHVlcygpKTtcbiAgICBcbiAgICByZXR1cm4ge1xuICAgICAgdG90YWw6IGtleXMubGVuZ3RoLFxuICAgICAgYWN0aXZlOiBrZXlzLmZpbHRlcihrID0+IGsuYWN0aXZlKS5sZW5ndGgsXG4gICAgICBpbmFjdGl2ZToga2V5cy5maWx0ZXIoayA9PiAhay5hY3RpdmUpLmxlbmd0aCxcbiAgICAgIGJ5VGllcjoge1xuICAgICAgICBmcmVlOiBrZXlzLmZpbHRlcihrID0+IGsudGllciA9PT0gVXNlclRpZXIuRlJFRSkubGVuZ3RoLFxuICAgICAgICBwcmVtaXVtOiBrZXlzLmZpbHRlcihrID0+IGsudGllciA9PT0gVXNlclRpZXIuUFJFTUlVTSkubGVuZ3RoLFxuICAgICAgICBlbnRlcnByaXNlOiBrZXlzLmZpbHRlcihrID0+IGsudGllciA9PT0gVXNlclRpZXIuRU5URVJQUklTRSkubGVuZ3RoLFxuICAgICAgICBhZG1pbjoga2V5cy5maWx0ZXIoayA9PiBrLnRpZXIgPT09IFVzZXJUaWVyLkFETUlOKS5sZW5ndGgsXG4gICAgICB9XG4gICAgfTtcbiAgfVxufSJdLCJ2ZXJzaW9uIjozfQ==