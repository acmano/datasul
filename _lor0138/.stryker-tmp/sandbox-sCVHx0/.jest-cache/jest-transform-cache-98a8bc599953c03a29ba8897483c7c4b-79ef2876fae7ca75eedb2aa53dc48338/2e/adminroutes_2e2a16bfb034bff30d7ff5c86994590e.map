{"file":"/home/mano/projetos/datasul/lor0138/src/api/admin/routes/admin.routes.ts","mappings":";AAAA,uCAAuC;;AAEvC,qCAAoD;AACpD,kEAA+D;AAC/D,mEAAgE;AAChE,6DAAsD;AACtD,qFAAuE;AACvE,2CAAqE;AAErE,MAAM,MAAM,GAAG,IAAA,gBAAM,GAAE,CAAC;AAExB;;;;;;;;;;;;GAYG;AACH,MAAM,CAAC,GAAG,CAAC,WAAW,EAAE,kCAAU,EAAE,KAAK,EAAE,GAAY,EAAE,GAAa,EAAE,EAAE;IACxE,yCAAyC;IACzC,IAAI,GAAG,CAAC,IAAI,EAAE,IAAI,KAAK,uBAAQ,CAAC,KAAK,EAAE,CAAC;QACtC,MAAM,IAAI,2BAAkB,CAAC,uDAAuD,CAAC,CAAC;IACxF,CAAC;IAED,MAAM,KAAK,GAAG,6BAAa,CAAC,QAAQ,EAAE,CAAC;IAEvC,GAAG,CAAC,IAAI,CAAC;QACP,OAAO,EAAE,IAAI;QACb,IAAI,EAAE,KAAK;QACX,aAAa,EAAE,GAAG,CAAC,EAAE;KACtB,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH;;;;;;;;;GASG;AACH,MAAM,CAAC,IAAI,CAAC,oBAAoB,EAAE,kCAAU,EAAE,KAAK,EAAE,GAAY,EAAE,GAAa,EAAE,EAAE;IAClF,IAAI,GAAG,CAAC,IAAI,EAAE,IAAI,KAAK,uBAAQ,CAAC,KAAK,EAAE,CAAC;QACtC,MAAM,IAAI,2BAAkB,CAAC,6CAA6C,CAAC,CAAC;IAC9E,CAAC;IAED,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,aAAa,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;IAE3D,IAAI,CAAC,MAAM,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,EAAE,CAAC;QAClC,MAAM,aAAa,GAA2B,EAAE,CAAC;QACjD,IAAI,CAAC,MAAM;YAAE,aAAa,CAAC,MAAM,GAAG,aAAa,CAAC;QAClD,IAAI,CAAC,QAAQ;YAAE,aAAa,CAAC,QAAQ,GAAG,aAAa,CAAC;QACtD,IAAI,CAAC,IAAI;YAAE,aAAa,CAAC,IAAI,GAAG,aAAa,CAAC;QAE9C,MAAM,IAAI,wBAAe,CAAC,0CAA0C,EAAE,aAAa,CAAC,CAAC;IACvF,CAAC;IAED,MAAM,MAAM,GAAG,MAAM,6BAAa,CAAC,WAAW,CAC5C,MAAM,EACN,QAAQ,EACR,IAAI,EACJ,aAAa,CACd,CAAC;IAEF,GAAG,CAAC,IAAI,CAAC;QACP,OAAO,EAAE,IAAI;QACb,IAAI,EAAE;YACJ,MAAM;YACN,MAAM;YACN,QAAQ;YACR,IAAI;YACJ,aAAa;SACd;QACD,aAAa,EAAE,GAAG,CAAC,EAAE;KACtB,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH;;;;;;;GAOG;AACH,MAAM,CAAC,IAAI,CAAC,0BAA0B,EAAE,kCAAU,EAAE,KAAK,EAAE,GAAY,EAAE,GAAa,EAAE,EAAE;IACxF,IAAI,GAAG,CAAC,IAAI,EAAE,IAAI,KAAK,uBAAQ,CAAC,KAAK,EAAE,CAAC;QACtC,MAAM,IAAI,2BAAkB,CAAC,+CAA+C,CAAC,CAAC;IAChF,CAAC;IAED,MAAM,EAAE,MAAM,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;IAC9B,MAAM,OAAO,GAAG,MAAM,6BAAa,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;IAEtD,GAAG,CAAC,IAAI,CAAC;QACP,OAAO,EAAE,OAAO;QAChB,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC,wBAAwB;QAChE,aAAa,EAAE,GAAG,CAAC,EAAE;KACtB,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH;;;;;;;GAOG;AACH,MAAM,CAAC,GAAG,CAAC,mBAAmB,EAAE,kCAAU,EAAE,KAAK,EAAE,GAAY,EAAE,GAAa,EAAE,EAAE;IAChF,IAAI,GAAG,CAAC,IAAI,EAAE,IAAI,KAAK,uBAAQ,CAAC,KAAK,EAAE,CAAC;QACtC,MAAM,IAAI,2BAAkB,CAAC,+CAA+C,CAAC,CAAC;IAChF,CAAC;IAED,MAAM,MAAM,GAAG,GAAG,CAAC,KAAK,CAAC,MAA4B,CAAC;IACtD,MAAM,KAAK,GAAG,iCAAe,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;IAE/C,GAAG,CAAC,IAAI,CAAC;QACP,OAAO,EAAE,IAAI;QACb,IAAI,EAAE,KAAK;QACX,aAAa,EAAE,GAAG,CAAC,EAAE;KACtB,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH;;;;;;;GAOG;AACH,MAAM,CAAC,IAAI,CAAC,2BAA2B,EAAE,kCAAU,EAAE,KAAK,EAAE,GAAY,EAAE,GAAa,EAAE,EAAE;IACzF,IAAI,GAAG,CAAC,IAAI,EAAE,IAAI,KAAK,uBAAQ,CAAC,KAAK,EAAE,CAAC;QACtC,MAAM,IAAI,2BAAkB,CAAC,kDAAkD,CAAC,CAAC;IACnF,CAAC;IAED,MAAM,EAAE,MAAM,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;IAC9B,iCAAe,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;IAElC,GAAG,CAAC,IAAI,CAAC;QACP,OAAO,EAAE,IAAI;QACb,OAAO,EAAE,oCAAoC,MAAM,EAAE;QACrD,aAAa,EAAE,GAAG,CAAC,EAAE;KACtB,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH;;;;;;;GAOG;AACH,MAAM,CAAC,GAAG,CAAC,qBAAqB,EAAE,kCAAU,EAAE,KAAK,EAAE,GAAY,EAAE,GAAa,EAAE,EAAE;IAClF,IAAI,GAAG,CAAC,IAAI,EAAE,IAAI,KAAK,uBAAQ,CAAC,KAAK,EAAE,CAAC;QACtC,MAAM,IAAI,2BAAkB,CAAC,8CAA8C,CAAC,CAAC;IAC/E,CAAC;IAED,MAAM,EAAE,MAAM,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;IAC9B,MAAM,EAAE,IAAI,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;IAE1B,IAAI,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,uBAAQ,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC;QACrD,MAAM,IAAI,wBAAe,CAAC,eAAe,EAAE;YACzC,IAAI,EAAE,aAAa,MAAM,CAAC,MAAM,CAAC,uBAAQ,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;SACxD,CAAC,CAAC;IACL,CAAC;IAED,MAAM,6BAAa,CAAC,cAAc,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;IAEjD,GAAG,CAAC,IAAI,CAAC;QACP,OAAO,EAAE,IAAI;QACb,OAAO,EAAE,wBAAwB,IAAI,EAAE;QACvC,IAAI,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE;QACtB,aAAa,EAAE,GAAG,CAAC,EAAE;KACtB,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,kBAAe,MAAM,CAAC","names":[],"sources":["/home/mano/projetos/datasul/lor0138/src/api/admin/routes/admin.routes.ts"],"sourcesContent":["// src/api/admin/routes/admin.routes.ts\n\nimport { Router, Request, Response } from 'express';\nimport { ApiKeyService } from '@shared/services/ApiKeyService';\nimport { UserRateLimiter } from '@shared/utils/UserRateLimiter';\nimport { UserTier } from '@shared/types/apiKey.types';\nimport { apiKeyAuth } from '@shared/middlewares/apiKeyAuth.middleware';\nimport { AuthorizationError, ValidationError } from '@shared/errors';\n\nconst router = Router();\n\n/**\n * @openapi\n * /admin/api-keys:\n *   get:\n *     summary: Listar todas as API Keys\n *     tags:\n *       - Admin\n *     security:\n *       - ApiKeyAuth: []\n *     responses:\n *       200:\n *         description: Lista de API Keys\n */\nrouter.get('/api-keys', apiKeyAuth, async (req: Request, res: Response) => {\n  // Apenas admin pode listar todas as keys\n  if (req.user?.tier !== UserTier.ADMIN) {\n    throw new AuthorizationError('Apenas administradores podem listar todas as API Keys');\n  }\n\n  const stats = ApiKeyService.getStats();\n  \n  res.json({\n    success: true,\n    data: stats,\n    correlationId: req.id\n  });\n});\n\n/**\n * @openapi\n * /admin/api-keys/generate:\n *   post:\n *     summary: Gerar nova API Key\n *     tags:\n *       - Admin\n *     security:\n *       - ApiKeyAuth: []\n */\nrouter.post('/api-keys/generate', apiKeyAuth, async (req: Request, res: Response) => {\n  if (req.user?.tier !== UserTier.ADMIN) {\n    throw new AuthorizationError('Apenas administradores podem gerar API Keys');\n  }\n\n  const { userId, userName, tier, expiresInDays } = req.body;\n\n  if (!userId || !userName || !tier) {\n    const missingFields: Record<string, string> = {};\n    if (!userId) missingFields.userId = 'Obrigatório';\n    if (!userName) missingFields.userName = 'Obrigatório';\n    if (!tier) missingFields.tier = 'Obrigatório';\n    \n    throw new ValidationError('userId, userName e tier são obrigatórios', missingFields);\n  }\n\n  const apiKey = await ApiKeyService.generateKey(\n    userId,\n    userName,\n    tier,\n    expiresInDays\n  );\n\n  res.json({\n    success: true,\n    data: {\n      apiKey,\n      userId,\n      userName,\n      tier,\n      expiresInDays\n    },\n    correlationId: req.id\n  });\n});\n\n/**\n * @openapi\n * /admin/api-keys/{apiKey}/revoke:\n *   post:\n *     summary: Revogar API Key\n *     tags:\n *       - Admin\n */\nrouter.post('/api-keys/:apiKey/revoke', apiKeyAuth, async (req: Request, res: Response) => {\n  if (req.user?.tier !== UserTier.ADMIN) {\n    throw new AuthorizationError('Apenas administradores podem revogar API Keys');\n  }\n\n  const { apiKey } = req.params;\n  const revoked = await ApiKeyService.revokeKey(apiKey);\n\n  res.json({\n    success: revoked,\n    message: revoked ? 'API Key revogada' : 'API Key não encontrada',\n    correlationId: req.id\n  });\n});\n\n/**\n * @openapi\n * /admin/rate-limit/stats:\n *   get:\n *     summary: Estatísticas de rate limit\n *     tags:\n *       - Admin\n */\nrouter.get('/rate-limit/stats', apiKeyAuth, async (req: Request, res: Response) => {\n  if (req.user?.tier !== UserTier.ADMIN) {\n    throw new AuthorizationError('Apenas administradores podem ver estatísticas');\n  }\n\n  const userId = req.query.userId as string | undefined;\n  const stats = UserRateLimiter.getStats(userId);\n\n  res.json({\n    success: true,\n    data: stats,\n    correlationId: req.id\n  });\n});\n\n/**\n * @openapi\n * /admin/rate-limit/reset/{userId}:\n *   post:\n *     summary: Resetar rate limit de um usuário\n *     tags:\n *       - Admin\n */\nrouter.post('/rate-limit/reset/:userId', apiKeyAuth, async (req: Request, res: Response) => {\n  if (req.user?.tier !== UserTier.ADMIN) {\n    throw new AuthorizationError('Apenas administradores podem resetar rate limits');\n  }\n\n  const { userId } = req.params;\n  UserRateLimiter.resetUser(userId);\n\n  res.json({\n    success: true,\n    message: `Rate limit resetado para usuário ${userId}`,\n    correlationId: req.id\n  });\n});\n\n/**\n * @openapi\n * /admin/users/{userId}/tier:\n *   put:\n *     summary: Atualizar tier de um usuário\n *     tags:\n *       - Admin\n */\nrouter.put('/users/:userId/tier', apiKeyAuth, async (req: Request, res: Response) => {\n  if (req.user?.tier !== UserTier.ADMIN) {\n    throw new AuthorizationError('Apenas administradores podem atualizar tiers');\n  }\n\n  const { userId } = req.params;\n  const { tier } = req.body;\n\n  if (!tier || !Object.values(UserTier).includes(tier)) {\n    throw new ValidationError('Tier inválido', {\n      tier: `Deve ser: ${Object.values(UserTier).join(', ')}`\n    });\n  }\n\n  await ApiKeyService.updateUserTier(userId, tier);\n\n  res.json({\n    success: true,\n    message: `Tier atualizado para ${tier}`,\n    data: { userId, tier },\n    correlationId: req.id\n  });\n});\n\nexport default router;"],"version":3}