# ============================================
# CONFIGURA√á√ÉO UNIFICADA - Projeto LOR0138
# ============================================
# IMPORTANTE: Use este .env.example como base
# ============================================

# ==================== SERVIDOR ====================
PORT=3000
NODE_ENV=development
API_PREFIX=/api

# ==================== BANCO DE DADOS ====================

# Tipo de conex√£o: 'sqlserver' ou 'odbc'
DB_CONNECTION_TYPE=sqlserver

# SQL Server - Conex√£o
DB_SERVER=10.105.0.4\LOREN
DB_PORT=1433
DB_USER=dcloren

# ‚úÖ SENHA COM CARACTERES ESPECIAIS: Use aspas simples!
# Se a senha tem #, ela DEVE estar entre aspas simples
DB_PASSWORD='#dcloren#'

# ‚úÖ DATABASE VAZIO = Usa database padr√£o do SQL Server user
# Deixe vazio para conectar no database padr√£o configurado para o usu√°rio
# For√É¬ßar um database espec√≠fico pode causar erro de permiss√£o
DB_DATABASE_EMP=
DB_DATABASE_MULT=

# ‚ùå N√ÉO USE MAIS ESTAS VARI√ÅVEIS (deprecated)
# DB_NAME_EMP=emp
# DB_NAME_MULT=mult

# ‚úÖ TIMEOUTS: Aceita 3 formatos
# - N√∫mero puro: 30000 (milissegundos)
# - Com 's': 30s (segundos, convertido para ms)
# - Com 'ms': 30000ms (milissegundos expl√≠citos)
#
# RECOMENDADO: Use milissegundos puros para evitar confus√£o
DB_CONNECTION_TIMEOUT=15000  # 15 segundos para conectar
DB_REQUEST_TIMEOUT=30000     # 30 segundos para queries

# SQL Server - Seguran√ßa
DB_ENCRYPT=false
DB_TRUST_SERVER_CERTIFICATE=true

# ODBC (se DB_CONNECTION_TYPE=odbc)
ODBC_DSN_EMP=PRD_EMS2EMP
ODBC_DSN_MULT=PRD_EMS2MULT
ODBC_CONNECTION_TIMEOUT=15000

# Mock Data (desenvolvimento/testes)
USE_MOCK_DATA=false

# ==================== CORS ====================

# ‚úÖ VARI√ÅVEL CORRETA (n√£o CORS_ORIGIN)
# M√∫ltiplas origens separadas por v√≠rgula
CORS_ALLOWED_ORIGINS=http://lor0138.lorenzetti.ibe:3000,http://localhost:3000

# ‚ùå N√ÉO USE (deprecated)
# CORS_ORIGIN=http://localhost:3000

# ==================== TIMEOUTS HTTP ====================

# Timeout padr√£o de requisi√ß√µes HTTP
HTTP_REQUEST_TIMEOUT=30s

# Timeout para opera√ß√µes pesadas
HTTP_HEAVY_TIMEOUT=60s

# Timeout para health check (deve ser r√°pido)
HTTP_HEALTH_TIMEOUT=5s

# ==================== CACHE (Redis) ====================

# Habilitar cache
CACHE_ENABLED=true

# Estrat√©gia de cache:
# - 'memory': Cache apenas em mem√≥ria (servidor √∫nico)
# - 'redis': Cache apenas no Redis (m√∫ltiplos servidores)
# - 'layered': L1 (mem√≥ria) + L2 (Redis) - RECOMENDADO
CACHE_STRATEGY=layered

# URL do Redis (se CACHE_STRATEGY=redis ou layered)
CACHE_REDIS_URL=redis://localhost:6379

# TTL padr√£o do cache (pode usar 's', 'ms', ou 'm' para minutos)
CACHE_DEFAULT_TTL=5m  # 5 minutos (ou '300s' ou '300000ms' ou '300000')

# ==================== LOGGING ====================

# N√≠vel de log: error, warn, info, http, debug
LOG_LEVEL=debug

# ============================================
# OBSERVA√á√ïES IMPORTANTES
# ============================================
#
# 1. SENHAS COM #:
#    ‚úÖ DB_PASSWORD='#senha#'
#    ‚ùå DB_PASSWORD=#senha#  (# √© coment√°rio)
#    ‚ùå DB_PASSWORD="#senha#" (aspas duplas incluem nas senha)
#
# 2. DATABASE VAZIO:
#    ‚úÖ DB_DATABASE_EMP=  (usa default do user)
#    ‚ùå DB_DATABASE_EMP=emp (for√ßa database, pode n√£o ter permiss√£o)
#
# 3. TIMEOUTS:
#    ‚úÖ 30000 ou 30s ou 30000ms (todos funcionam)
#    ‚ùå N√£o misture formatos no mesmo projeto
#    üìå RECOMENDADO: Use apenas milissegundos (30000)
#
# 4. CACHE:
#    - 'memory': R√°pido, mas n√£o compartilha entre inst√¢ncias
#    - 'redis': Compartilhado, mas mais lento que mem√≥ria
#    - 'layered': Melhor dos dois mundos (L1 + L2)
#
# 5. CORS:
#    - Use CORS_ALLOWED_ORIGINS (plural)
#    - M√∫ltiplas origens: separadas por v√≠rgula
#    - N√£o use CORS_ORIGIN (deprecated)
#
# ============================================