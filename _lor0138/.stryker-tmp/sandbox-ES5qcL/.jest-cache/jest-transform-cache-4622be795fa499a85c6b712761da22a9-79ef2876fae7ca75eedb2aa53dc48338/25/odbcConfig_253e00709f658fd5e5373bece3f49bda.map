{"file":"/home/mano/projetos/datasul/lor0138/.stryker-tmp/sandbox-ES5qcL/src/infrastructure/database/config/odbcConfig.ts","mappings":";AAAA,cAAc;AACd,mDAAmD;;;AAQnD;;GAEG;AACI,MAAM,uBAAuB,GAAG,CAAC,QAAwB,EAAU,EAAE;IAC1E,MAAM,OAAO,GACX,QAAQ,KAAK,KAAK;QAChB,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,YAAY,IAAI,aAAa;QAC3C,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,aAAa,IAAI,cAAc,CAAC;IAElD,MAAM,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC,SAAS,IAAI,OAAO,CAAC,GAAG,CAAC,OAAO,IAAI,EAAE,CAAC;IAChE,MAAM,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,aAAa,IAAI,OAAO,CAAC,GAAG,CAAC,WAAW,IAAI,EAAE,CAAC;IAE5E,OAAO,OAAO,OAAO,QAAQ,IAAI,QAAQ,QAAQ,EAAE,CAAC;AACtD,CAAC,CAAC;AAVW,QAAA,uBAAuB,2BAUlC;AAEF;;GAEG;AACI,MAAM,aAAa,GAAG,CAAC,QAAwB,EAAc,EAAE;IACpE,MAAM,gBAAgB,GAAG,IAAA,+BAAuB,EAAC,QAAQ,CAAC,CAAC;IAE3D,+EAA+E;IAC/E,MAAM,iBAAiB,GAAG,QAAQ,CAChC,OAAO,CAAC,GAAG,CAAC,uBAAuB,IAAI,OAAO,EAC9C,EAAE,CACH,CAAC;IAEF,MAAM,cAAc,GAAG,QAAQ,CAC7B,OAAO,CAAC,GAAG,CAAC,oBAAoB,IAAI,OAAO,EAC3C,EAAE,CACH,CAAC;IAEF,OAAO;QACL,gBAAgB;QAChB,iBAAiB;QACjB,cAAc;KACf,CAAC;AACJ,CAAC,CAAC;AAnBW,QAAA,aAAa,iBAmBxB;AAEF;;GAEG;AACI,MAAM,kBAAkB,GAAG,GAAS,EAAE;IAC3C,MAAM,YAAY,GAAG,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;IAEhD,KAAK,MAAM,OAAO,IAAI,YAAY,EAAE,CAAC;QACnC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC;YAC1B,MAAM,IAAI,KAAK,CAAC,oDAAoD,OAAO,EAAE,CAAC,CAAC;QACjF,CAAC;IACH,CAAC;IAED,oBAAoB;IACpB,MAAM,iBAAiB,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,uBAAuB,IAAI,OAAO,EAAE,EAAE,CAAC,CAAC;IACvF,MAAM,cAAc,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,oBAAoB,IAAI,OAAO,EAAE,EAAE,CAAC,CAAC;IAEjF,IAAI,KAAK,CAAC,iBAAiB,CAAC,IAAI,iBAAiB,GAAG,IAAI,EAAE,CAAC;QACzD,MAAM,IAAI,KAAK,CACb,mEAAmE,OAAO,CAAC,GAAG,CAAC,uBAAuB,GAAG,CAC1G,CAAC;IACJ,CAAC;IAED,IAAI,KAAK,CAAC,cAAc,CAAC,IAAI,cAAc,GAAG,IAAI,EAAE,CAAC;QACnD,MAAM,IAAI,KAAK,CACb,gEAAgE,OAAO,CAAC,GAAG,CAAC,oBAAoB,GAAG,CACpG,CAAC;IACJ,CAAC;AACH,CAAC,CAAC;AAxBW,QAAA,kBAAkB,sBAwB7B","names":[],"sources":["/home/mano/projetos/datasul/lor0138/.stryker-tmp/sandbox-ES5qcL/src/infrastructure/database/config/odbcConfig.ts"],"sourcesContent":["// @ts-nocheck\n// src/infrastructure/database/config/odbcConfig.ts\r\n\r\nexport interface OdbcConfig {\r\n  connectionString: string;\r\n  connectionTimeout: number; // milissegundos\r\n  commandTimeout: number;    // milissegundos\r\n}\r\n\r\n/**\r\n * Retorna connection string ODBC para o database especificado\r\n */\r\nexport const getOdbcConnectionString = (database: 'EMP' | 'MULT'): string => {\r\n  const dsnName =\r\n    database === 'EMP'\r\n      ? process.env.ODBC_DSN_EMP || 'PRD_EMS2EMP'\r\n      : process.env.ODBC_DSN_MULT || 'PRD_EMS2MULT';\r\n\r\n  const user = process.env.ODBC_USER || process.env.DB_USER || '';\r\n  const password = process.env.ODBC_PASSWORD || process.env.DB_PASSWORD || '';\r\n\r\n  return `DSN=${dsnName};UID=${user};PWD=${password}`;\r\n};\r\n\r\n/**\r\n * ✅ NOVO: Retorna configuração completa com timeouts\r\n */\r\nexport const getOdbcConfig = (database: 'EMP' | 'MULT'): OdbcConfig => {\r\n  const connectionString = getOdbcConnectionString(database);\r\n\r\n  // ✅ IMPORTANTE: Usa parseInt() direto, então .env deve ter milissegundos puros\r\n  const connectionTimeout = parseInt(\r\n    process.env.ODBC_CONNECTION_TIMEOUT || '15000',\r\n    10\r\n  );\r\n\r\n  const commandTimeout = parseInt(\r\n    process.env.ODBC_COMMAND_TIMEOUT || '30000',\r\n    10\r\n  );\r\n\r\n  return {\r\n    connectionString,\r\n    connectionTimeout,\r\n    commandTimeout\r\n  };\r\n};\r\n\r\n/**\r\n * Valida configuração ODBC\r\n */\r\nexport const validateOdbcConfig = (): void => {\r\n  const requiredVars = ['DB_USER', 'DB_PASSWORD'];\r\n\r\n  for (const varName of requiredVars) {\r\n    if (!process.env[varName]) {\r\n      throw new Error(`Variável de ambiente obrigatória não encontrada: ${varName}`);\r\n    }\r\n  }\r\n\r\n  // Verifica timeouts\r\n  const connectionTimeout = parseInt(process.env.ODBC_CONNECTION_TIMEOUT || '15000', 10);\r\n  const commandTimeout = parseInt(process.env.ODBC_COMMAND_TIMEOUT || '30000', 10);\r\n\r\n  if (isNaN(connectionTimeout) || connectionTimeout < 1000) {\r\n    throw new Error(\r\n      `ODBC_CONNECTION_TIMEOUT inválido: deve ser >= 1000ms (recebido: ${process.env.ODBC_CONNECTION_TIMEOUT})`\r\n    );\r\n  }\r\n\r\n  if (isNaN(commandTimeout) || commandTimeout < 1000) {\r\n    throw new Error(\r\n      `ODBC_COMMAND_TIMEOUT inválido: deve ser >= 1000ms (recebido: ${process.env.ODBC_COMMAND_TIMEOUT})`\r\n    );\r\n  }\r\n};"],"version":3}