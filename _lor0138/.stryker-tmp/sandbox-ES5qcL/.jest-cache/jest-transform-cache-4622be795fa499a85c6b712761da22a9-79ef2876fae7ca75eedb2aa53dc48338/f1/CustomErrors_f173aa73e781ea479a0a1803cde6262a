0df2b75fd39ee9b96e3f9565637040b5
"use strict";
// @ts-nocheck
// src/shared/errors/CustomErrors.ts
Object.defineProperty(exports, "__esModule", { value: true });
exports.BusinessRuleError = exports.ConfigurationError = exports.RateLimitError = exports.AuthorizationError = exports.AuthenticationError = exports.CacheError = exports.ExternalServiceError = exports.ConnectionTimeoutError = exports.DatabaseError = exports.ValidationError = exports.EstabelecimentoNotFoundError = exports.ItemNotFoundError = void 0;
const AppError_1 = require("./AppError");
/**
 * Erro quando item não é encontrado
 */
class ItemNotFoundError extends AppError_1.AppError {
    constructor(itemCodigo) {
        super(404, `Item ${itemCodigo} não encontrado`, true, { itemCodigo });
    }
}
exports.ItemNotFoundError = ItemNotFoundError;
/**
 * Erro quando estabelecimento não é encontrado
 */
class EstabelecimentoNotFoundError extends AppError_1.AppError {
    constructor(estabCodigo) {
        super(404, `Estabelecimento ${estabCodigo} não encontrado`, true, { estabCodigo });
    }
}
exports.EstabelecimentoNotFoundError = EstabelecimentoNotFoundError;
/**
 * Erro de validação de dados
 */
class ValidationError extends AppError_1.AppError {
    constructor(message, fields) {
        super(400, message, true, { fields });
    }
}
exports.ValidationError = ValidationError;
/**
 * Erro de banco de dados
 */
class DatabaseError extends AppError_1.AppError {
    constructor(message, originalError) {
        super(500, `Erro no banco de dados: ${message}`, true, {
            originalMessage: originalError?.message,
            ...(process.env.NODE_ENV === 'development' && {
                stack: originalError?.stack
            }),
        });
    }
}
exports.DatabaseError = DatabaseError;
/**
 * Erro de timeout de conexão
 */
class ConnectionTimeoutError extends AppError_1.AppError {
    constructor(service, timeout) {
        super(503, `Timeout ao conectar com ${service} após ${timeout}ms`, true, { service, timeout });
    }
}
exports.ConnectionTimeoutError = ConnectionTimeoutError;
/**
 * Erro de conexão com serviço externo
 */
class ExternalServiceError extends AppError_1.AppError {
    constructor(service, message) {
        super(503, `Erro no serviço ${service}: ${message}`, true, { service });
    }
}
exports.ExternalServiceError = ExternalServiceError;
/**
 * Erro de cache
 */
class CacheError extends AppError_1.AppError {
    constructor(operation, message) {
        super(500, `Erro no cache (${operation}): ${message}`, true, { operation });
    }
}
exports.CacheError = CacheError;
/**
 * Erro de autenticação
 */
class AuthenticationError extends AppError_1.AppError {
    constructor(message = 'Não autenticado') {
        super(401, message, true);
    }
}
exports.AuthenticationError = AuthenticationError;
/**
 * Erro de autorização
 */
class AuthorizationError extends AppError_1.AppError {
    constructor(message = 'Não autorizado') {
        super(403, message, true);
    }
}
exports.AuthorizationError = AuthorizationError;
/**
 * Erro de rate limit
 */
class RateLimitError extends AppError_1.AppError {
    constructor(retryAfter) {
        super(429, 'Muitas requisições. Tente novamente em alguns segundos.', true, { retryAfter });
    }
}
exports.RateLimitError = RateLimitError;
/**
 * Erro de configuração
 */
class ConfigurationError extends AppError_1.AppError {
    constructor(message) {
        super(500, `Erro de configuração: ${message}`, false);
    }
}
exports.ConfigurationError = ConfigurationError;
/**
 * Erro de business rule
 */
class BusinessRuleError extends AppError_1.AppError {
    constructor(message, rule) {
        super(422, message, true, { rule });
    }
}
exports.BusinessRuleError = BusinessRuleError;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvbWFuby9wcm9qZXRvcy9kYXRhc3VsL2xvcjAxMzgvLnN0cnlrZXItdG1wL3NhbmRib3gtRVM1cWNML3NyYy9zaGFyZWQvZXJyb3JzL0N1c3RvbUVycm9ycy50cyIsIm1hcHBpbmdzIjoiO0FBQUEsY0FBYztBQUNkLG9DQUFvQzs7O0FBRXBDLHlDQUFzQztBQUV0Qzs7R0FFRztBQUNILE1BQWEsaUJBQWtCLFNBQVEsbUJBQVE7SUFDN0MsWUFBWSxVQUFrQjtRQUM1QixLQUFLLENBQUMsR0FBRyxFQUFFLFFBQVEsVUFBVSxpQkFBaUIsRUFBRSxJQUFJLEVBQUUsRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDO0lBQ3hFLENBQUM7Q0FDRjtBQUpELDhDQUlDO0FBRUQ7O0dBRUc7QUFDSCxNQUFhLDRCQUE2QixTQUFRLG1CQUFRO0lBQ3hELFlBQVksV0FBbUI7UUFDN0IsS0FBSyxDQUFDLEdBQUcsRUFBRSxtQkFBbUIsV0FBVyxpQkFBaUIsRUFBRSxJQUFJLEVBQUUsRUFBRSxXQUFXLEVBQUUsQ0FBQyxDQUFDO0lBQ3JGLENBQUM7Q0FDRjtBQUpELG9FQUlDO0FBRUQ7O0dBRUc7QUFDSCxNQUFhLGVBQWdCLFNBQVEsbUJBQVE7SUFDM0MsWUFBWSxPQUFlLEVBQUUsTUFBK0I7UUFDMUQsS0FBSyxDQUFDLEdBQUcsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUN4QyxDQUFDO0NBQ0Y7QUFKRCwwQ0FJQztBQUVEOztHQUVHO0FBQ0gsTUFBYSxhQUFjLFNBQVEsbUJBQVE7SUFDekMsWUFBWSxPQUFlLEVBQUUsYUFBcUI7UUFDaEQsS0FBSyxDQUFDLEdBQUcsRUFBRSwyQkFBMkIsT0FBTyxFQUFFLEVBQUUsSUFBSSxFQUFFO1lBQ3JELGVBQWUsRUFBRSxhQUFhLEVBQUUsT0FBTztZQUN2QyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEtBQUssYUFBYSxJQUFJO2dCQUM1QyxLQUFLLEVBQUUsYUFBYSxFQUFFLEtBQUs7YUFDNUIsQ0FBQztTQUNILENBQUMsQ0FBQztJQUNMLENBQUM7Q0FDRjtBQVRELHNDQVNDO0FBRUQ7O0dBRUc7QUFDSCxNQUFhLHNCQUF1QixTQUFRLG1CQUFRO0lBQ2xELFlBQVksT0FBZSxFQUFFLE9BQWU7UUFDMUMsS0FBSyxDQUNILEdBQUcsRUFDSCwyQkFBMkIsT0FBTyxTQUFTLE9BQU8sSUFBSSxFQUN0RCxJQUFJLEVBQ0osRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQ3JCLENBQUM7SUFDSixDQUFDO0NBQ0Y7QUFURCx3REFTQztBQUVEOztHQUVHO0FBQ0gsTUFBYSxvQkFBcUIsU0FBUSxtQkFBUTtJQUNoRCxZQUFZLE9BQWUsRUFBRSxPQUFlO1FBQzFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsbUJBQW1CLE9BQU8sS0FBSyxPQUFPLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO0lBQzFFLENBQUM7Q0FDRjtBQUpELG9EQUlDO0FBRUQ7O0dBRUc7QUFDSCxNQUFhLFVBQVcsU0FBUSxtQkFBUTtJQUN0QyxZQUFZLFNBQWlCLEVBQUUsT0FBZTtRQUM1QyxLQUFLLENBQUMsR0FBRyxFQUFFLGtCQUFrQixTQUFTLE1BQU0sT0FBTyxFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQztJQUM5RSxDQUFDO0NBQ0Y7QUFKRCxnQ0FJQztBQUVEOztHQUVHO0FBQ0gsTUFBYSxtQkFBb0IsU0FBUSxtQkFBUTtJQUMvQyxZQUFZLFVBQWtCLGlCQUFpQjtRQUM3QyxLQUFLLENBQUMsR0FBRyxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM1QixDQUFDO0NBQ0Y7QUFKRCxrREFJQztBQUVEOztHQUVHO0FBQ0gsTUFBYSxrQkFBbUIsU0FBUSxtQkFBUTtJQUM5QyxZQUFZLFVBQWtCLGdCQUFnQjtRQUM1QyxLQUFLLENBQUMsR0FBRyxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM1QixDQUFDO0NBQ0Y7QUFKRCxnREFJQztBQUVEOztHQUVHO0FBQ0gsTUFBYSxjQUFlLFNBQVEsbUJBQVE7SUFDMUMsWUFBWSxVQUFtQjtRQUM3QixLQUFLLENBQ0gsR0FBRyxFQUNILHlEQUF5RCxFQUN6RCxJQUFJLEVBQ0osRUFBRSxVQUFVLEVBQUUsQ0FDZixDQUFDO0lBQ0osQ0FBQztDQUNGO0FBVEQsd0NBU0M7QUFFRDs7R0FFRztBQUNILE1BQWEsa0JBQW1CLFNBQVEsbUJBQVE7SUFDOUMsWUFBWSxPQUFlO1FBQ3pCLEtBQUssQ0FBQyxHQUFHLEVBQUUseUJBQXlCLE9BQU8sRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3hELENBQUM7Q0FDRjtBQUpELGdEQUlDO0FBRUQ7O0dBRUc7QUFDSCxNQUFhLGlCQUFrQixTQUFRLG1CQUFRO0lBQzdDLFlBQVksT0FBZSxFQUFFLElBQWE7UUFDeEMsS0FBSyxDQUFDLEdBQUcsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUN0QyxDQUFDO0NBQ0Y7QUFKRCw4Q0FJQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS9tYW5vL3Byb2pldG9zL2RhdGFzdWwvbG9yMDEzOC8uc3RyeWtlci10bXAvc2FuZGJveC1FUzVxY0wvc3JjL3NoYXJlZC9lcnJvcnMvQ3VzdG9tRXJyb3JzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEB0cy1ub2NoZWNrXG4vLyBzcmMvc2hhcmVkL2Vycm9ycy9DdXN0b21FcnJvcnMudHNcblxuaW1wb3J0IHsgQXBwRXJyb3IgfSBmcm9tICcuL0FwcEVycm9yJztcblxuLyoqXG4gKiBFcnJvIHF1YW5kbyBpdGVtIG7Do28gw6kgZW5jb250cmFkb1xuICovXG5leHBvcnQgY2xhc3MgSXRlbU5vdEZvdW5kRXJyb3IgZXh0ZW5kcyBBcHBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKGl0ZW1Db2RpZ286IHN0cmluZykge1xuICAgIHN1cGVyKDQwNCwgYEl0ZW0gJHtpdGVtQ29kaWdvfSBuw6NvIGVuY29udHJhZG9gLCB0cnVlLCB7IGl0ZW1Db2RpZ28gfSk7XG4gIH1cbn1cblxuLyoqXG4gKiBFcnJvIHF1YW5kbyBlc3RhYmVsZWNpbWVudG8gbsOjbyDDqSBlbmNvbnRyYWRvXG4gKi9cbmV4cG9ydCBjbGFzcyBFc3RhYmVsZWNpbWVudG9Ob3RGb3VuZEVycm9yIGV4dGVuZHMgQXBwRXJyb3Ige1xuICBjb25zdHJ1Y3Rvcihlc3RhYkNvZGlnbzogc3RyaW5nKSB7XG4gICAgc3VwZXIoNDA0LCBgRXN0YWJlbGVjaW1lbnRvICR7ZXN0YWJDb2RpZ299IG7Do28gZW5jb250cmFkb2AsIHRydWUsIHsgZXN0YWJDb2RpZ28gfSk7XG4gIH1cbn1cblxuLyoqXG4gKiBFcnJvIGRlIHZhbGlkYcOnw6NvIGRlIGRhZG9zXG4gKi9cbmV4cG9ydCBjbGFzcyBWYWxpZGF0aW9uRXJyb3IgZXh0ZW5kcyBBcHBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2U6IHN0cmluZywgZmllbGRzPzogUmVjb3JkPHN0cmluZywgc3RyaW5nPikge1xuICAgIHN1cGVyKDQwMCwgbWVzc2FnZSwgdHJ1ZSwgeyBmaWVsZHMgfSk7XG4gIH1cbn1cblxuLyoqXG4gKiBFcnJvIGRlIGJhbmNvIGRlIGRhZG9zXG4gKi9cbmV4cG9ydCBjbGFzcyBEYXRhYmFzZUVycm9yIGV4dGVuZHMgQXBwRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlOiBzdHJpbmcsIG9yaWdpbmFsRXJyb3I/OiBFcnJvcikge1xuICAgIHN1cGVyKDUwMCwgYEVycm8gbm8gYmFuY28gZGUgZGFkb3M6ICR7bWVzc2FnZX1gLCB0cnVlLCB7XG4gICAgICBvcmlnaW5hbE1lc3NhZ2U6IG9yaWdpbmFsRXJyb3I/Lm1lc3NhZ2UsXG4gICAgICAuLi4ocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcgJiYgeyBcbiAgICAgICAgc3RhY2s6IG9yaWdpbmFsRXJyb3I/LnN0YWNrIFxuICAgICAgfSksXG4gICAgfSk7XG4gIH1cbn1cblxuLyoqXG4gKiBFcnJvIGRlIHRpbWVvdXQgZGUgY29uZXjDo29cbiAqL1xuZXhwb3J0IGNsYXNzIENvbm5lY3Rpb25UaW1lb3V0RXJyb3IgZXh0ZW5kcyBBcHBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKHNlcnZpY2U6IHN0cmluZywgdGltZW91dDogbnVtYmVyKSB7XG4gICAgc3VwZXIoXG4gICAgICA1MDMsXG4gICAgICBgVGltZW91dCBhbyBjb25lY3RhciBjb20gJHtzZXJ2aWNlfSBhcMOzcyAke3RpbWVvdXR9bXNgLFxuICAgICAgdHJ1ZSxcbiAgICAgIHsgc2VydmljZSwgdGltZW91dCB9XG4gICAgKTtcbiAgfVxufVxuXG4vKipcbiAqIEVycm8gZGUgY29uZXjDo28gY29tIHNlcnZpw6dvIGV4dGVybm9cbiAqL1xuZXhwb3J0IGNsYXNzIEV4dGVybmFsU2VydmljZUVycm9yIGV4dGVuZHMgQXBwRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihzZXJ2aWNlOiBzdHJpbmcsIG1lc3NhZ2U6IHN0cmluZykge1xuICAgIHN1cGVyKDUwMywgYEVycm8gbm8gc2VydmnDp28gJHtzZXJ2aWNlfTogJHttZXNzYWdlfWAsIHRydWUsIHsgc2VydmljZSB9KTtcbiAgfVxufVxuXG4vKipcbiAqIEVycm8gZGUgY2FjaGVcbiAqL1xuZXhwb3J0IGNsYXNzIENhY2hlRXJyb3IgZXh0ZW5kcyBBcHBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG9wZXJhdGlvbjogc3RyaW5nLCBtZXNzYWdlOiBzdHJpbmcpIHtcbiAgICBzdXBlcig1MDAsIGBFcnJvIG5vIGNhY2hlICgke29wZXJhdGlvbn0pOiAke21lc3NhZ2V9YCwgdHJ1ZSwgeyBvcGVyYXRpb24gfSk7XG4gIH1cbn1cblxuLyoqXG4gKiBFcnJvIGRlIGF1dGVudGljYcOnw6NvXG4gKi9cbmV4cG9ydCBjbGFzcyBBdXRoZW50aWNhdGlvbkVycm9yIGV4dGVuZHMgQXBwRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlOiBzdHJpbmcgPSAnTsOjbyBhdXRlbnRpY2FkbycpIHtcbiAgICBzdXBlcig0MDEsIG1lc3NhZ2UsIHRydWUpO1xuICB9XG59XG5cbi8qKlxuICogRXJybyBkZSBhdXRvcml6YcOnw6NvXG4gKi9cbmV4cG9ydCBjbGFzcyBBdXRob3JpemF0aW9uRXJyb3IgZXh0ZW5kcyBBcHBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2U6IHN0cmluZyA9ICdOw6NvIGF1dG9yaXphZG8nKSB7XG4gICAgc3VwZXIoNDAzLCBtZXNzYWdlLCB0cnVlKTtcbiAgfVxufVxuXG4vKipcbiAqIEVycm8gZGUgcmF0ZSBsaW1pdFxuICovXG5leHBvcnQgY2xhc3MgUmF0ZUxpbWl0RXJyb3IgZXh0ZW5kcyBBcHBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKHJldHJ5QWZ0ZXI/OiBudW1iZXIpIHtcbiAgICBzdXBlcihcbiAgICAgIDQyOSxcbiAgICAgICdNdWl0YXMgcmVxdWlzacOnw7Vlcy4gVGVudGUgbm92YW1lbnRlIGVtIGFsZ3VucyBzZWd1bmRvcy4nLFxuICAgICAgdHJ1ZSxcbiAgICAgIHsgcmV0cnlBZnRlciB9XG4gICAgKTtcbiAgfVxufVxuXG4vKipcbiAqIEVycm8gZGUgY29uZmlndXJhw6fDo29cbiAqL1xuZXhwb3J0IGNsYXNzIENvbmZpZ3VyYXRpb25FcnJvciBleHRlbmRzIEFwcEVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nKSB7XG4gICAgc3VwZXIoNTAwLCBgRXJybyBkZSBjb25maWd1cmHDp8OjbzogJHttZXNzYWdlfWAsIGZhbHNlKTtcbiAgfVxufVxuXG4vKipcbiAqIEVycm8gZGUgYnVzaW5lc3MgcnVsZVxuICovXG5leHBvcnQgY2xhc3MgQnVzaW5lc3NSdWxlRXJyb3IgZXh0ZW5kcyBBcHBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2U6IHN0cmluZywgcnVsZT86IHN0cmluZykge1xuICAgIHN1cGVyKDQyMiwgbWVzc2FnZSwgdHJ1ZSwgeyBydWxlIH0pO1xuICB9XG59Il0sInZlcnNpb24iOjN9