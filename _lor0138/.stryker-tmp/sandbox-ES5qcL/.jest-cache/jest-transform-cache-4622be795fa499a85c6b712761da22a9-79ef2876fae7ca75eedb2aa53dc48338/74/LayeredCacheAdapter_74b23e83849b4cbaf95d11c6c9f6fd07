1b2efd52d55803ae975f27c1ca3434d9
"use strict";
// @ts-nocheck
// src/shared/utils/cache/LayeredCacheAdapter.ts
Object.defineProperty(exports, "__esModule", { value: true });
exports.LayeredCacheAdapter = void 0;
const logger_1 = require("../logger");
/**
 * Adaptador de cache em camadas (L1 + L2)
 *
 * Estrat√©gia:
 * 1. GET: Busca L1 ‚Üí L2 ‚Üí Banco (promove L2‚ÜíL1 em hit)
 * 2. SET: Armazena L1 + L2 simultaneamente
 * 3. DELETE: Remove de L1 + L2
 *
 * Benef√≠cios:
 * - Performance m√°xima (L1 mem√≥ria)
 * - Compartilhamento entre servidores (L2 Redis)
 * - Redund√¢ncia (fallback L1‚ÜîL2)
 */
class LayeredCacheAdapter {
    constructor(l1, l2, name = 'Layered') {
        // Estat√≠sticas
        this.stats = {
            l1Hits: 0,
            l1Misses: 0,
            l2Hits: 0,
            l2Misses: 0,
            totalHits: 0,
            totalMisses: 0
        };
        this.l1 = l1;
        this.l2 = l2;
        this.name = name;
        logger_1.log.info(`${this.name} cache inicializado (L1 + L2)`);
    }
    async get(key) {
        try {
            // 1Ô∏è‚É£ Tenta L1 (mem√≥ria)
            const l1Value = await this.l1.get(key);
            if (l1Value !== undefined) {
                this.stats.l1Hits++;
                this.stats.totalHits++;
                logger_1.log.debug(`${this.name} L1 HIT`, { key });
                return l1Value;
            }
            this.stats.l1Misses++;
            // 2Ô∏è‚É£ Tenta L2 (Redis)
            const l2Value = await this.l2.get(key);
            if (l2Value !== undefined) {
                this.stats.l2Hits++;
                this.stats.totalHits++;
                logger_1.log.debug(`${this.name} L2 HIT`, { key });
                // üîº PROMOVE para L1 (pr√≥xima leitura ser√° mais r√°pida)
                await this.l1.set(key, l2Value).catch(err => {
                    logger_1.log.warn(`${this.name} falha ao promover para L1`, { key, error: err });
                });
                return l2Value;
            }
            this.stats.l2Misses++;
            this.stats.totalMisses++;
            logger_1.log.debug(`${this.name} MISS (L1 e L2)`, { key });
            return undefined;
        }
        catch (error) {
            logger_1.log.error(`${this.name} GET error`, { key, error });
            return undefined;
        }
    }
    async set(key, value, ttl) {
        try {
            // Armazena em AMBAS as camadas simultaneamente
            const [l1Success, l2Success] = await Promise.allSettled([
                this.l1.set(key, value, ttl),
                this.l2.set(key, value, ttl)
            ]);
            const l1Ok = l1Success.status === 'fulfilled' && l1Success.value;
            const l2Ok = l2Success.status === 'fulfilled' && l2Success.value;
            if (!l1Ok) {
                logger_1.log.warn(`${this.name} falha L1 SET`, { key });
            }
            if (!l2Ok) {
                logger_1.log.warn(`${this.name} falha L2 SET`, { key });
            }
            logger_1.log.debug(`${this.name} SET`, {
                key,
                ttl,
                l1: l1Ok ? 'OK' : 'FAIL',
                l2: l2Ok ? 'OK' : 'FAIL'
            });
            // Considera sucesso se pelo menos uma camada funcionou
            return l1Ok || l2Ok;
        }
        catch (error) {
            logger_1.log.error(`${this.name} SET error`, { key, error });
            return false;
        }
    }
    async delete(key) {
        try {
            // Remove de AMBAS as camadas
            const [l1Deleted, l2Deleted] = await Promise.allSettled([
                this.l1.delete(key),
                this.l2.delete(key)
            ]);
            const l1Count = l1Deleted.status === 'fulfilled' ? l1Deleted.value : 0;
            const l2Count = l2Deleted.status === 'fulfilled' ? l2Deleted.value : 0;
            const total = l1Count + l2Count;
            logger_1.log.debug(`${this.name} DELETE`, {
                key,
                l1: l1Count,
                l2: l2Count,
                total
            });
            return total;
        }
        catch (error) {
            logger_1.log.error(`${this.name} DELETE error`, { key, error });
            return 0;
        }
    }
    async flush() {
        try {
            // Limpa AMBAS as camadas
            await Promise.allSettled([
                this.l1.flush(),
                this.l2.flush()
            ]);
            logger_1.log.info(`${this.name} FLUSH ALL (L1 + L2)`);
            // Reseta estat√≠sticas
            this.stats = {
                l1Hits: 0,
                l1Misses: 0,
                l2Hits: 0,
                l2Misses: 0,
                totalHits: 0,
                totalMisses: 0
            };
        }
        catch (error) {
            logger_1.log.error(`${this.name} FLUSH error`, { error });
        }
    }
    async keys(pattern) {
        try {
            // Retorna UNI√ÉO de L1 + L2 (sem duplicatas)
            const [l1Keys, l2Keys] = await Promise.allSettled([
                this.l1.keys(pattern),
                this.l2.keys(pattern)
            ]);
            const l1List = l1Keys.status === 'fulfilled' ? l1Keys.value : [];
            const l2List = l2Keys.status === 'fulfilled' ? l2Keys.value : [];
            // Remove duplicatas
            const uniqueKeys = [...new Set([...l1List, ...l2List])];
            logger_1.log.debug(`${this.name} KEYS`, {
                pattern,
                l1: l1List.length,
                l2: l2List.length,
                total: uniqueKeys.length
            });
            return uniqueKeys;
        }
        catch (error) {
            logger_1.log.error(`${this.name} KEYS error`, { pattern, error });
            return [];
        }
    }
    async isReady() {
        try {
            const [l1Ready, l2Ready] = await Promise.all([
                this.l1.isReady(),
                this.l2.isReady()
            ]);
            // Considera pronto se pelo menos L1 estiver OK
            return l1Ready;
        }
        catch (error) {
            logger_1.log.error(`${this.name} isReady error`, { error });
            return false;
        }
    }
    async close() {
        try {
            await Promise.allSettled([
                this.l1.close(),
                this.l2.close()
            ]);
            logger_1.log.info(`${this.name} fechado (L1 + L2)`);
        }
        catch (error) {
            logger_1.log.error(`${this.name} CLOSE error`, { error });
        }
    }
    /**
     * Retorna estat√≠sticas do cache em camadas
     */
    getStats() {
        const l1HitRate = this.stats.l1Hits + this.stats.l1Misses > 0
            ? (this.stats.l1Hits / (this.stats.l1Hits + this.stats.l1Misses)) * 100
            : 0;
        const l2HitRate = this.stats.l2Hits + this.stats.l2Misses > 0
            ? (this.stats.l2Hits / (this.stats.l2Hits + this.stats.l2Misses)) * 100
            : 0;
        const totalHitRate = this.stats.totalHits + this.stats.totalMisses > 0
            ? (this.stats.totalHits / (this.stats.totalHits + this.stats.totalMisses)) * 100
            : 0;
        return {
            l1: {
                hits: this.stats.l1Hits,
                misses: this.stats.l1Misses,
                hitRate: l1HitRate.toFixed(2) + '%'
            },
            l2: {
                hits: this.stats.l2Hits,
                misses: this.stats.l2Misses,
                hitRate: l2HitRate.toFixed(2) + '%'
            },
            total: {
                hits: this.stats.totalHits,
                misses: this.stats.totalMisses,
                hitRate: totalHitRate.toFixed(2) + '%'
            }
        };
    }
    /**
     * Reseta estat√≠sticas
     */
    resetStats() {
        this.stats = {
            l1Hits: 0,
            l1Misses: 0,
            l2Hits: 0,
            l2Misses: 0,
            totalHits: 0,
            totalMisses: 0
        };
        logger_1.log.info(`${this.name} estat√≠sticas resetadas`);
    }
}
exports.LayeredCacheAdapter = LayeredCacheAdapter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,