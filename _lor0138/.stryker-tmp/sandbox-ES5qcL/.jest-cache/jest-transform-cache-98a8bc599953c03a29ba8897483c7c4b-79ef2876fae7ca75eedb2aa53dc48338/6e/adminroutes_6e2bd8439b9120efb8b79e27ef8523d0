6da31ad30013cdc1458c9eda34596c8b
"use strict";
// src/api/admin/routes/admin.routes.ts
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const ApiKeyService_1 = require("@shared/services/ApiKeyService");
const UserRateLimiter_1 = require("@shared/utils/UserRateLimiter");
const apiKey_types_1 = require("@shared/types/apiKey.types");
const apiKeyAuth_middleware_1 = require("@shared/middlewares/apiKeyAuth.middleware");
const errors_1 = require("@shared/errors");
const router = (0, express_1.Router)();
/**
 * @openapi
 * /admin/api-keys:
 *   get:
 *     summary: Listar todas as API Keys
 *     tags:
 *       - Admin
 *     security:
 *       - ApiKeyAuth: []
 *     responses:
 *       200:
 *         description: Lista de API Keys
 */
router.get('/api-keys', apiKeyAuth_middleware_1.apiKeyAuth, async (req, res) => {
    // Apenas admin pode listar todas as keys
    if (req.user?.tier !== apiKey_types_1.UserTier.ADMIN) {
        throw new errors_1.AuthorizationError('Apenas administradores podem listar todas as API Keys');
    }
    const stats = ApiKeyService_1.ApiKeyService.getStats();
    res.json({
        success: true,
        data: stats,
        correlationId: req.id
    });
});
/**
 * @openapi
 * /admin/api-keys/generate:
 *   post:
 *     summary: Gerar nova API Key
 *     tags:
 *       - Admin
 *     security:
 *       - ApiKeyAuth: []
 */
router.post('/api-keys/generate', apiKeyAuth_middleware_1.apiKeyAuth, async (req, res) => {
    if (req.user?.tier !== apiKey_types_1.UserTier.ADMIN) {
        throw new errors_1.AuthorizationError('Apenas administradores podem gerar API Keys');
    }
    const { userId, userName, tier, expiresInDays } = req.body;
    if (!userId || !userName || !tier) {
        const missingFields = {};
        if (!userId)
            missingFields.userId = 'Obrigatório';
        if (!userName)
            missingFields.userName = 'Obrigatório';
        if (!tier)
            missingFields.tier = 'Obrigatório';
        throw new errors_1.ValidationError('userId, userName e tier são obrigatórios', missingFields);
    }
    const apiKey = await ApiKeyService_1.ApiKeyService.generateKey(userId, userName, tier, expiresInDays);
    res.json({
        success: true,
        data: {
            apiKey,
            userId,
            userName,
            tier,
            expiresInDays
        },
        correlationId: req.id
    });
});
/**
 * @openapi
 * /admin/api-keys/{apiKey}/revoke:
 *   post:
 *     summary: Revogar API Key
 *     tags:
 *       - Admin
 */
router.post('/api-keys/:apiKey/revoke', apiKeyAuth_middleware_1.apiKeyAuth, async (req, res) => {
    if (req.user?.tier !== apiKey_types_1.UserTier.ADMIN) {
        throw new errors_1.AuthorizationError('Apenas administradores podem revogar API Keys');
    }
    const { apiKey } = req.params;
    const revoked = await ApiKeyService_1.ApiKeyService.revokeKey(apiKey);
    res.json({
        success: revoked,
        message: revoked ? 'API Key revogada' : 'API Key não encontrada',
        correlationId: req.id
    });
});
/**
 * @openapi
 * /admin/rate-limit/stats:
 *   get:
 *     summary: Estatísticas de rate limit
 *     tags:
 *       - Admin
 */
router.get('/rate-limit/stats', apiKeyAuth_middleware_1.apiKeyAuth, async (req, res) => {
    if (req.user?.tier !== apiKey_types_1.UserTier.ADMIN) {
        throw new errors_1.AuthorizationError('Apenas administradores podem ver estatísticas');
    }
    const userId = req.query.userId;
    const stats = UserRateLimiter_1.UserRateLimiter.getStats(userId);
    res.json({
        success: true,
        data: stats,
        correlationId: req.id
    });
});
/**
 * @openapi
 * /admin/rate-limit/reset/{userId}:
 *   post:
 *     summary: Resetar rate limit de um usuário
 *     tags:
 *       - Admin
 */
router.post('/rate-limit/reset/:userId', apiKeyAuth_middleware_1.apiKeyAuth, async (req, res) => {
    if (req.user?.tier !== apiKey_types_1.UserTier.ADMIN) {
        throw new errors_1.AuthorizationError('Apenas administradores podem resetar rate limits');
    }
    const { userId } = req.params;
    UserRateLimiter_1.UserRateLimiter.resetUser(userId);
    res.json({
        success: true,
        message: `Rate limit resetado para usuário ${userId}`,
        correlationId: req.id
    });
});
/**
 * @openapi
 * /admin/users/{userId}/tier:
 *   put:
 *     summary: Atualizar tier de um usuário
 *     tags:
 *       - Admin
 */
router.put('/users/:userId/tier', apiKeyAuth_middleware_1.apiKeyAuth, async (req, res) => {
    if (req.user?.tier !== apiKey_types_1.UserTier.ADMIN) {
        throw new errors_1.AuthorizationError('Apenas administradores podem atualizar tiers');
    }
    const { userId } = req.params;
    const { tier } = req.body;
    if (!tier || !Object.values(apiKey_types_1.UserTier).includes(tier)) {
        throw new errors_1.ValidationError('Tier inválido', {
            tier: `Deve ser: ${Object.values(apiKey_types_1.UserTier).join(', ')}`
        });
    }
    await ApiKeyService_1.ApiKeyService.updateUserTier(userId, tier);
    res.json({
        success: true,
        message: `Tier atualizado para ${tier}`,
        data: { userId, tier },
        correlationId: req.id
    });
});
exports.default = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,