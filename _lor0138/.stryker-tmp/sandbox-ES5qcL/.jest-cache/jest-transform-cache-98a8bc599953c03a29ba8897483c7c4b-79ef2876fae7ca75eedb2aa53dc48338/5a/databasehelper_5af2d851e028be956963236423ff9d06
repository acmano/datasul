6f6bdee5aebe4fc99d1670d0ea41e6fb
"use strict";
// tests/helpers/database.helper.ts
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatabaseTestHelper = void 0;
exports.setupTestDatabase = setupTestDatabase;
exports.teardownTestDatabase = teardownTestDatabase;
exports.requiresRealDatabase = requiresRealDatabase;
const DatabaseManager_1 = require("@infrastructure/database/DatabaseManager");
const dotenv_1 = __importDefault(require("dotenv"));
const path_1 = __importDefault(require("path"));
/**
 * Helper para testes de integração com banco real
 *
 * Gerencia conexão com banco de produção de forma segura para testes
 */
class DatabaseTestHelper {
    /**
     * Inicializa conexão com banco para testes
     * Se falhar, volta para mock automaticamente
     */
    static async initialize() {
        if (this.initialized) {
            return;
        }
        // Carregar .env.test
        dotenv_1.default.config({ path: path_1.default.resolve(process.cwd(), '.env.test') });
        try {
            // Tentar conectar ao banco real
            await DatabaseManager_1.DatabaseManager.initialize();
            // Verificar se está realmente conectado
            const status = DatabaseManager_1.DatabaseManager.getConnectionStatus();
            if (status.mode === 'REAL_DATABASE') {
                this.useRealDatabase = true;
                console.log('✅ Testes usando banco REAL de produção (somente leitura)');
            }
            else {
                this.useRealDatabase = false;
                console.log('⚠️  Testes usando MOCK_DATA (banco não disponível)');
            }
            this.initialized = true;
        }
        catch (error) {
            console.error('❌ Erro ao conectar banco para testes, usando MOCK_DATA:', error);
            this.useRealDatabase = false;
            this.initialized = true;
        }
    }
    /**
     * Verifica se está usando banco real
     */
    static isUsingRealDatabase() {
        return this.useRealDatabase;
    }
    /**
     * Fecha conexões após testes
     */
    static async cleanup() {
        if (this.initialized) {
            await DatabaseManager_1.DatabaseManager.close();
            this.initialized = false;
            this.useRealDatabase = false;
        }
    }
    /**
     * Executa query no banco (ou mock)
     */
    static async query(sql, params) {
        if (!this.initialized) {
            await this.initialize();
        }
        if (params) {
            return DatabaseManager_1.DatabaseManager.queryEmpWithParams(sql, params);
        }
        else {
            return DatabaseManager_1.DatabaseManager.queryEmp(sql);
        }
    }
    /**
     * Verifica se item existe no banco
     * Útil para setup de testes
     */
    static async itemExists(itemCodigo) {
        try {
            const result = await DatabaseManager_1.DatabaseManager.queryEmpWithParams(`SELECT TOP 1 item."it-codigo" as itemCodigo
         FROM OPENQUERY(PRD_EMS2EMP, 
           'SELECT "it-codigo" FROM pub.item WHERE "it-codigo" = ''${itemCodigo}'''
         ) as item`, []);
            return result && result.length > 0;
        }
        catch (error) {
            return false;
        }
    }
    /**
     * Busca um item real do banco para usar nos testes
     * Se não achar, retorna um código mock
     */
    static async getTestItemCode() {
        // Usar código conhecido que existe em produção
        // Vimos nos logs anteriores que 7530110 funciona
        return '7530110';
    }
    /**
     * Retorna códigos de teste conhecidos
     * Para diferentes cenários
     */
    static getKnownTestCodes() {
        return {
            // Item que DEVE existir em produção
            validItem: '7530110',
            // Item que NÃO existe
            invalidItem: 'INVALID999',
            // Item para teste de caracteres especiais
            specialChars: 'ABC-123',
            // Item de 1 caractere
            singleChar: 'A',
            // Item de 16 caracteres (máximo)
            maxLength: '1234567890123456',
        };
    }
    /**
     * Aguarda o banco estar pronto
     * Útil para beforeAll em testes
     */
    static async waitUntilReady(maxWaitMs = 5000) {
        const startTime = Date.now();
        while (Date.now() - startTime < maxWaitMs) {
            if (DatabaseManager_1.DatabaseManager.isReady()) {
                return true;
            }
            await new Promise(resolve => setTimeout(resolve, 100));
        }
        return false;
    }
    /**
     * Reseta estado do DatabaseManager (para testes isolados)
     */
    static async reset() {
        await this.cleanup();
        this.initialized = false;
        this.useRealDatabase = false;
    }
}
exports.DatabaseTestHelper = DatabaseTestHelper;
DatabaseTestHelper.initialized = false;
DatabaseTestHelper.useRealDatabase = false;
/**
 * Helper para criar conexão de teste
 */
async function setupTestDatabase() {
    await DatabaseTestHelper.initialize();
    return DatabaseTestHelper.isUsingRealDatabase();
}
/**
 * Helper para cleanup de teste
 */
async function teardownTestDatabase() {
    await DatabaseTestHelper.cleanup();
}
/**
 * Decorator para pular teste se banco não estiver disponível
 */
function requiresRealDatabase() {
    return (target, propertyKey, descriptor) => {
        const originalMethod = descriptor.value;
        descriptor.value = async function (...args) {
            if (!DatabaseTestHelper.isUsingRealDatabase()) {
                console.log(`⏭️  Pulando teste "${propertyKey}" - requer banco real`);
                return;
            }
            return originalMethod.apply(this, args);
        };
        return descriptor;
    };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,