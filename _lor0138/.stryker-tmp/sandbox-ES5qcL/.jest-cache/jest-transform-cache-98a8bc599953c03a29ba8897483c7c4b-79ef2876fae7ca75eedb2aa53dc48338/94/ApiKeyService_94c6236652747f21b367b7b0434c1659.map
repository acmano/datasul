{"file":"/home/mano/projetos/datasul/lor0138/src/shared/services/ApiKeyService.ts","mappings":"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","names":[],"sources":["/home/mano/projetos/datasul/lor0138/src/shared/services/ApiKeyService.ts"],"sourcesContent":["// src/shared/services/ApiKeyService.ts\n\nimport crypto from 'crypto';\nimport { ApiKeyConfig, UserTier } from '@shared/types/apiKey.types';\nimport { log } from '@shared/utils/logger';\n\n/**\n * Serviço para gerenciar API Keys\n * Em produção, isso deveria vir de um banco de dados\n */\nexport class ApiKeyService {\n  private static apiKeys: Map<string, ApiKeyConfig> = new Map();\n\n  /**\n   * Inicializa API keys de exemplo\n   * Em produção, carregar do banco de dados\n   */\n  static initialize(): void {\n    // API Keys de exemplo\n    const exampleKeys: ApiKeyConfig[] = [\n      {\n        key: 'free-demo-key-123456',\n        userId: 'user-001',\n        userName: 'Demo User Free',\n        tier: UserTier.FREE,\n        active: true,\n        createdAt: new Date(),\n      },\n      {\n        key: 'premium-key-abc123',\n        userId: 'user-002',\n        userName: 'Premium User',\n        tier: UserTier.PREMIUM,\n        active: true,\n        createdAt: new Date(),\n      },\n      {\n        key: 'enterprise-key-xyz789',\n        userId: 'user-003',\n        userName: 'Enterprise Corp',\n        tier: UserTier.ENTERPRISE,\n        active: true,\n        createdAt: new Date(),\n      },\n      {\n        key: 'admin-key-superuser',\n        userId: 'admin-001',\n        userName: 'System Admin',\n        tier: UserTier.ADMIN,\n        active: true,\n        createdAt: new Date(),\n      },\n    ];\n\n    exampleKeys.forEach(key => {\n      this.apiKeys.set(key.key, key);\n    });\n\n    log.info('API Keys inicializadas', {\n      count: this.apiKeys.size,\n      tiers: Array.from(new Set(exampleKeys.map(k => k.tier)))\n    });\n  }\n\n  /**\n   * Valida uma API Key\n   */\n  static async validateKey(apiKey: string): Promise<ApiKeyConfig | null> {\n    const keyConfig = this.apiKeys.get(apiKey);\n\n    if (!keyConfig) {\n      log.warn('API Key inválida', { apiKey: this.maskKey(apiKey) });\n      return null;\n    }\n\n    if (!keyConfig.active) {\n      log.warn('API Key inativa', { \n        apiKey: this.maskKey(apiKey),\n        userId: keyConfig.userId \n      });\n      return null;\n    }\n\n    // Verificar expiração\n    if (keyConfig.expiresAt && keyConfig.expiresAt < new Date()) {\n      log.warn('API Key expirada', {\n        apiKey: this.maskKey(apiKey),\n        userId: keyConfig.userId,\n        expiresAt: keyConfig.expiresAt\n      });\n      return null;\n    }\n\n    return keyConfig;\n  }\n\n  /**\n   * Gera uma nova API Key\n   */\n  static async generateKey(\n    userId: string,\n    userName: string,\n    tier: UserTier = UserTier.FREE,\n    expiresInDays?: number\n  ): Promise<string> {\n    const prefix = tier.toLowerCase();\n    const randomPart = crypto.randomBytes(16).toString('hex');\n    const apiKey = `${prefix}-${randomPart}`;\n\n    const expiresAt = expiresInDays\n      ? new Date(Date.now() + expiresInDays * 24 * 60 * 60 * 1000)\n      : undefined;\n\n    const keyConfig: ApiKeyConfig = {\n      key: apiKey,\n      userId,\n      userName,\n      tier,\n      active: true,\n      createdAt: new Date(),\n      expiresAt,\n    };\n\n    this.apiKeys.set(apiKey, keyConfig);\n\n    log.info('API Key gerada', {\n      userId,\n      tier,\n      expiresAt,\n      apiKey: this.maskKey(apiKey)\n    });\n\n    return apiKey;\n  }\n\n  /**\n   * Revoga uma API Key\n   */\n  static async revokeKey(apiKey: string): Promise<boolean> {\n    const keyConfig = this.apiKeys.get(apiKey);\n\n    if (!keyConfig) {\n      return false;\n    }\n\n    keyConfig.active = false;\n\n    log.info('API Key revogada', {\n      userId: keyConfig.userId,\n      apiKey: this.maskKey(apiKey)\n    });\n\n    return true;\n  }\n\n  /**\n   * Lista API Keys de um usuário\n   */\n  static async getUserKeys(userId: string): Promise<ApiKeyConfig[]> {\n    return Array.from(this.apiKeys.values())\n      .filter(key => key.userId === userId);\n  }\n\n  /**\n   * Atualiza tier de um usuário\n   */\n  static async updateUserTier(userId: string, newTier: UserTier): Promise<void> {\n    const userKeys = await this.getUserKeys(userId);\n\n    userKeys.forEach(keyConfig => {\n      keyConfig.tier = newTier;\n    });\n\n    log.info('Tier do usuário atualizado', {\n      userId,\n      newTier,\n      keysUpdated: userKeys.length\n    });\n  }\n\n  /**\n   * Mascara API Key para logs\n   */\n  private static maskKey(apiKey: string): string {\n    if (apiKey.length <= 8) {\n      return '***';\n    }\n    return `${apiKey.substring(0, 4)}...${apiKey.substring(apiKey.length - 4)}`;\n  }\n\n  /**\n   * Retorna estatísticas de API Keys\n   */\n  static getStats(): any {\n    const keys = Array.from(this.apiKeys.values());\n    \n    return {\n      total: keys.length,\n      active: keys.filter(k => k.active).length,\n      inactive: keys.filter(k => !k.active).length,\n      byTier: {\n        free: keys.filter(k => k.tier === UserTier.FREE).length,\n        premium: keys.filter(k => k.tier === UserTier.PREMIUM).length,\n        enterprise: keys.filter(k => k.tier === UserTier.ENTERPRISE).length,\n        admin: keys.filter(k => k.tier === UserTier.ADMIN).length,\n      }\n    };\n  }\n}"],"version":3}