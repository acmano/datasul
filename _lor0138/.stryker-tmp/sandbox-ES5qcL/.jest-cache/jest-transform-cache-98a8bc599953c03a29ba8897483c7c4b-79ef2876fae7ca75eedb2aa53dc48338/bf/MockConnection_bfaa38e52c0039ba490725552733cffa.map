{"file":"/home/mano/projetos/datasul/lor0138/src/infrastructure/database/connections/MockConnection.ts","mappings":";;;AAEA,MAAa,cAAc;IAA3B;QACU,aAAQ,GAAG;YACjB,IAAI,EAAE;gBACJ,UAAU,EAAE,SAAS;gBACrB,aAAa,EAAE,uBAAuB;gBACtC,WAAW,EAAE,IAAI;aAClB;YACD,gBAAgB,EAAE;gBAChB;oBACE,UAAU,EAAE,SAAS;oBACrB,WAAW,EAAE,IAAI;oBACjB,SAAS,EAAE,sBAAsB;oBACjC,WAAW,EAAE,CAAC;iBACf;aACF;SACF,CAAC;IAyCJ,CAAC;IAvCC,KAAK,CAAC,OAAO;QACX,OAAO,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;IAC1C,CAAC;IAED,KAAK,CAAC,KAAK,CAAC,WAAmB;QAC7B,OAAO,CAAC,GAAG,CAAC,uBAAuB,EAAE,WAAW,CAAC,CAAC;QAElD,IAAI,WAAW,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE,CAAC;YACrC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QAC9B,CAAC;QAED,IAAI,WAAW,CAAC,QAAQ,CAAC,gBAAgB,CAAC,EAAE,CAAC;YAC3C,OAAO,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC;QACxC,CAAC;QAED,OAAO,EAAE,CAAC;IACZ,CAAC;IAED,KAAK,CAAC,eAAe,CAAC,WAAmB,EAAE,MAAwB;QACjE,OAAO,CAAC,GAAG,CAAC,2BAA2B,EAAE,WAAW,EAAE,MAAM,CAAC,CAAC;QAE9D,IAAI,WAAW,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE,CAAC;YACrC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QAC9B,CAAC;QAED,IAAI,WAAW,CAAC,QAAQ,CAAC,gBAAgB,CAAC,EAAE,CAAC;YAC3C,OAAO,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC;QACxC,CAAC;QAED,OAAO,EAAE,CAAC;IACZ,CAAC;IAED,KAAK,CAAC,KAAK;QACT,OAAO,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC;IACzC,CAAC;IAED,WAAW;QACT,OAAO,IAAI,CAAC;IACd,CAAC;CACF;AAxDD,wCAwDC","names":[],"sources":["/home/mano/projetos/datasul/lor0138/src/infrastructure/database/connections/MockConnection.ts"],"sourcesContent":["import { IConnection, QueryParameter } from '../types';\r\n\r\nexport class MockConnection implements IConnection {\r\n  private mockData = {\r\n    item: {\r\n      itemCodigo: 'MOCK001',\r\n      itemDescricao: 'Item Mock para Testes',\r\n      itemUnidade: 'UN',\r\n    },\r\n    estabelecimentos: [\r\n      {\r\n        itemCodigo: 'MOCK001',\r\n        estabCodigo: '01',\r\n        estabNome: 'Estabelecimento Mock',\r\n        codObsoleto: 0,\r\n      },\r\n    ],\r\n  };\r\n\r\n  async connect(): Promise<void> {\r\n    console.log('Mock connection iniciada');\r\n  }\r\n\r\n  async query(queryString: string): Promise<any> {\r\n    console.log('Mock query executada:', queryString);\r\n\r\n    if (queryString.includes('pub.item')) {\r\n      return [this.mockData.item];\r\n    }\r\n\r\n    if (queryString.includes('item-uni-estab')) {\r\n      return this.mockData.estabelecimentos;\r\n    }\r\n\r\n    return [];\r\n  }\r\n\r\n  async queryWithParams(queryString: string, params: QueryParameter[]): Promise<any> {\r\n    console.log('Mock query parametrizada:', queryString, params);\r\n\r\n    if (queryString.includes('pub.item')) {\r\n      return [this.mockData.item];\r\n    }\r\n\r\n    if (queryString.includes('item-uni-estab')) {\r\n      return this.mockData.estabelecimentos;\r\n    }\r\n\r\n    return [];\r\n  }\r\n\r\n  async close(): Promise<void> {\r\n    console.log('Mock connection fechada');\r\n  }\r\n\r\n  isConnected(): boolean {\r\n    return true;\r\n  }\r\n}"],"version":3}