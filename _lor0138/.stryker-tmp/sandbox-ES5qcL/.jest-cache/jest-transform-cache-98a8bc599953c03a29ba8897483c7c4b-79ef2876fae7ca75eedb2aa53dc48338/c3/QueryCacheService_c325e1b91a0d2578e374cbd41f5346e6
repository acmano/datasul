caebad56b792e99bfd3e70626637811d
"use strict";
// src/shared/utils/cache/QueryCacheService.ts
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryCacheService = void 0;
const crypto_1 = __importDefault(require("crypto"));
const cacheManager_1 = require("../cacheManager");
const logger_1 = require("../logger");
/**
 * Serviço de cache para queries de banco de dados
 * Gera keys automáticas baseadas em hash(SQL + params)
 */
class QueryCacheService {
    /**
     * Executa query com cache
     *
     * @example
     * ```typescript
     * const result = await QueryCacheService.withCache(
     *   'SELECT * FROM item WHERE codigo = @p1',
     *   [{ name: 'p1', value: '7530110' }],
     *   async () => DatabaseManager.queryEmpWithParams(sql, params),
     *   { ttl: 600, prefix: 'item' }
     * );
     * ```
     */
    static async withCache(sql, params = [], queryFn, options = {}) {
        const { ttl = this.DEFAULT_TTL, prefix = this.DEFAULT_PREFIX, skipCache = false } = options;
        // Se skip explícito, executa direto
        if (skipCache) {
            logger_1.log.debug('Query cache: SKIP', { prefix });
            return queryFn();
        }
        // Gerar chave de cache
        const cacheKey = this.generateCacheKey(sql, params, prefix);
        // Tentar buscar do cache
        const cached = await cacheManager_1.CacheManager.get(cacheKey);
        if (cached !== undefined) {
            logger_1.log.debug('Query cache: HIT', { key: cacheKey, prefix });
            return cached;
        }
        // MISS: executar query
        logger_1.log.debug('Query cache: MISS', { key: cacheKey, prefix });
        const result = await queryFn();
        // Armazenar no cache
        await cacheManager_1.CacheManager.set(cacheKey, result, ttl);
        return result;
    }
    /**
     * Gera chave de cache determinística
     * Hash MD5 de: prefix:sql:params_json
     *
     * ✅ CORRIGIDO: Serializa params corretamente (array ou objeto)
     */
    static generateCacheKey(sql, params, prefix) {
        // Normalizar SQL (remover espaços extras)
        const normalizedSql = sql.replace(/\s+/g, ' ').trim();
        // ✅ CORREÇÃO: Serializar params de forma determinística
        // Se for array, mapeia para extrair valores relevantes
        let paramsStr;
        if (Array.isArray(params)) {
            // Para array de QueryParameter: [{name, type, value}, ...]
            const sortedParams = params
                .map(p => {
                if (typeof p === 'object' && p !== null) {
                    // Extrai apenas name e value, ordena as chaves
                    return { name: p.name, value: p.value };
                }
                return p;
            })
                .sort((a, b) => {
                // Ordena por name se existir
                const nameA = a?.name || '';
                const nameB = b?.name || '';
                return nameA.localeCompare(nameB);
            });
            paramsStr = JSON.stringify(sortedParams);
        }
        else {
            // Para objeto simples
            paramsStr = JSON.stringify(params, Object.keys(params).sort());
        }
        // Gerar hash
        const hash = crypto_1.default
            .createHash('md5')
            .update(`${normalizedSql}:${paramsStr}`)
            .digest('hex')
            .substring(0, 16); // 16 chars é suficiente
        return `${prefix}:${hash}`;
    }
    /**
     * Invalida cache por pattern
     *
     * @example
     * ```typescript
     * // Invalidar todos os caches de item
     * await QueryCacheService.invalidate('item:*');
     *
     * // Invalidar cache específico
     * await QueryCacheService.invalidate('item:abc123def456');
     * ```
     */
    static async invalidate(pattern) {
        logger_1.log.info('Query cache: INVALIDATE', { pattern });
        return cacheManager_1.CacheManager.delete(pattern);
    }
    /**
     * Invalida múltiplos patterns
     */
    static async invalidateMultiple(patterns) {
        let total = 0;
        for (const pattern of patterns) {
            total += await this.invalidate(pattern);
        }
        return total;
    }
    /**
     * Wrapper para queries de itens
     */
    static async withItemCache(sql, params, queryFn, ttl) {
        return this.withCache(sql, params, queryFn, {
            ttl: ttl || 600, // 10 minutos para itens
            prefix: 'item',
        });
    }
    /**
     * Wrapper para queries de estabelecimentos
     */
    static async withEstabelecimentoCache(sql, params, queryFn, ttl) {
        return this.withCache(sql, params, queryFn, {
            ttl: ttl || 900, // 15 minutos para estabelecimentos
            prefix: 'estabelecimento',
        });
    }
    /**
     * Wrapper para queries de health check (TTL curto)
     */
    static async withHealthCache(sql, params, queryFn) {
        return this.withCache(sql, params, queryFn, {
            ttl: 30, // 30 segundos
            prefix: 'health',
        });
    }
}
exports.QueryCacheService = QueryCacheService;
QueryCacheService.DEFAULT_TTL = 300; // 5 minutos
QueryCacheService.DEFAULT_PREFIX = 'query';
//# sourceMappingURL=data:application/json;charset=utf-8;base64,