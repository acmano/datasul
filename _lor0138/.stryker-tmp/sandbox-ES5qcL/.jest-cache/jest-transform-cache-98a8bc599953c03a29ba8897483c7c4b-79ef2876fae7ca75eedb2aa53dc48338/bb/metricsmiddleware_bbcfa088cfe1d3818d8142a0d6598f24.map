{"file":"/home/mano/projetos/datasul/lor0138/src/shared/middlewares/metrics.middleware.ts","mappings":"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","names":[],"sources":["/home/mano/projetos/datasul/lor0138/src/shared/middlewares/metrics.middleware.ts"],"sourcesContent":["// src/shared/middlewares/metricsMiddleware.ts\n\nimport { Request, Response, NextFunction } from 'express';\nimport { metricsManager } from '@infrastructure/metrics/MetricsManager';\n\n/**\n * Middleware para coletar métricas de todas as requisições HTTP\n * \n * Coleta:\n * - Total de requisições\n * - Duração das requisições\n * - Status codes\n * - Requisições em progresso\n */\nexport function metricsMiddleware(req: Request, res: Response, next: NextFunction): void {\n  // Ignora endpoint de métricas para não criar loop\n  if (req.path === '/metrics') {\n    return next();\n  }\n\n  const startTime = Date.now();\n  const method = req.method;\n  \n  // Normaliza a rota para agrupar métricas\n  // Ex: /api/lor0138/item/dadosCadastrais/informacoesGerais/7530110\n  //  -> /api/lor0138/item/dadosCadastrais/informacoesGerais/:itemCodigo\n  const route = normalizeRoute(req.path);\n\n  // Incrementa contador de requisições em progresso\n  metricsManager.httpRequestsInProgress.inc({ method, route });\n\n  // Captura quando a resposta é finalizada\n  res.on('finish', () => {\n    const duration = (Date.now() - startTime) / 1000; // segundos\n    const statusCode = res.statusCode.toString();\n\n    // Decrementa requisições em progresso\n    metricsManager.httpRequestsInProgress.dec({ method, route });\n\n    // Incrementa total de requisições\n    metricsManager.httpRequestsTotal.inc({\n      method,\n      route,\n      status_code: statusCode,\n    });\n\n    // Registra duração da requisição\n    metricsManager.httpRequestDuration.observe(\n      {\n        method,\n        route,\n        status_code: statusCode,\n      },\n      duration\n    );\n  });\n\n  next();\n}\n\n/**\n * Normaliza a rota para agrupar métricas\n * Remove IDs específicos e mantém a estrutura da rota\n */\nfunction normalizeRoute(path: string): string {\n  // Remove query strings\n  path = path.split('?')[0];\n\n  // Padrões comuns para substituir por placeholders\n  const patterns = [\n    // Item codes (números ou códigos alfanuméricos)\n    {\n      regex: /\\/api\\/lor0138\\/item\\/dadosCadastrais\\/informacoesGerais\\/[^\\/]+$/,\n      replacement: '/api/lor0138/item/dadosCadastrais/informacoesGerais/:itemCodigo',\n    },\n    // UUIDs\n    {\n      regex: /[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/gi,\n      replacement: ':uuid',\n    },\n    // Números genéricos no final da URL\n    {\n      regex: /\\/\\d+$/,\n      replacement: '/:id',\n    },\n  ];\n\n  for (const pattern of patterns) {\n    if (pattern.regex.test(path)) {\n      return path.replace(pattern.regex, pattern.replacement);\n    }\n  }\n\n  return path;\n}\n\n/**\n * Middleware para coletar métricas de rate limiting\n * Deve ser usado APÓS o rate limiter\n */\nexport function rateLimitMetricsMiddleware(req: Request, res: Response, next: NextFunction): void {\n  const route = normalizeRoute(req.path);\n  const userId = (req as any).userId || 'anonymous';\n\n  // Se a requisição foi bloqueada pelo rate limiter\n  if (res.statusCode === 429) {\n    metricsManager.rateLimitRequestsBlocked.inc({\n      route,\n      user_id: userId,\n      reason: 'rate_limit_exceeded',\n    });\n  } else {\n    metricsManager.rateLimitRequestsAllowed.inc({\n      route,\n      user_id: userId,\n    });\n  }\n\n  next();\n}"],"version":3}