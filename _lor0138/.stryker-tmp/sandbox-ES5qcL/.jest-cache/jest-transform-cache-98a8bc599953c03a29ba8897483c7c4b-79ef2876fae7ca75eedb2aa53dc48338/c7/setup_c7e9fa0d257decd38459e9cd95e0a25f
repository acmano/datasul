192ece25ff56695d88bea0ca47c5a3f3
"use strict";
// tests/setup.ts
// Setup global para todos os testes
Object.defineProperty(exports, "__esModule", { value: true });
// ========================================
// 2. MOCK DO LOGGER (evita poluir console)
// ========================================
jest.mock('@shared/utils/logger', () => ({
    log: {
        info: jest.fn(),
        error: jest.fn(),
        warn: jest.fn(),
        debug: jest.fn(),
        http: jest.fn(),
    },
}));
// ========================================
// 1. VARIÁVEIS DE AMBIENTE PARA TESTES
// ========================================
process.env.NODE_ENV = 'test';
process.env.PORT = '3001'; // Porta diferente para não conflitar
// Database (Mock será usado automaticamente)
process.env.DB_CONNECTION_TYPE = 'sqlserver';
process.env.DB_SERVER = 'test-server';
process.env.DB_PORT = '1433';
process.env.DB_USER = 'test-user';
process.env.DB_PASSWORD = 'test-password';
process.env.DB_DATABASE_EMP = '';
process.env.DB_DATABASE_MULT = '';
process.env.DB_CONNECTION_TIMEOUT = '5000';
process.env.DB_REQUEST_TIMEOUT = '5000';
process.env.DB_ENCRYPT = 'false';
process.env.DB_TRUST_SERVER_CERTIFICATE = 'true';
// Cache (desabilitado para testes por padrão)
process.env.CACHE_ENABLED = 'false';
process.env.CACHE_STRATEGY = 'memory';
// CORS
process.env.CORS_ALLOWED_ORIGINS = 'http://localhost:3001';
// Timeouts
process.env.HTTP_REQUEST_TIMEOUT = '5000';
process.env.HTTP_HEALTH_TIMEOUT = '2000';
// Shutdown
process.env.SHUTDOWN_TIMEOUT = '1000';
// ========================================
// 3. MOCKS GLOBAIS DE CONSOLE (opcional)
// ========================================
// Silencia console.log/error durante testes (descomente se quiser)
// global.console.log = jest.fn();
// global.console.error = jest.fn();
// global.console.warn = jest.fn();
// ========================================
// 4. TIMEOUT GLOBAL (aumenta se testes forem lentos)
// ========================================
jest.setTimeout(10000); // 10 segundos
// ========================================
// 5. EXTEND EXPECT (matchers customizados)
// ========================================
expect.extend({
    // Matcher customizado para validar erro customizado
    toBeCustomError(received, expectedClass) {
        const pass = received instanceof expectedClass;
        if (pass) {
            return {
                message: () => `Expected error NOT to be instance of ${expectedClass.name}`,
                pass: true,
            };
        }
        else {
            return {
                message: () => `Expected error to be instance of ${expectedClass.name}, but got ${received?.constructor?.name}`,
                pass: false,
            };
        }
    },
    // Matcher para validar estrutura de API response
    toBeApiResponse(received) {
        const hasSuccess = 'success' in received;
        const hasData = 'data' in received || 'error' in received;
        const pass = hasSuccess && hasData;
        if (pass) {
            return {
                message: () => 'Expected NOT to be a valid API response',
                pass: true,
            };
        }
        else {
            return {
                message: () => `Expected to be a valid API response with 'success' and 'data'/'error' fields`,
                pass: false,
            };
        }
    },
});
// ========================================
// 7. CLEANUP APÓS CADA TESTE
// ========================================
afterEach(() => {
    jest.clearAllMocks(); // Limpa histórico de calls de mocks
});
// ========================================
// 8. CLEANUP APÓS TODOS OS TESTES
// ========================================
afterAll(async () => {
    // Aguarda promises pendentes
    await new Promise((resolve) => setTimeout(resolve, 500));
    // Fecha conexões abertas (se houver)
    // await DatabaseManager.close();
    // await CacheManager.close();
});
// ========================================
// 9. ERRO DE PROMISES NÃO TRATADAS
// ========================================
process.on('unhandledRejection', (reason, promise) => {
    console.error('Unhandled Rejection during test:', reason);
    throw reason;
});
console.log('🧪 Ambiente de testes configurado');
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QyxPQUFPLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUV6RCxxQ0FBcUM7SUFDckMsaUNBQWlDO0lBQ2pDLDhCQUE4QjtBQUNoQyxDQUFDLENBQUMsQ0FBQztBQUVILDJDQUEyQztBQUMzQyxtQ0FBbUM7QUFDbkMsMkNBQTJDO0FBQzNDLE9BQU8sQ0FBQyxFQUFFLENBQUMsb0JBQW9CLEVBQUUsQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLEVBQUU7SUFDbkQsT0FBTyxDQUFDLEtBQUssQ0FBQyxrQ0FBa0MsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUMxRCxNQUFNLE1BQU0sQ0FBQztBQUNmLENBQUMsQ0FBQyxDQUFDO0FBRUgsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9ob21lL21hbm8vcHJvamV0b3MvZGF0YXN1bC9sb3IwMTM4L3Rlc3RzL3NldHVwLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHRlc3RzL3NldHVwLnRzXG4vLyBTZXR1cCBnbG9iYWwgcGFyYSB0b2RvcyBvcyB0ZXN0ZXNcblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gMS4gVkFSScOBVkVJUyBERSBBTUJJRU5URSBQQVJBIFRFU1RFU1xuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgPSAndGVzdCc7XG5wcm9jZXNzLmVudi5QT1JUID0gJzMwMDEnOyAvLyBQb3J0YSBkaWZlcmVudGUgcGFyYSBuw6NvIGNvbmZsaXRhclxuXG4vLyBEYXRhYmFzZSAoTW9jayBzZXLDoSB1c2FkbyBhdXRvbWF0aWNhbWVudGUpXG5wcm9jZXNzLmVudi5EQl9DT05ORUNUSU9OX1RZUEUgPSAnc3Fsc2VydmVyJztcbnByb2Nlc3MuZW52LkRCX1NFUlZFUiA9ICd0ZXN0LXNlcnZlcic7XG5wcm9jZXNzLmVudi5EQl9QT1JUID0gJzE0MzMnO1xucHJvY2Vzcy5lbnYuREJfVVNFUiA9ICd0ZXN0LXVzZXInO1xucHJvY2Vzcy5lbnYuREJfUEFTU1dPUkQgPSAndGVzdC1wYXNzd29yZCc7XG5wcm9jZXNzLmVudi5EQl9EQVRBQkFTRV9FTVAgPSAnJztcbnByb2Nlc3MuZW52LkRCX0RBVEFCQVNFX01VTFQgPSAnJztcbnByb2Nlc3MuZW52LkRCX0NPTk5FQ1RJT05fVElNRU9VVCA9ICc1MDAwJztcbnByb2Nlc3MuZW52LkRCX1JFUVVFU1RfVElNRU9VVCA9ICc1MDAwJztcbnByb2Nlc3MuZW52LkRCX0VOQ1JZUFQgPSAnZmFsc2UnO1xucHJvY2Vzcy5lbnYuREJfVFJVU1RfU0VSVkVSX0NFUlRJRklDQVRFID0gJ3RydWUnO1xuXG4vLyBDYWNoZSAoZGVzYWJpbGl0YWRvIHBhcmEgdGVzdGVzIHBvciBwYWRyw6NvKVxucHJvY2Vzcy5lbnYuQ0FDSEVfRU5BQkxFRCA9ICdmYWxzZSc7XG5wcm9jZXNzLmVudi5DQUNIRV9TVFJBVEVHWSA9ICdtZW1vcnknO1xuXG4vLyBDT1JTXG5wcm9jZXNzLmVudi5DT1JTX0FMTE9XRURfT1JJR0lOUyA9ICdodHRwOi8vbG9jYWxob3N0OjMwMDEnO1xuXG4vLyBUaW1lb3V0c1xucHJvY2Vzcy5lbnYuSFRUUF9SRVFVRVNUX1RJTUVPVVQgPSAnNTAwMCc7XG5wcm9jZXNzLmVudi5IVFRQX0hFQUxUSF9USU1FT1VUID0gJzIwMDAnO1xuXG4vLyBTaHV0ZG93blxucHJvY2Vzcy5lbnYuU0hVVERPV05fVElNRU9VVCA9ICcxMDAwJztcblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gMi4gTU9DSyBETyBMT0dHRVIgKGV2aXRhIHBvbHVpciBjb25zb2xlKVxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuamVzdC5tb2NrKCdAc2hhcmVkL3V0aWxzL2xvZ2dlcicsICgpID0+ICh7XG4gIGxvZzoge1xuICAgIGluZm86IGplc3QuZm4oKSxcbiAgICBlcnJvcjogamVzdC5mbigpLFxuICAgIHdhcm46IGplc3QuZm4oKSxcbiAgICBkZWJ1ZzogamVzdC5mbigpLFxuICAgIGh0dHA6IGplc3QuZm4oKSxcbiAgfSxcbn0pKTtcblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gMy4gTU9DS1MgR0xPQkFJUyBERSBDT05TT0xFIChvcGNpb25hbClcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIFNpbGVuY2lhIGNvbnNvbGUubG9nL2Vycm9yIGR1cmFudGUgdGVzdGVzIChkZXNjb21lbnRlIHNlIHF1aXNlcilcbi8vIGdsb2JhbC5jb25zb2xlLmxvZyA9IGplc3QuZm4oKTtcbi8vIGdsb2JhbC5jb25zb2xlLmVycm9yID0gamVzdC5mbigpO1xuLy8gZ2xvYmFsLmNvbnNvbGUud2FybiA9IGplc3QuZm4oKTtcblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gNC4gVElNRU9VVCBHTE9CQUwgKGF1bWVudGEgc2UgdGVzdGVzIGZvcmVtIGxlbnRvcylcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbmplc3Quc2V0VGltZW91dCgxMDAwMCk7IC8vIDEwIHNlZ3VuZG9zXG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIDUuIEVYVEVORCBFWFBFQ1QgKG1hdGNoZXJzIGN1c3RvbWl6YWRvcylcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbmV4cGVjdC5leHRlbmQoe1xuICAvLyBNYXRjaGVyIGN1c3RvbWl6YWRvIHBhcmEgdmFsaWRhciBlcnJvIGN1c3RvbWl6YWRvXG4gIHRvQmVDdXN0b21FcnJvcihyZWNlaXZlZDogYW55LCBleHBlY3RlZENsYXNzOiBhbnkpIHtcbiAgICBjb25zdCBwYXNzID0gcmVjZWl2ZWQgaW5zdGFuY2VvZiBleHBlY3RlZENsYXNzO1xuICAgIFxuICAgIGlmIChwYXNzKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBtZXNzYWdlOiAoKSA9PiBgRXhwZWN0ZWQgZXJyb3IgTk9UIHRvIGJlIGluc3RhbmNlIG9mICR7ZXhwZWN0ZWRDbGFzcy5uYW1lfWAsXG4gICAgICAgIHBhc3M6IHRydWUsXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBtZXNzYWdlOiAoKSA9PiBgRXhwZWN0ZWQgZXJyb3IgdG8gYmUgaW5zdGFuY2Ugb2YgJHtleHBlY3RlZENsYXNzLm5hbWV9LCBidXQgZ290ICR7cmVjZWl2ZWQ/LmNvbnN0cnVjdG9yPy5uYW1lfWAsXG4gICAgICAgIHBhc3M6IGZhbHNlLFxuICAgICAgfTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gTWF0Y2hlciBwYXJhIHZhbGlkYXIgZXN0cnV0dXJhIGRlIEFQSSByZXNwb25zZVxuICB0b0JlQXBpUmVzcG9uc2UocmVjZWl2ZWQ6IGFueSkge1xuICAgIGNvbnN0IGhhc1N1Y2Nlc3MgPSAnc3VjY2VzcycgaW4gcmVjZWl2ZWQ7XG4gICAgY29uc3QgaGFzRGF0YSA9ICdkYXRhJyBpbiByZWNlaXZlZCB8fCAnZXJyb3InIGluIHJlY2VpdmVkO1xuICAgIGNvbnN0IHBhc3MgPSBoYXNTdWNjZXNzICYmIGhhc0RhdGE7XG5cbiAgICBpZiAocGFzcykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbWVzc2FnZTogKCkgPT4gJ0V4cGVjdGVkIE5PVCB0byBiZSBhIHZhbGlkIEFQSSByZXNwb25zZScsXG4gICAgICAgIHBhc3M6IHRydWUsXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBtZXNzYWdlOiAoKSA9PiBgRXhwZWN0ZWQgdG8gYmUgYSB2YWxpZCBBUEkgcmVzcG9uc2Ugd2l0aCAnc3VjY2VzcycgYW5kICdkYXRhJy8nZXJyb3InIGZpZWxkc2AsXG4gICAgICAgIHBhc3M6IGZhbHNlLFxuICAgICAgfTtcbiAgICB9XG4gIH0sXG59KTtcblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gNi4gREVDTEFSQcOHw4NPIERFIFRJUE9TIFBBUkEgTUFUQ0hFUlMgQ1VTVE9NSVpBRE9TXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5kZWNsYXJlIGdsb2JhbCB7XG4gIG5hbWVzcGFjZSBqZXN0IHtcbiAgICBpbnRlcmZhY2UgTWF0Y2hlcnM8Uj4ge1xuICAgICAgdG9CZUN1c3RvbUVycm9yKGV4cGVjdGVkQ2xhc3M6IGFueSk6IFI7XG4gICAgICB0b0JlQXBpUmVzcG9uc2UoKTogUjtcbiAgICB9XG4gIH1cbn1cblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gNy4gQ0xFQU5VUCBBUMOTUyBDQURBIFRFU1RFXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5hZnRlckVhY2goKCkgPT4ge1xuICBqZXN0LmNsZWFyQWxsTW9ja3MoKTsgLy8gTGltcGEgaGlzdMOzcmljbyBkZSBjYWxscyBkZSBtb2Nrc1xufSk7XG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIDguIENMRUFOVVAgQVDDk1MgVE9ET1MgT1MgVEVTVEVTXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5hZnRlckFsbChhc3luYyAoKSA9PiB7XG4gIC8vIEFndWFyZGEgcHJvbWlzZXMgcGVuZGVudGVzXG4gIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDUwMCkpO1xuICBcbiAgLy8gRmVjaGEgY29uZXjDtWVzIGFiZXJ0YXMgKHNlIGhvdXZlcilcbiAgLy8gYXdhaXQgRGF0YWJhc2VNYW5hZ2VyLmNsb3NlKCk7XG4gIC8vIGF3YWl0IENhY2hlTWFuYWdlci5jbG9zZSgpO1xufSk7XG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIDkuIEVSUk8gREUgUFJPTUlTRVMgTsODTyBUUkFUQURBU1xuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxucHJvY2Vzcy5vbigndW5oYW5kbGVkUmVqZWN0aW9uJywgKHJlYXNvbiwgcHJvbWlzZSkgPT4ge1xuICBjb25zb2xlLmVycm9yKCdVbmhhbmRsZWQgUmVqZWN0aW9uIGR1cmluZyB0ZXN0OicsIHJlYXNvbik7XG4gIHRocm93IHJlYXNvbjtcbn0pO1xuXG5jb25zb2xlLmxvZygn8J+nqiBBbWJpZW50ZSBkZSB0ZXN0ZXMgY29uZmlndXJhZG8nKTtcblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gMTAuIEVYUE9SVCBQQVJBIFRPUk5BUiBFU1RFIEFSUVVJVk8gVU0gTcOTRFVMT1xuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gTmVjZXNzw6FyaW8gcGFyYSBvICdkZWNsYXJlIGdsb2JhbCcgZnVuY2lvbmFyXG5leHBvcnQge307Il0sInZlcnNpb24iOjN9