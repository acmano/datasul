{"file":"/home/mano/projetos/datasul/lor0138/tests/e2e/api/informacoesGerais.e2e.test.ts","mappings":"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","names":[],"sources":["/home/mano/projetos/datasul/lor0138/tests/e2e/api/informacoesGerais.e2e.test.ts"],"sourcesContent":["// tests/e2e/api/informacoesGerais.e2e.test.ts\n\nimport request from 'supertest';\nimport app from '../../../src/app'; // Express app\nimport { DatabaseManager } from '@infrastructure/database/DatabaseManager';\nimport { createInformacoesGerais } from '../../factories/item.factory';\n\n// Mock do DatabaseManager para E2E\njest.mock('@infrastructure/database/DatabaseManager');\n\ndescribe('E2E - API InformacoesGerais', () => {\n  \n  beforeAll(async () => {\n    // Inicializar DatabaseManager se necessário\n    (DatabaseManager.initialize as jest.Mock).mockResolvedValue(undefined);\n    (DatabaseManager.isReady as jest.Mock).mockReturnValue(true);\n    \n    // Mock para health check\n    (DatabaseManager.getConnection as jest.Mock).mockReturnValue({\n      query: jest.fn().mockResolvedValue([{ test: 1 }])\n    });\n    \n    (DatabaseManager.getConnectionStatus as jest.Mock).mockReturnValue({\n      type: 'sqlserver',\n      mode: 'REAL_DATABASE',\n      error: undefined\n    });\n  });\n\n  afterAll(async () => {\n    // Cleanup\n    await DatabaseManager.close();\n  });\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // Re-aplicar mocks que são usados em todos os testes\n    (DatabaseManager.getConnection as jest.Mock).mockReturnValue({\n      query: jest.fn().mockResolvedValue([{ test: 1 }])\n    });\n  });\n\n  // ========================================\n  // CASOS DE SUCESSO\n  // ========================================\n  describe('GET /api/lor0138/item/dadosCadastrais/informacoesGerais/:itemCodigo', () => {\n    \n    it('deve retornar 200 com dados do item', async () => {\n      const mockData = createInformacoesGerais();\n      \n      // Mock do DatabaseManager retornando dados\n      (DatabaseManager.queryEmpWithParams as jest.Mock).mockResolvedValue([{\n        itemCodigo: '7530110',\n        itemDescricao: 'VALVULA DE ESFERA 1/2\" BRONZE',\n        itemUnidade: 'UN'\n      }]);\n\n      const response = await request(app)\n        .get('/api/lor0138/item/dadosCadastrais/informacoesGerais/7530110')\n        .expect(200);\n\n      expect(response.body).toHaveProperty('success', true);\n      expect(response.body).toHaveProperty('data');\n    });\n\n    it('deve retornar headers corretos', async () => {\n      (DatabaseManager.queryEmpWithParams as jest.Mock).mockResolvedValue([{\n        itemCodigo: '7530110',\n        itemDescricao: 'Test',\n        itemUnidade: 'UN'\n      }]);\n\n      const response = await request(app)\n        .get('/api/lor0138/item/dadosCadastrais/informacoesGerais/7530110');\n\n      expect(response.headers['content-type']).toMatch(/application\\/json/);\n      expect(response.headers['x-correlation-id']).toBeDefined();\n    });\n\n    it('deve aceitar Correlation ID customizado', async () => {\n      const customCorrelationId = 'test-correlation-123';\n      \n      (DatabaseManager.queryEmpWithParams as jest.Mock).mockResolvedValue([{\n        itemCodigo: '7530110',\n        itemDescricao: 'Test',\n        itemUnidade: 'UN'\n      }]);\n\n      const response = await request(app)\n        .get('/api/lor0138/item/dadosCadastrais/informacoesGerais/7530110')\n        .set('X-Correlation-ID', customCorrelationId);\n\n      expect(response.headers['x-correlation-id']).toBe(customCorrelationId);\n    });\n\n  });\n\n  // ========================================\n  // VALIDAÇÃO DE ENTRADA\n  // ========================================\n  describe('Validação de Parâmetros', () => {\n    \n    it('deve retornar 400 para itemCodigo inválido (muito longo)', async () => {\n      const response = await request(app)\n        .get('/api/lor0138/item/dadosCadastrais/informacoesGerais/12345678901234567')\n        .expect(400);\n\n      expect(response.body).toHaveProperty('error');\n      expect(response.body.error).toMatch(/ValidationError/);\n    });\n\n    it('deve retornar 400 para itemCodigo vazio', async () => {\n      const response = await request(app)\n        .get('/api/lor0138/item/dadosCadastrais/informacoesGerais/ ')\n        .expect(404); // Express trata ' ' como rota não encontrada\n\n      expect(response.body).toHaveProperty('error');\n    });\n\n  });\n\n  // ========================================\n  // ITEM NÃO ENCONTRADO\n  // ========================================\n  describe('Item Não Encontrado', () => {\n    \n    it('deve retornar 404 quando item não existe', async () => {\n      // Mock retornando vazio\n      (DatabaseManager.queryEmpWithParams as jest.Mock).mockResolvedValue([]);\n\n      const response = await request(app)\n        .get('/api/lor0138/item/dadosCadastrais/informacoesGerais/INEXISTENTE')\n        .expect(404);\n\n      expect(response.body).toHaveProperty('error');\n      expect(response.body.message).toMatch(/não encontrado/i);\n    });\n\n    it('deve incluir Correlation ID no erro 404', async () => {\n      (DatabaseManager.queryEmpWithParams as jest.Mock).mockResolvedValue([]);\n\n      const response = await request(app)\n        .get('/api/lor0138/item/dadosCadastrais/informacoesGerais/INEXISTENTE');\n\n      expect(response.headers['x-correlation-id']).toBeDefined();\n    });\n\n  });\n\n  // ========================================\n  // ERROS DO SERVIDOR\n  // ========================================\n  describe('Erros do Servidor', () => {\n    \n    it('deve retornar 500 em caso de erro no banco', async () => {\n      (DatabaseManager.queryEmpWithParams as jest.Mock).mockRejectedValue(\n        new Error('Conexão perdida')\n      );\n\n      const response = await request(app)\n        .get('/api/lor0138/item/dadosCadastrais/informacoesGerais/7530110')\n        .expect(500);\n\n      expect(response.body).toHaveProperty('error');\n    });\n\n  });\n\n  // ========================================\n  // MIDDLEWARES\n  // ========================================\n  describe('Middlewares', () => {\n    \n    it('deve aplicar CORS headers', async () => {\n      (DatabaseManager.queryEmpWithParams as jest.Mock).mockResolvedValue([{\n        itemCodigo: '7530110',\n        itemDescricao: 'Test',\n        itemUnidade: 'UN'\n      }]);\n\n      const response = await request(app)\n        .get('/api/lor0138/item/dadosCadastrais/informacoesGerais/7530110')\n        .set('Origin', 'http://localhost:3000');\n\n      expect(response.headers['access-control-allow-origin']).toBeDefined();\n    });\n\n    it('deve comprimir resposta (gzip)', async () => {\n      (DatabaseManager.queryEmpWithParams as jest.Mock).mockResolvedValue([{\n        itemCodigo: '7530110',\n        itemDescricao: 'Test',\n        itemUnidade: 'UN'\n      }]);\n\n      const response = await request(app)\n        .get('/api/lor0138/item/dadosCadastrais/informacoesGerais/7530110')\n        .set('Accept-Encoding', 'gzip');\n\n      // Compression middleware pode adicionar vary header\n      expect(response.headers).toBeDefined();\n    });\n\n  });\n\n  // ========================================\n  // CACHE (se implementado)\n  // ========================================\n  describe('Cache HTTP', () => {\n    \n    it('deve retornar Cache-Control header', async () => {\n      (DatabaseManager.queryEmpWithParams as jest.Mock).mockResolvedValue([{\n        itemCodigo: '7530110',\n        itemDescricao: 'Test',\n        itemUnidade: 'UN'\n      }]);\n\n      const response = await request(app)\n        .get('/api/lor0138/item/dadosCadastrais/informacoesGerais/7530110');\n\n      // Se cache middleware estiver ativo\n      if (response.headers['cache-control']) {\n        expect(response.headers['cache-control']).toBeDefined();\n      }\n    });\n\n  });\n\n  // ========================================\n  // AUTENTICAÇÃO (API Key opcional)\n  // ========================================\n  describe('API Key (Opcional)', () => {\n    \n    it('deve aceitar requisição sem API Key', async () => {\n      (DatabaseManager.queryEmpWithParams as jest.Mock).mockResolvedValue([{\n        itemCodigo: '7530110',\n        itemDescricao: 'Test',\n        itemUnidade: 'UN'\n      }]);\n\n      const response = await request(app)\n        .get('/api/lor0138/item/dadosCadastrais/informacoesGerais/7530110')\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n    });\n\n    it('deve aceitar API Key válida se fornecida', async () => {\n      (DatabaseManager.queryEmpWithParams as jest.Mock).mockResolvedValue([{\n        itemCodigo: '7530110',\n        itemDescricao: 'Test',\n        itemUnidade: 'UN'\n      }]);\n\n      const response = await request(app)\n        .get('/api/lor0138/item/dadosCadastrais/informacoesGerais/7530110')\n        .set('X-API-Key', 'free-demo-key-123456')\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n    });\n\n  });\n\n  // ========================================\n  // PERFORMANCE\n  // ========================================\n  describe('Performance', () => {\n    \n    it('deve responder em menos de 1 segundo', async () => {\n      (DatabaseManager.queryEmpWithParams as jest.Mock).mockResolvedValue([{\n        itemCodigo: '7530110',\n        itemDescricao: 'Test',\n        itemUnidade: 'UN'\n      }]);\n\n      const start = Date.now();\n      \n      await request(app)\n        .get('/api/lor0138/item/dadosCadastrais/informacoesGerais/7530110')\n        .expect(200);\n\n      const duration = Date.now() - start;\n      expect(duration).toBeLessThan(1000);\n    });\n\n  });\n\n  // ========================================\n  // EDGE CASES\n  // ========================================\n  describe('Edge Cases', () => {\n    \n    it('deve aceitar código alfanumérico', async () => {\n      (DatabaseManager.queryEmpWithParams as jest.Mock).mockResolvedValue([{\n        itemCodigo: 'ABC123',\n        itemDescricao: 'Test',\n        itemUnidade: 'UN'\n      }]);\n\n      const response = await request(app)\n        .get('/api/lor0138/item/dadosCadastrais/informacoesGerais/ABC123')\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n    });\n\n    it('deve aceitar código de 1 caractere', async () => {\n      (DatabaseManager.queryEmpWithParams as jest.Mock).mockResolvedValue([{\n        itemCodigo: 'A',\n        itemDescricao: 'Test',\n        itemUnidade: 'UN'\n      }]);\n\n      const response = await request(app)\n        .get('/api/lor0138/item/dadosCadastrais/informacoesGerais/A')\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n    });\n\n    it('deve aceitar código de 16 caracteres (máximo)', async () => {\n      const codigo16 = '1234567890123456';\n      \n      (DatabaseManager.queryEmpWithParams as jest.Mock).mockResolvedValue([{\n        itemCodigo: codigo16,\n        itemDescricao: 'Test',\n        itemUnidade: 'UN'\n      }]);\n\n      const response = await request(app)\n        .get(`/api/lor0138/item/dadosCadastrais/informacoesGerais/${codigo16}`)\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n    });\n\n  });\n\n  // ========================================\n  // ROTAS ESPECIAIS\n  // ========================================\n  describe('Rotas do Sistema', () => {\n    \n    it('GET / - deve retornar informações da API', async () => {\n      const response = await request(app)\n        .get('/')\n        .expect(200);\n\n      expect(response.body).toHaveProperty('message');\n      expect(response.body).toHaveProperty('version');\n      expect(response.body).toHaveProperty('documentation');\n    });\n\n    it('GET /health - deve retornar status de saúde', async () => {\n      // Garantir que o mock está configurado\n      (DatabaseManager.getConnection as jest.Mock).mockReturnValue({\n        query: jest.fn().mockResolvedValue([{ test: 1 }])\n      });\n      \n      (DatabaseManager.getConnectionStatus as jest.Mock).mockReturnValue({\n        type: 'sqlserver',\n        mode: 'REAL_DATABASE',\n        error: undefined\n      });\n\n      const response = await request(app)\n        .get('/health');\n\n      // Health check pode retornar 200 (healthy) ou 503 (unhealthy)\n      // Verifica que retornou uma resposta válida\n      expect([200, 503]).toContain(response.status);\n      expect(response.body).toHaveProperty('status');\n      expect(response.body).toHaveProperty('database');\n    });\n\n    it('GET /metrics - deve retornar métricas Prometheus', async () => {\n      const response = await request(app)\n        .get('/metrics');\n\n      // Métricas retornam texto, não JSON\n      expect(response.text).toBeDefined();\n    });\n\n  });\n\n});"],"version":3}