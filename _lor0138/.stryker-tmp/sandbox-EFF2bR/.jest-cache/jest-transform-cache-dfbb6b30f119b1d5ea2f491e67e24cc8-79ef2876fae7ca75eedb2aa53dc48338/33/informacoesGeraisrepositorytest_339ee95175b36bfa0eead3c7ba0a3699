1958c99a6f260b22fa0824b099e891e7
"use strict";
// @ts-nocheck
// tests/unit/repositories/informacoesGerais.repository.test.ts
Object.defineProperty(exports, "__esModule", { value: true });
// Mock do DatabaseManager
jest.mock('@infrastructure/database/DatabaseManager');
// Mock do QueryCacheService
jest.mock('@shared/utils/cache/QueryCacheService');
const informacoesGerais_repository_1 = require("@api/lor0138/item/dadosCadastrais/informacoesGerais/repository/informacoesGerais.repository");
const DatabaseManager_1 = require("@infrastructure/database/DatabaseManager");
const QueryCacheService_1 = require("@shared/utils/cache/QueryCacheService");
const item_factory_1 = require("../../factories/item.factory");
describe('Repository - ItemInformacoesGeraisRepository', () => {
    beforeEach(() => {
        jest.clearAllMocks();
    });
    // ========================================
    // getItemMaster
    // ========================================
    describe('getItemMaster', () => {
        it('deve retornar dados do item quando encontrado', async () => {
            const mockResult = [(0, item_factory_1.createItemMasterQueryResult)()];
            // Mock do cache retornando o resultado da query
            QueryCacheService_1.QueryCacheService.withItemCache.mockImplementation(async (query, params, fn) => fn());
            DatabaseManager_1.DatabaseManager.queryEmpWithParams.mockResolvedValue(mockResult);
            const result = await informacoesGerais_repository_1.ItemInformacoesGeraisRepository.getItemMaster('7530110');
            expect(result).toEqual(mockResult[0]);
            expect(DatabaseManager_1.DatabaseManager.queryEmpWithParams).toHaveBeenCalledTimes(1);
            expect(DatabaseManager_1.DatabaseManager.queryEmpWithParams).toHaveBeenCalledWith(expect.stringContaining('OPENQUERY'), expect.arrayContaining([
                expect.objectContaining({
                    name: 'paramItemCodigo',
                    value: '7530110'
                })
            ]));
        });
        it('deve retornar null quando item não encontrado', async () => {
            QueryCacheService_1.QueryCacheService.withItemCache.mockImplementation(async (query, params, fn) => fn());
            DatabaseManager_1.DatabaseManager.queryEmpWithParams.mockResolvedValue([]);
            const result = await informacoesGerais_repository_1.ItemInformacoesGeraisRepository.getItemMaster('INEXISTENTE');
            expect(result).toBeNull();
        });
        it('deve usar queries parametrizadas (proteção SQL Injection)', async () => {
            const maliciousCode = "'; DROP TABLE item;--";
            QueryCacheService_1.QueryCacheService.withItemCache.mockImplementation(async (query, params, fn) => fn());
            DatabaseManager_1.DatabaseManager.queryEmpWithParams.mockResolvedValue([]);
            await informacoesGerais_repository_1.ItemInformacoesGeraisRepository.getItemMaster(maliciousCode);
            // Verifica que usa parâmetros, não concatenação de string
            expect(DatabaseManager_1.DatabaseManager.queryEmpWithParams).toHaveBeenCalledWith(expect.any(String), expect.arrayContaining([
                expect.objectContaining({
                    name: 'paramItemCodigo',
                    value: maliciousCode
                })
            ]));
        });
        it('deve usar cache L1/L2', async () => {
            const mockResult = [(0, item_factory_1.createItemMasterQueryResult)()];
            QueryCacheService_1.QueryCacheService.withItemCache.mockImplementation(async (query, params, fn) => fn());
            DatabaseManager_1.DatabaseManager.queryEmpWithParams.mockResolvedValue(mockResult);
            await informacoesGerais_repository_1.ItemInformacoesGeraisRepository.getItemMaster('7530110');
            expect(QueryCacheService_1.QueryCacheService.withItemCache).toHaveBeenCalledTimes(1);
            expect(QueryCacheService_1.QueryCacheService.withItemCache).toHaveBeenCalledWith(expect.stringContaining('OPENQUERY'), expect.any(Array), expect.any(Function));
        });
        it('deve propagar erros do banco de dados', async () => {
            const dbError = new Error('Conexão perdida');
            QueryCacheService_1.QueryCacheService.withItemCache.mockImplementation(async (query, params, fn) => fn());
            DatabaseManager_1.DatabaseManager.queryEmpWithParams.mockRejectedValue(dbError);
            await expect(informacoesGerais_repository_1.ItemInformacoesGeraisRepository.getItemMaster('7530110')).rejects.toThrow('Conexão perdida');
        });
        it('deve construir query OPENQUERY correta para Progress', async () => {
            QueryCacheService_1.QueryCacheService.withItemCache.mockImplementation(async (query, params, fn) => fn());
            DatabaseManager_1.DatabaseManager.queryEmpWithParams.mockResolvedValue([]);
            await informacoesGerais_repository_1.ItemInformacoesGeraisRepository.getItemMaster('7530110');
            const [query] = DatabaseManager_1.DatabaseManager.queryEmpWithParams.mock.calls[0];
            // Valida estrutura da query
            expect(query).toContain('DECLARE @itemCodigo varchar(16)');
            expect(query).toContain('OPENQUERY(PRD_EMS2EMP');
            expect(query).toContain('pub.item');
            expect(query).toContain('it-codigo');
            expect(query).toContain('desc-item');
            expect(query).toContain('EXEC sp_executesql');
        });
    });
    // ========================================
    // getItemEstabelecimentos
    // ========================================
    describe('getItemEstabelecimentos', () => {
        it('deve retornar estabelecimentos do item', async () => {
            const mockResult = [
                (0, item_factory_1.createItemEstabQueryResult)(),
                (0, item_factory_1.createItemEstabQueryResult)({ estabCodigo: '02.01', estabNome: 'Fábrica' })
            ];
            QueryCacheService_1.QueryCacheService.withEstabelecimentoCache.mockImplementation(async (query, params, fn) => fn());
            DatabaseManager_1.DatabaseManager.queryEmpWithParams.mockResolvedValue(mockResult);
            const result = await informacoesGerais_repository_1.ItemInformacoesGeraisRepository.getItemEstabelecimentos('7530110');
            expect(result).toEqual(mockResult);
            expect(result).toHaveLength(2);
            expect(DatabaseManager_1.DatabaseManager.queryEmpWithParams).toHaveBeenCalledTimes(1);
        });
        it('deve retornar array vazio quando não há estabelecimentos', async () => {
            QueryCacheService_1.QueryCacheService.withEstabelecimentoCache.mockImplementation(async (query, params, fn) => fn());
            DatabaseManager_1.DatabaseManager.queryEmpWithParams.mockResolvedValue([]);
            const result = await informacoesGerais_repository_1.ItemInformacoesGeraisRepository.getItemEstabelecimentos('7530110');
            expect(result).toEqual([]);
        });
        it('deve usar cache específico de estabelecimentos', async () => {
            QueryCacheService_1.QueryCacheService.withEstabelecimentoCache.mockImplementation(async (query, params, fn) => fn());
            DatabaseManager_1.DatabaseManager.queryEmpWithParams.mockResolvedValue([]);
            await informacoesGerais_repository_1.ItemInformacoesGeraisRepository.getItemEstabelecimentos('7530110');
            expect(QueryCacheService_1.QueryCacheService.withEstabelecimentoCache).toHaveBeenCalledTimes(1);
        });
        it('deve fazer JOIN com dois Linked Servers (EMP + MULT)', async () => {
            QueryCacheService_1.QueryCacheService.withEstabelecimentoCache.mockImplementation(async (query, params, fn) => fn());
            DatabaseManager_1.DatabaseManager.queryEmpWithParams.mockResolvedValue([]);
            await informacoesGerais_repository_1.ItemInformacoesGeraisRepository.getItemEstabelecimentos('7530110');
            const [query] = DatabaseManager_1.DatabaseManager.queryEmpWithParams.mock.calls[0];
            // Valida JOIN entre PRD_EMS2EMP e PRD_EMS2MULT
            expect(query).toContain('OPENQUERY(PRD_EMS2EMP');
            expect(query).toContain('OPENQUERY(PRD_EMS2MULT');
            expect(query).toContain('item-uni-estab');
            expect(query).toContain('estabelec');
            expect(query).toContain('LEFT JOIN');
        });
        it('deve usar parâmetros em ambas as queries OPENQUERY', async () => {
            QueryCacheService_1.QueryCacheService.withEstabelecimentoCache.mockImplementation(async (query, params, fn) => fn());
            DatabaseManager_1.DatabaseManager.queryEmpWithParams.mockResolvedValue([]);
            await informacoesGerais_repository_1.ItemInformacoesGeraisRepository.getItemEstabelecimentos('7530110');
            expect(DatabaseManager_1.DatabaseManager.queryEmpWithParams).toHaveBeenCalledWith(expect.any(String), expect.arrayContaining([
                expect.objectContaining({ name: 'paramItemCodigo' })
            ]));
        });
        it('deve retornar campos corretos do resultado', async () => {
            const mockResult = [(0, item_factory_1.createItemEstabQueryResult)()];
            QueryCacheService_1.QueryCacheService.withEstabelecimentoCache.mockImplementation(async (query, params, fn) => fn());
            DatabaseManager_1.DatabaseManager.queryEmpWithParams.mockResolvedValue(mockResult);
            const result = await informacoesGerais_repository_1.ItemInformacoesGeraisRepository.getItemEstabelecimentos('7530110');
            expect(result[0]).toHaveProperty('itemCodigo');
            expect(result[0]).toHaveProperty('estabCodigo');
            expect(result[0]).toHaveProperty('estabNome');
            expect(result[0]).toHaveProperty('codObsoleto');
        });
    });
    // ========================================
    // invalidateCache
    // ========================================
    describe('invalidateCache', () => {
        it('deve invalidar cache de item e estabelecimento', async () => {
            QueryCacheService_1.QueryCacheService.invalidateMultiple.mockResolvedValue(undefined);
            await informacoesGerais_repository_1.ItemInformacoesGeraisRepository.invalidateCache('7530110');
            expect(QueryCacheService_1.QueryCacheService.invalidateMultiple).toHaveBeenCalledTimes(1);
            expect(QueryCacheService_1.QueryCacheService.invalidateMultiple).toHaveBeenCalledWith([
                'item:*',
                'estabelecimento:*'
            ]);
        });
        it('deve logar invalidação de cache', async () => {
            const consoleLogSpy = jest.spyOn(console, 'log').mockImplementation();
            QueryCacheService_1.QueryCacheService.invalidateMultiple.mockResolvedValue(undefined);
            await informacoesGerais_repository_1.ItemInformacoesGeraisRepository.invalidateCache('7530110');
            expect(consoleLogSpy).toHaveBeenCalledWith('Cache invalidado para item:', '7530110');
            consoleLogSpy.mockRestore();
        });
    });
    // ========================================
    // CENÁRIOS DE ERRO
    // ========================================
    describe('Tratamento de Erros', () => {
        it('deve tratar timeout do banco de dados', async () => {
            const timeoutError = new Error('Timeout: Request failed to complete');
            QueryCacheService_1.QueryCacheService.withItemCache.mockImplementation(async (query, params, fn) => fn());
            DatabaseManager_1.DatabaseManager.queryEmpWithParams.mockRejectedValue(timeoutError);
            await expect(informacoesGerais_repository_1.ItemInformacoesGeraisRepository.getItemMaster('7530110')).rejects.toThrow('Timeout');
        });
        it('deve tratar erro de conexão perdida', async () => {
            const connectionError = new Error('ECONNREFUSED');
            QueryCacheService_1.QueryCacheService.withEstabelecimentoCache.mockImplementation(async (query, params, fn) => fn());
            DatabaseManager_1.DatabaseManager.queryEmpWithParams.mockRejectedValue(connectionError);
            await expect(informacoesGerais_repository_1.ItemInformacoesGeraisRepository.getItemEstabelecimentos('7530110')).rejects.toThrow('ECONNREFUSED');
        });
        it('deve tratar erro de sintaxe SQL', async () => {
            const sqlError = new Error('Incorrect syntax near');
            QueryCacheService_1.QueryCacheService.withItemCache.mockImplementation(async (query, params, fn) => fn());
            DatabaseManager_1.DatabaseManager.queryEmpWithParams.mockRejectedValue(sqlError);
            await expect(informacoesGerais_repository_1.ItemInformacoesGeraisRepository.getItemMaster('7530110')).rejects.toThrow('Incorrect syntax');
        });
    });
    // ========================================
    // INTEGRAÇÃO COM CACHE
    // ========================================
    describe('Integração com Cache', () => {
        it('deve retornar dados do cache em cache hit', async () => {
            const cachedData = [(0, item_factory_1.createItemMasterQueryResult)()];
            // Mock cache retornando dados diretamente (cache hit)
            QueryCacheService_1.QueryCacheService.withItemCache.mockResolvedValue(cachedData);
            const result = await informacoesGerais_repository_1.ItemInformacoesGeraisRepository.getItemMaster('7530110');
            expect(result).toEqual(cachedData[0]);
            // Não deve chamar o banco em cache hit
            expect(DatabaseManager_1.DatabaseManager.queryEmpWithParams).not.toHaveBeenCalled();
        });
        it('deve buscar do banco em cache miss', async () => {
            const dbData = [(0, item_factory_1.createItemMasterQueryResult)()];
            // Mock cache executando a função (cache miss)
            QueryCacheService_1.QueryCacheService.withItemCache.mockImplementation(async (query, params, fn) => fn());
            DatabaseManager_1.DatabaseManager.queryEmpWithParams.mockResolvedValue(dbData);
            const result = await informacoesGerais_repository_1.ItemInformacoesGeraisRepository.getItemMaster('7530110');
            expect(result).toEqual(dbData[0]);
            expect(DatabaseManager_1.DatabaseManager.queryEmpWithParams).toHaveBeenCalledTimes(1);
        });
        it('deve usar TTL diferente para item e estabelecimento', async () => {
            QueryCacheService_1.QueryCacheService.withItemCache.mockImplementation(async (query, params, fn) => fn());
            QueryCacheService_1.QueryCacheService.withEstabelecimentoCache.mockImplementation(async (query, params, fn) => fn());
            DatabaseManager_1.DatabaseManager.queryEmpWithParams.mockResolvedValue([]);
            await informacoesGerais_repository_1.ItemInformacoesGeraisRepository.getItemMaster('7530110');
            await informacoesGerais_repository_1.ItemInformacoesGeraisRepository.getItemEstabelecimentos('7530110');
            // Verifica que usa caches diferentes
            expect(QueryCacheService_1.QueryCacheService.withItemCache).toHaveBeenCalledTimes(1);
            expect(QueryCacheService_1.QueryCacheService.withEstabelecimentoCache).toHaveBeenCalledTimes(1);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,