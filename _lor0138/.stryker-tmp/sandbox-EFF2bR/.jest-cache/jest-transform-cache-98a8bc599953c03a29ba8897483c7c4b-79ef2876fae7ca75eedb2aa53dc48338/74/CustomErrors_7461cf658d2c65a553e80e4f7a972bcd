82b67c85955f525e1d077521f716913d
"use strict";
// src/shared/errors/CustomErrors.ts
Object.defineProperty(exports, "__esModule", { value: true });
exports.BusinessRuleError = exports.ConfigurationError = exports.RateLimitError = exports.AuthorizationError = exports.AuthenticationError = exports.CacheError = exports.ExternalServiceError = exports.ConnectionTimeoutError = exports.DatabaseError = exports.ValidationError = exports.EstabelecimentoNotFoundError = exports.ItemNotFoundError = void 0;
const AppError_1 = require("./AppError");
/**
 * Erro quando item não é encontrado
 */
class ItemNotFoundError extends AppError_1.AppError {
    constructor(itemCodigo) {
        super(404, `Item ${itemCodigo} não encontrado`, true, { itemCodigo });
    }
}
exports.ItemNotFoundError = ItemNotFoundError;
/**
 * Erro quando estabelecimento não é encontrado
 */
class EstabelecimentoNotFoundError extends AppError_1.AppError {
    constructor(estabCodigo) {
        super(404, `Estabelecimento ${estabCodigo} não encontrado`, true, { estabCodigo });
    }
}
exports.EstabelecimentoNotFoundError = EstabelecimentoNotFoundError;
/**
 * Erro de validação de dados
 */
class ValidationError extends AppError_1.AppError {
    constructor(message, fields) {
        super(400, message, true, { fields });
    }
}
exports.ValidationError = ValidationError;
/**
 * Erro de banco de dados
 */
class DatabaseError extends AppError_1.AppError {
    constructor(message, originalError) {
        super(500, `Erro no banco de dados: ${message}`, true, {
            originalMessage: originalError?.message,
            ...(process.env.NODE_ENV === 'development' && {
                stack: originalError?.stack
            }),
        });
    }
}
exports.DatabaseError = DatabaseError;
/**
 * Erro de timeout de conexão
 */
class ConnectionTimeoutError extends AppError_1.AppError {
    constructor(service, timeout) {
        super(503, `Timeout ao conectar com ${service} após ${timeout}ms`, true, { service, timeout });
    }
}
exports.ConnectionTimeoutError = ConnectionTimeoutError;
/**
 * Erro de conexão com serviço externo
 */
class ExternalServiceError extends AppError_1.AppError {
    constructor(service, message) {
        super(503, `Erro no serviço ${service}: ${message}`, true, { service });
    }
}
exports.ExternalServiceError = ExternalServiceError;
/**
 * Erro de cache
 */
class CacheError extends AppError_1.AppError {
    constructor(operation, message) {
        super(500, `Erro no cache (${operation}): ${message}`, true, { operation });
    }
}
exports.CacheError = CacheError;
/**
 * Erro de autenticação
 */
class AuthenticationError extends AppError_1.AppError {
    constructor(message = 'Não autenticado') {
        super(401, message, true);
    }
}
exports.AuthenticationError = AuthenticationError;
/**
 * Erro de autorização
 */
class AuthorizationError extends AppError_1.AppError {
    constructor(message = 'Não autorizado') {
        super(403, message, true);
    }
}
exports.AuthorizationError = AuthorizationError;
/**
 * Erro de rate limit
 */
class RateLimitError extends AppError_1.AppError {
    constructor(retryAfter) {
        super(429, 'Muitas requisições. Tente novamente em alguns segundos.', true, { retryAfter });
    }
}
exports.RateLimitError = RateLimitError;
/**
 * Erro de configuração
 */
class ConfigurationError extends AppError_1.AppError {
    constructor(message) {
        super(500, `Erro de configuração: ${message}`, false);
    }
}
exports.ConfigurationError = ConfigurationError;
/**
 * Erro de business rule
 */
class BusinessRuleError extends AppError_1.AppError {
    constructor(message, rule) {
        super(422, message, true, { rule });
    }
}
exports.BusinessRuleError = BusinessRuleError;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvbWFuby9wcm9qZXRvcy9kYXRhc3VsL2xvcjAxMzgvc3JjL3NoYXJlZC9lcnJvcnMvQ3VzdG9tRXJyb3JzLnRzIiwibWFwcGluZ3MiOiI7QUFBQSxvQ0FBb0M7OztBQUVwQyx5Q0FBc0M7QUFFdEM7O0dBRUc7QUFDSCxNQUFhLGlCQUFrQixTQUFRLG1CQUFRO0lBQzdDLFlBQVksVUFBa0I7UUFDNUIsS0FBSyxDQUFDLEdBQUcsRUFBRSxRQUFRLFVBQVUsaUJBQWlCLEVBQUUsSUFBSSxFQUFFLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQztJQUN4RSxDQUFDO0NBQ0Y7QUFKRCw4Q0FJQztBQUVEOztHQUVHO0FBQ0gsTUFBYSw0QkFBNkIsU0FBUSxtQkFBUTtJQUN4RCxZQUFZLFdBQW1CO1FBQzdCLEtBQUssQ0FBQyxHQUFHLEVBQUUsbUJBQW1CLFdBQVcsaUJBQWlCLEVBQUUsSUFBSSxFQUFFLEVBQUUsV0FBVyxFQUFFLENBQUMsQ0FBQztJQUNyRixDQUFDO0NBQ0Y7QUFKRCxvRUFJQztBQUVEOztHQUVHO0FBQ0gsTUFBYSxlQUFnQixTQUFRLG1CQUFRO0lBQzNDLFlBQVksT0FBZSxFQUFFLE1BQStCO1FBQzFELEtBQUssQ0FBQyxHQUFHLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFDeEMsQ0FBQztDQUNGO0FBSkQsMENBSUM7QUFFRDs7R0FFRztBQUNILE1BQWEsYUFBYyxTQUFRLG1CQUFRO0lBQ3pDLFlBQVksT0FBZSxFQUFFLGFBQXFCO1FBQ2hELEtBQUssQ0FBQyxHQUFHLEVBQUUsMkJBQTJCLE9BQU8sRUFBRSxFQUFFLElBQUksRUFBRTtZQUNyRCxlQUFlLEVBQUUsYUFBYSxFQUFFLE9BQU87WUFDdkMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxLQUFLLGFBQWEsSUFBSTtnQkFDNUMsS0FBSyxFQUFFLGFBQWEsRUFBRSxLQUFLO2FBQzVCLENBQUM7U0FDSCxDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0Y7QUFURCxzQ0FTQztBQUVEOztHQUVHO0FBQ0gsTUFBYSxzQkFBdUIsU0FBUSxtQkFBUTtJQUNsRCxZQUFZLE9BQWUsRUFBRSxPQUFlO1FBQzFDLEtBQUssQ0FDSCxHQUFHLEVBQ0gsMkJBQTJCLE9BQU8sU0FBUyxPQUFPLElBQUksRUFDdEQsSUFBSSxFQUNKLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxDQUNyQixDQUFDO0lBQ0osQ0FBQztDQUNGO0FBVEQsd0RBU0M7QUFFRDs7R0FFRztBQUNILE1BQWEsb0JBQXFCLFNBQVEsbUJBQVE7SUFDaEQsWUFBWSxPQUFlLEVBQUUsT0FBZTtRQUMxQyxLQUFLLENBQUMsR0FBRyxFQUFFLG1CQUFtQixPQUFPLEtBQUssT0FBTyxFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztJQUMxRSxDQUFDO0NBQ0Y7QUFKRCxvREFJQztBQUVEOztHQUVHO0FBQ0gsTUFBYSxVQUFXLFNBQVEsbUJBQVE7SUFDdEMsWUFBWSxTQUFpQixFQUFFLE9BQWU7UUFDNUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxrQkFBa0IsU0FBUyxNQUFNLE9BQU8sRUFBRSxFQUFFLElBQUksRUFBRSxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUM7SUFDOUUsQ0FBQztDQUNGO0FBSkQsZ0NBSUM7QUFFRDs7R0FFRztBQUNILE1BQWEsbUJBQW9CLFNBQVEsbUJBQVE7SUFDL0MsWUFBWSxVQUFrQixpQkFBaUI7UUFDN0MsS0FBSyxDQUFDLEdBQUcsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDNUIsQ0FBQztDQUNGO0FBSkQsa0RBSUM7QUFFRDs7R0FFRztBQUNILE1BQWEsa0JBQW1CLFNBQVEsbUJBQVE7SUFDOUMsWUFBWSxVQUFrQixnQkFBZ0I7UUFDNUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDNUIsQ0FBQztDQUNGO0FBSkQsZ0RBSUM7QUFFRDs7R0FFRztBQUNILE1BQWEsY0FBZSxTQUFRLG1CQUFRO0lBQzFDLFlBQVksVUFBbUI7UUFDN0IsS0FBSyxDQUNILEdBQUcsRUFDSCx5REFBeUQsRUFDekQsSUFBSSxFQUNKLEVBQUUsVUFBVSxFQUFFLENBQ2YsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQVRELHdDQVNDO0FBRUQ7O0dBRUc7QUFDSCxNQUFhLGtCQUFtQixTQUFRLG1CQUFRO0lBQzlDLFlBQVksT0FBZTtRQUN6QixLQUFLLENBQUMsR0FBRyxFQUFFLHlCQUF5QixPQUFPLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUN4RCxDQUFDO0NBQ0Y7QUFKRCxnREFJQztBQUVEOztHQUVHO0FBQ0gsTUFBYSxpQkFBa0IsU0FBUSxtQkFBUTtJQUM3QyxZQUFZLE9BQWUsRUFBRSxJQUFhO1FBQ3hDLEtBQUssQ0FBQyxHQUFHLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7SUFDdEMsQ0FBQztDQUNGO0FBSkQsOENBSUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL2hvbWUvbWFuby9wcm9qZXRvcy9kYXRhc3VsL2xvcjAxMzgvc3JjL3NoYXJlZC9lcnJvcnMvQ3VzdG9tRXJyb3JzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9zaGFyZWQvZXJyb3JzL0N1c3RvbUVycm9ycy50c1xuXG5pbXBvcnQgeyBBcHBFcnJvciB9IGZyb20gJy4vQXBwRXJyb3InO1xuXG4vKipcbiAqIEVycm8gcXVhbmRvIGl0ZW0gbsOjbyDDqSBlbmNvbnRyYWRvXG4gKi9cbmV4cG9ydCBjbGFzcyBJdGVtTm90Rm91bmRFcnJvciBleHRlbmRzIEFwcEVycm9yIHtcbiAgY29uc3RydWN0b3IoaXRlbUNvZGlnbzogc3RyaW5nKSB7XG4gICAgc3VwZXIoNDA0LCBgSXRlbSAke2l0ZW1Db2RpZ299IG7Do28gZW5jb250cmFkb2AsIHRydWUsIHsgaXRlbUNvZGlnbyB9KTtcbiAgfVxufVxuXG4vKipcbiAqIEVycm8gcXVhbmRvIGVzdGFiZWxlY2ltZW50byBuw6NvIMOpIGVuY29udHJhZG9cbiAqL1xuZXhwb3J0IGNsYXNzIEVzdGFiZWxlY2ltZW50b05vdEZvdW5kRXJyb3IgZXh0ZW5kcyBBcHBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKGVzdGFiQ29kaWdvOiBzdHJpbmcpIHtcbiAgICBzdXBlcig0MDQsIGBFc3RhYmVsZWNpbWVudG8gJHtlc3RhYkNvZGlnb30gbsOjbyBlbmNvbnRyYWRvYCwgdHJ1ZSwgeyBlc3RhYkNvZGlnbyB9KTtcbiAgfVxufVxuXG4vKipcbiAqIEVycm8gZGUgdmFsaWRhw6fDo28gZGUgZGFkb3NcbiAqL1xuZXhwb3J0IGNsYXNzIFZhbGlkYXRpb25FcnJvciBleHRlbmRzIEFwcEVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nLCBmaWVsZHM/OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+KSB7XG4gICAgc3VwZXIoNDAwLCBtZXNzYWdlLCB0cnVlLCB7IGZpZWxkcyB9KTtcbiAgfVxufVxuXG4vKipcbiAqIEVycm8gZGUgYmFuY28gZGUgZGFkb3NcbiAqL1xuZXhwb3J0IGNsYXNzIERhdGFiYXNlRXJyb3IgZXh0ZW5kcyBBcHBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2U6IHN0cmluZywgb3JpZ2luYWxFcnJvcj86IEVycm9yKSB7XG4gICAgc3VwZXIoNTAwLCBgRXJybyBubyBiYW5jbyBkZSBkYWRvczogJHttZXNzYWdlfWAsIHRydWUsIHtcbiAgICAgIG9yaWdpbmFsTWVzc2FnZTogb3JpZ2luYWxFcnJvcj8ubWVzc2FnZSxcbiAgICAgIC4uLihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JyAmJiB7IFxuICAgICAgICBzdGFjazogb3JpZ2luYWxFcnJvcj8uc3RhY2sgXG4gICAgICB9KSxcbiAgICB9KTtcbiAgfVxufVxuXG4vKipcbiAqIEVycm8gZGUgdGltZW91dCBkZSBjb25leMOjb1xuICovXG5leHBvcnQgY2xhc3MgQ29ubmVjdGlvblRpbWVvdXRFcnJvciBleHRlbmRzIEFwcEVycm9yIHtcbiAgY29uc3RydWN0b3Ioc2VydmljZTogc3RyaW5nLCB0aW1lb3V0OiBudW1iZXIpIHtcbiAgICBzdXBlcihcbiAgICAgIDUwMyxcbiAgICAgIGBUaW1lb3V0IGFvIGNvbmVjdGFyIGNvbSAke3NlcnZpY2V9IGFww7NzICR7dGltZW91dH1tc2AsXG4gICAgICB0cnVlLFxuICAgICAgeyBzZXJ2aWNlLCB0aW1lb3V0IH1cbiAgICApO1xuICB9XG59XG5cbi8qKlxuICogRXJybyBkZSBjb25leMOjbyBjb20gc2VydmnDp28gZXh0ZXJub1xuICovXG5leHBvcnQgY2xhc3MgRXh0ZXJuYWxTZXJ2aWNlRXJyb3IgZXh0ZW5kcyBBcHBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKHNlcnZpY2U6IHN0cmluZywgbWVzc2FnZTogc3RyaW5nKSB7XG4gICAgc3VwZXIoNTAzLCBgRXJybyBubyBzZXJ2acOnbyAke3NlcnZpY2V9OiAke21lc3NhZ2V9YCwgdHJ1ZSwgeyBzZXJ2aWNlIH0pO1xuICB9XG59XG5cbi8qKlxuICogRXJybyBkZSBjYWNoZVxuICovXG5leHBvcnQgY2xhc3MgQ2FjaGVFcnJvciBleHRlbmRzIEFwcEVycm9yIHtcbiAgY29uc3RydWN0b3Iob3BlcmF0aW9uOiBzdHJpbmcsIG1lc3NhZ2U6IHN0cmluZykge1xuICAgIHN1cGVyKDUwMCwgYEVycm8gbm8gY2FjaGUgKCR7b3BlcmF0aW9ufSk6ICR7bWVzc2FnZX1gLCB0cnVlLCB7IG9wZXJhdGlvbiB9KTtcbiAgfVxufVxuXG4vKipcbiAqIEVycm8gZGUgYXV0ZW50aWNhw6fDo29cbiAqL1xuZXhwb3J0IGNsYXNzIEF1dGhlbnRpY2F0aW9uRXJyb3IgZXh0ZW5kcyBBcHBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2U6IHN0cmluZyA9ICdOw6NvIGF1dGVudGljYWRvJykge1xuICAgIHN1cGVyKDQwMSwgbWVzc2FnZSwgdHJ1ZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBFcnJvIGRlIGF1dG9yaXphw6fDo29cbiAqL1xuZXhwb3J0IGNsYXNzIEF1dGhvcml6YXRpb25FcnJvciBleHRlbmRzIEFwcEVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nID0gJ07Do28gYXV0b3JpemFkbycpIHtcbiAgICBzdXBlcig0MDMsIG1lc3NhZ2UsIHRydWUpO1xuICB9XG59XG5cbi8qKlxuICogRXJybyBkZSByYXRlIGxpbWl0XG4gKi9cbmV4cG9ydCBjbGFzcyBSYXRlTGltaXRFcnJvciBleHRlbmRzIEFwcEVycm9yIHtcbiAgY29uc3RydWN0b3IocmV0cnlBZnRlcj86IG51bWJlcikge1xuICAgIHN1cGVyKFxuICAgICAgNDI5LFxuICAgICAgJ011aXRhcyByZXF1aXNpw6fDtWVzLiBUZW50ZSBub3ZhbWVudGUgZW0gYWxndW5zIHNlZ3VuZG9zLicsXG4gICAgICB0cnVlLFxuICAgICAgeyByZXRyeUFmdGVyIH1cbiAgICApO1xuICB9XG59XG5cbi8qKlxuICogRXJybyBkZSBjb25maWd1cmHDp8Ojb1xuICovXG5leHBvcnQgY2xhc3MgQ29uZmlndXJhdGlvbkVycm9yIGV4dGVuZHMgQXBwRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlOiBzdHJpbmcpIHtcbiAgICBzdXBlcig1MDAsIGBFcnJvIGRlIGNvbmZpZ3VyYcOnw6NvOiAke21lc3NhZ2V9YCwgZmFsc2UpO1xuICB9XG59XG5cbi8qKlxuICogRXJybyBkZSBidXNpbmVzcyBydWxlXG4gKi9cbmV4cG9ydCBjbGFzcyBCdXNpbmVzc1J1bGVFcnJvciBleHRlbmRzIEFwcEVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nLCBydWxlPzogc3RyaW5nKSB7XG4gICAgc3VwZXIoNDIyLCBtZXNzYWdlLCB0cnVlLCB7IHJ1bGUgfSk7XG4gIH1cbn0iXSwidmVyc2lvbiI6M30=