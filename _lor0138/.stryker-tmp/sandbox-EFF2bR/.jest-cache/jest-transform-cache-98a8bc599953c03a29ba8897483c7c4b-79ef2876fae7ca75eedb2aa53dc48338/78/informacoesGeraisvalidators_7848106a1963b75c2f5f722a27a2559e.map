{"file":"/home/mano/projetos/datasul/lor0138/src/api/lor0138/item/dadosCadastrais/informacoesGerais/validators/informacoesGerais.validators.ts","mappings":"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","names":[],"sources":["/home/mano/projetos/datasul/lor0138/src/api/lor0138/item/dadosCadastrais/informacoesGerais/validators/informacoesGerais.validators.ts"],"sourcesContent":["// src/api/lor0138/item/dadosCadastrais/informacoesGerais/validators/informacoesGerais.validators.ts\r\n\r\nimport { ItemInformacoesGeraisRequestDTO } from '../types/informacoesGerais.types';\r\n\r\n/**\r\n * Sanitiza o código do item removendo caracteres perigosos\r\n */\r\nfunction sanitizeItemCodigo(value: string): string {\r\n  // Remove espaços em branco nas extremidades\r\n  let sanitized = value.trim();\r\n  \r\n  // Remove caracteres de controle e não imprimíveis\r\n  sanitized = sanitized.replace(/[\\x00-\\x1F\\x7F]/g, '');\r\n  \r\n  // Remove tentativas de path traversal\r\n  sanitized = sanitized.replace(/\\.\\./g, '');\r\n  sanitized = sanitized.replace(/[\\/\\\\]/g, '');\r\n  \r\n  // Remove caracteres SQL perigosos adicionais (redundante com prepared statements, mas seguro)\r\n  sanitized = sanitized.replace(/[';\"\\-\\-]/g, '');\r\n  \r\n  // Remove tags HTML/XML (prevenção XSS)\r\n  sanitized = sanitized.replace(/<[^>]*>/g, '');\r\n  \r\n  return sanitized;\r\n}\r\n\r\n/**\r\n * Valida formato do código do item\r\n */\r\nfunction isValidItemCodigoFormat(value: string): boolean {\r\n  // Permite apenas: letras e números\r\n  // Caracteres permitidos: A-Z, a-z, 0-9\r\n  const validPattern = /^[A-Za-z0-9]+$/;\r\n  return validPattern.test(value);\r\n}\r\n\r\n/**\r\n * Valida os parâmetros de busca de informações gerais do item\r\n */\r\nexport function validateItemInformacoesGeraisRequest(\r\n  data: any\r\n): { valid: boolean; error?: string; data?: ItemInformacoesGeraisRequestDTO } {\r\n  \r\n  // 1. Verifica se itemCodigo foi fornecido\r\n  if (!data.itemCodigo) {\r\n    return {\r\n      valid: false,\r\n      error: 'Código do item é obrigatório',\r\n    };\r\n  }\r\n\r\n  // 2. Valida tipo\r\n  if (typeof data.itemCodigo !== 'string') {\r\n    return {\r\n      valid: false,\r\n      error: 'Código do item deve ser uma string',\r\n    };\r\n  }\r\n\r\n  // 3. Sanitiza\r\n  const sanitized = sanitizeItemCodigo(data.itemCodigo);\r\n\r\n  // 4. Valida se não ficou vazio após sanitização\r\n  if (sanitized.length === 0) {\r\n    return {\r\n      valid: false,\r\n      error: 'Código do item inválido ou contém apenas caracteres não permitidos',\r\n    };\r\n  }\r\n\r\n  // 5. Valida tamanho máximo\r\n  if (sanitized.length > 16) {\r\n    return {\r\n      valid: false,\r\n      error: 'Código do item não pode ter mais de 16 caracteres',\r\n    };\r\n  }\r\n\r\n  // 6. Valida tamanho mínimo\r\n  if (sanitized.length < 1) {\r\n    return {\r\n      valid: false,\r\n      error: 'Código do item não pode estar vazio',\r\n    };\r\n  }\r\n\r\n  // 7. Valida formato (caracteres permitidos)\r\n  if (!isValidItemCodigoFormat(sanitized)) {\r\n    return {\r\n      valid: false,\r\n      error: 'Código do item contém caracteres inválidos. Use apenas letras, números e caracteres básicos',\r\n    };\r\n  }\r\n\r\n  // 8. Validações adicionais de segurança\r\n  \r\n  // Bloqueia tentativas óbvias de SQL injection\r\n  const sqlKeywords = ['SELECT', 'INSERT', 'UPDATE', 'DELETE', 'DROP', 'CREATE', 'ALTER', 'EXEC', 'UNION'];\r\n  const upperSanitized = sanitized.toUpperCase();\r\n  for (const keyword of sqlKeywords) {\r\n    if (upperSanitized.includes(keyword)) {\r\n      return {\r\n        valid: false,\r\n        error: 'Código do item contém padrões não permitidos',\r\n      };\r\n    }\r\n  }\r\n\r\n  // Bloqueia tentativas de command injection\r\n  const dangerousPatterns = [\r\n    '&&', '||', '|', '`', '$', '$(', '${',\r\n  ];\r\n  for (const pattern of dangerousPatterns) {\r\n    if (sanitized.includes(pattern)) {\r\n      return {\r\n        valid: false,\r\n        error: 'Código do item contém caracteres não permitidos',\r\n      };\r\n    }\r\n  }\r\n\r\n  // Tudo válido\r\n  return {\r\n    valid: true,\r\n    data: { itemCodigo: sanitized },\r\n  };\r\n}"],"version":3}