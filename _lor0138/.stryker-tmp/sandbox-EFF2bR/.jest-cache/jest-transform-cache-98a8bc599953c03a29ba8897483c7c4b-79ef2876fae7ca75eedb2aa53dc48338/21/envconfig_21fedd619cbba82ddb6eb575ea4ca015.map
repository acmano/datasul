{"file":"/home/mano/projetos/datasul/lor0138/src/config/env.config.ts","mappings":"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","names":[],"sources":["/home/mano/projetos/datasul/lor0138/src/config/env.config.ts"],"sourcesContent":["// src/config/env.config.ts\r\n\r\nimport dotenv from 'dotenv';\r\nimport { appConfig } from './app.config';\r\n\r\ndotenv.config();\r\n\r\n/**\r\n * Parse de string de timeout para milissegundos\r\n * Aceita formatos: \"30s\", \"5000ms\", \"5m\", \"5000\"\r\n *\r\n * IMPORTANTE: Esta função é usada em TODO o projeto.\r\n * Garante que timeouts sempre sejam números válidos em ms.\r\n *\r\n * Formatos suportados:\r\n * - \"30000\" → 30000ms (número puro)\r\n * - \"30s\" → 30000ms (segundos)\r\n * - \"30000ms\" → 30000ms (milissegundos)\r\n * - \"5m\" → 300000ms (minutos)\r\n */\r\nexport function parseTimeout(value: string | undefined, defaultValue: number): number {\r\n  if (!value) return defaultValue;\r\n\r\n  // Se for número puro, retorna direto\r\n  if (/^\\d+$/.test(value)) {\r\n    return parseInt(value, 10);\r\n  }\r\n\r\n  // ✅ IMPORTANTE: Verificar 'ms' ANTES de 's'\r\n  // (porque 'ms' também termina com 's')\r\n  if (value.endsWith('ms')) {\r\n    return parseInt(value.slice(0, -2), 10);\r\n  }\r\n\r\n  // Se terminar com 's', converte segundos para ms\r\n  if (value.endsWith('s')) {\r\n    return parseInt(value.slice(0, -1), 10) * 1000;\r\n  }\r\n\r\n  // Se terminar com 'm', converte minutos para ms\r\n  if (value.endsWith('m')) {\r\n    return parseInt(value.slice(0, -1), 10) * 60000;\r\n  }\r\n\r\n  return defaultValue;\r\n}\r\n\r\n// ============================================\r\n// CONFIGURAÇÃO CENTRALIZADA\r\n// ============================================\r\n\r\nexport const config = {\r\n  // ==================== SERVIDOR ====================\r\n  server: {\r\n    port: parseInt(process.env.PORT || '3000', 10),\r\n    nodeEnv: (process.env.NODE_ENV || 'development') as 'development' | 'production' | 'test',\r\n    apiPrefix: process.env.API_PREFIX || '/api',\r\n  },\r\n\r\n  // ==================== BANCO DE DADOS ====================\r\n  database: {\r\n    // Tipo de conexão\r\n    type: (process.env.DB_CONNECTION_TYPE || 'sqlserver') as 'sqlserver' | 'odbc',\r\n    useMockData: process.env.USE_MOCK_DATA === 'true',\r\n\r\n    // SQL Server (usado pelo DatabaseManager)\r\n    sqlServer: {\r\n      server: process.env.DB_SERVER || appConfig.host,\r\n      port: parseInt(process.env.DB_PORT || '1433', 10),\r\n      user: process.env.DB_USER || '',\r\n      password: process.env.DB_PASSWORD || '',\r\n\r\n      // ✅ CORRETO: Usa DB_DATABASE_* (não DB_NAME_*)\r\n      databaseEmp: process.env.DB_DATABASE_EMP || '',\r\n      databaseMult: process.env.DB_DATABASE_MULT || '',\r\n\r\n      // ✅ CORRETO: Usa parseTimeout para TODOS os timeouts\r\n      connectionTimeout: parseTimeout(process.env.DB_CONNECTION_TIMEOUT, 15000),\r\n      requestTimeout: parseTimeout(process.env.DB_REQUEST_TIMEOUT, 30000),\r\n\r\n      encrypt: process.env.DB_ENCRYPT === 'true',\r\n      trustServerCertificate: process.env.DB_TRUST_SERVER_CERTIFICATE === 'true',\r\n    },\r\n\r\n    // ODBC\r\n    odbc: {\r\n      dsnEmp: process.env.ODBC_DSN_EMP || '',\r\n      dsnMult: process.env.ODBC_DSN_MULT || '',\r\n      connectionTimeout: parseTimeout(process.env.ODBC_CONNECTION_TIMEOUT, 15000),\r\n    },\r\n\r\n    // Retry\r\n    retry: {\r\n      maxAttempts: parseInt(process.env.DB_RETRY_MAX_ATTEMPTS || '3', 10),\r\n      initialDelay: parseTimeout(process.env.DB_RETRY_INITIAL_DELAY, 1000),\r\n      maxDelay: parseTimeout(process.env.DB_RETRY_MAX_DELAY, 10000),\r\n      backoffFactor: parseFloat(process.env.DB_RETRY_BACKOFF_FACTOR || '2'),\r\n    },\r\n  },\r\n\r\n  // ==================== CORS ====================\r\n  cors: {\r\n    allowedOrigins: process.env.CORS_ALLOWED_ORIGINS\r\n      ? process.env.CORS_ALLOWED_ORIGINS.split(',')\r\n      : [appConfig.baseUrl],\r\n  },\r\n\r\n  // ==================== TIMEOUTS HTTP ====================\r\n  timeout: {\r\n    request: parseTimeout(process.env.HTTP_REQUEST_TIMEOUT, 30000),\r\n    heavyOperation: parseTimeout(process.env.HTTP_HEAVY_TIMEOUT, 60000),\r\n    healthCheck: parseTimeout(process.env.HTTP_HEALTH_TIMEOUT, 5000),\r\n  },\r\n\r\n  // ==================== CACHE (Redis) ====================\r\n  cache: {\r\n    enabled: process.env.CACHE_ENABLED === 'true',\r\n    strategy: (process.env.CACHE_STRATEGY || 'memory') as 'memory' | 'redis' | 'layered',\r\n    redis: {\r\n      url: process.env.CACHE_REDIS_URL || 'redis://lor0138.lorenzetti.ibe:6379',\r\n    },\r\n    defaultTTL: parseTimeout(process.env.CACHE_DEFAULT_TTL, 300000), // 5min padrão\r\n  },\r\n};\r\n\r\n// ============================================\r\n// EXPORTS COMPATÍVEIS (não quebra código existente)\r\n// ============================================\r\n\r\n/**\r\n * @deprecated Use 'config' ao invés de 'envConfig'\r\n */\r\nexport const envConfig = config;\r\n\r\n/**\r\n * @deprecated Use 'config.server' diretamente\r\n */\r\nexport const serverConfig = {\r\n  port: config.server.port,\r\n  nodeEnv: config.server.nodeEnv,\r\n  apiPrefix: config.server.apiPrefix,\r\n  corsOrigin: config.cors.allowedOrigins[0] || '*',\r\n};"],"version":3}