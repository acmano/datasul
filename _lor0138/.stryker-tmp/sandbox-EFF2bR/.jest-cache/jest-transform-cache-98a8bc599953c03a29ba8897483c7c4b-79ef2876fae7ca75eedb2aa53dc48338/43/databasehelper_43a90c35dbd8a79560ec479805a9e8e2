4ea897b1a653595df6ccf05247fb87ee
"use strict";
// tests/helpers/database.helper.ts
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatabaseTestHelper = void 0;
exports.setupTestDatabase = setupTestDatabase;
exports.teardownTestDatabase = teardownTestDatabase;
exports.requiresRealDatabase = requiresRealDatabase;
const DatabaseManager_1 = require("@infrastructure/database/DatabaseManager");
const dotenv_1 = __importDefault(require("dotenv"));
const path_1 = __importDefault(require("path"));
/**
 * Helper para testes de integração com banco real
 *
 * Gerencia conexão com banco de produção de forma segura para testes
 */
class DatabaseTestHelper {
    /**
     * Inicializa conexão com banco para testes
     * Se falhar, volta para mock automaticamente
     */
    static async initialize() {
        if (this.initialized) {
            return;
        }
        // Carregar .env.test
        dotenv_1.default.config({ path: path_1.default.resolve(process.cwd(), '.env.test') });
        try {
            // Tentar conectar ao banco real
            await DatabaseManager_1.DatabaseManager.initialize();
            // Verificar se está realmente conectado
            const status = DatabaseManager_1.DatabaseManager.getConnectionStatus();
            if (status.mode === 'REAL_DATABASE') {
                this.useRealDatabase = true;
                console.log('✅ Testes usando banco REAL de produção (somente leitura)');
            }
            else {
                this.useRealDatabase = false;
                console.log('⚠️  Testes usando MOCK_DATA (banco não disponível)');
            }
            this.initialized = true;
        }
        catch (error) {
            console.error('❌ Erro ao conectar banco para testes, usando MOCK_DATA:', error);
            this.useRealDatabase = false;
            this.initialized = true;
        }
    }
    /**
     * Verifica se está usando banco real
     */
    static isUsingRealDatabase() {
        return this.useRealDatabase;
    }
    /**
     * Fecha conexões após testes
     */
    static async cleanup() {
        if (this.initialized) {
            await DatabaseManager_1.DatabaseManager.close();
            this.initialized = false;
            this.useRealDatabase = false;
        }
    }
    /**
     * Executa query no banco (ou mock)
     */
    static async query(sql, params) {
        if (!this.initialized) {
            await this.initialize();
        }
        if (params) {
            return DatabaseManager_1.DatabaseManager.queryEmpWithParams(sql, params);
        }
        else {
            return DatabaseManager_1.DatabaseManager.queryEmp(sql);
        }
    }
    /**
     * Verifica se item existe no banco
     * Útil para setup de testes
     */
    static async itemExists(itemCodigo) {
        try {
            const result = await DatabaseManager_1.DatabaseManager.queryEmpWithParams(`SELECT TOP 1 item."it-codigo" as itemCodigo
         FROM OPENQUERY(PRD_EMS2EMP, 
           'SELECT "it-codigo" FROM pub.item WHERE "it-codigo" = ''${itemCodigo}'''
         ) as item`, []);
            return result && result.length > 0;
        }
        catch (error) {
            return false;
        }
    }
    /**
     * Busca um item real do banco para usar nos testes
     * Se não achar, retorna um código mock
     */
    static async getTestItemCode() {
        if (!this.useRealDatabase) {
            return '7530110'; // Mock conhecido
        }
        try {
            const result = await DatabaseManager_1.DatabaseManager.queryEmpWithParams(`SELECT TOP 1 item."it-codigo" as itemCodigo
         FROM OPENQUERY(PRD_EMS2EMP, 
           'SELECT "it-codigo" FROM pub.item LIMIT 1'
         ) as item`, []);
            if (result && result.length > 0) {
                return result[0].itemCodigo;
            }
        }
        catch (error) {
            console.error('Erro ao buscar item de teste:', error);
        }
        return '7530110'; // Fallback
    }
    /**
     * Retorna códigos de teste conhecidos
     * Para diferentes cenários
     */
    static getKnownTestCodes() {
        return {
            // Item que DEVE existir em produção
            validItem: '7530110',
            // Item que NÃO existe
            invalidItem: 'INVALID999',
            // Item para teste de caracteres especiais
            specialChars: 'ABC-123',
            // Item de 1 caractere
            singleChar: 'A',
            // Item de 16 caracteres (máximo)
            maxLength: '1234567890123456',
        };
    }
    /**
     * Aguarda o banco estar pronto
     * Útil para beforeAll em testes
     */
    static async waitUntilReady(maxWaitMs = 5000) {
        const startTime = Date.now();
        while (Date.now() - startTime < maxWaitMs) {
            if (DatabaseManager_1.DatabaseManager.isReady()) {
                return true;
            }
            await new Promise(resolve => setTimeout(resolve, 100));
        }
        return false;
    }
    /**
     * Reseta estado do DatabaseManager (para testes isolados)
     */
    static async reset() {
        await this.cleanup();
        this.initialized = false;
        this.useRealDatabase = false;
    }
}
exports.DatabaseTestHelper = DatabaseTestHelper;
DatabaseTestHelper.initialized = false;
DatabaseTestHelper.useRealDatabase = false;
/**
 * Helper para criar conexão de teste
 */
async function setupTestDatabase() {
    await DatabaseTestHelper.initialize();
    return DatabaseTestHelper.isUsingRealDatabase();
}
/**
 * Helper para cleanup de teste
 */
async function teardownTestDatabase() {
    await DatabaseTestHelper.cleanup();
}
/**
 * Decorator para pular teste se banco não estiver disponível
 */
function requiresRealDatabase() {
    return (target, propertyKey, descriptor) => {
        const originalMethod = descriptor.value;
        descriptor.value = async function (...args) {
            if (!DatabaseTestHelper.isUsingRealDatabase()) {
                console.log(`⏭️  Pulando teste "${propertyKey}" - requer banco real`);
                return;
            }
            return originalMethod.apply(this, args);
        };
        return descriptor;
    };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvbWFuby9wcm9qZXRvcy9kYXRhc3VsL2xvcjAxMzgvdGVzdHMvaGVscGVycy9kYXRhYmFzZS5oZWxwZXIudHMiLCJtYXBwaW5ncyI6IjtBQUFBLG1DQUFtQzs7Ozs7O0FBeUxuQyw4Q0FHQztBQUtELG9EQUVDO0FBS0Qsb0RBZUM7QUFyTkQsOEVBQTJFO0FBQzNFLG9EQUE0QjtBQUM1QixnREFBd0I7QUFFeEI7Ozs7R0FJRztBQUVILE1BQWEsa0JBQWtCO0lBSTdCOzs7T0FHRztJQUNILE1BQU0sQ0FBQyxLQUFLLENBQUMsVUFBVTtRQUNyQixJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUNyQixPQUFPO1FBQ1QsQ0FBQztRQUVELHFCQUFxQjtRQUNyQixnQkFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLElBQUksRUFBRSxjQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFbEUsSUFBSSxDQUFDO1lBQ0gsZ0NBQWdDO1lBQ2hDLE1BQU0saUNBQWUsQ0FBQyxVQUFVLEVBQUUsQ0FBQztZQUVuQyx3Q0FBd0M7WUFDeEMsTUFBTSxNQUFNLEdBQUcsaUNBQWUsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO1lBRXJELElBQUksTUFBTSxDQUFDLElBQUksS0FBSyxlQUFlLEVBQUUsQ0FBQztnQkFDcEMsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUM7Z0JBQzVCLE9BQU8sQ0FBQyxHQUFHLENBQUMsMERBQTBELENBQUMsQ0FBQztZQUMxRSxDQUFDO2lCQUFNLENBQUM7Z0JBQ04sSUFBSSxDQUFDLGVBQWUsR0FBRyxLQUFLLENBQUM7Z0JBQzdCLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0RBQW9ELENBQUMsQ0FBQztZQUNwRSxDQUFDO1lBRUQsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7UUFDMUIsQ0FBQztRQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7WUFDZixPQUFPLENBQUMsS0FBSyxDQUFD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QUMsa0JBQWtCLENBQUMsbUJBQW1CLEVBQUUsRUFBRSxDQUFDO2dCQUM5QyxPQUFPLENBQUMsR0FBRyxDQUFDLHNCQUFzQixXQUFXLHVCQUF1QixDQUFDLENBQUM7Z0JBQ3RFLE9BQU87WUFDVCxDQUFDO1lBRUQsT0FBTyxjQUFjLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUMxQyxDQUFDLENBQUM7UUFFRixPQUFPLFVBQVUsQ0FBQztJQUNwQixDQUFDLENBQUM7QUFDSixDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9ob21lL21hbm8vcHJvamV0b3MvZGF0YXN1bC9sb3IwMTM4L3Rlc3RzL2hlbHBlcnMvZGF0YWJhc2UuaGVscGVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHRlc3RzL2hlbHBlcnMvZGF0YWJhc2UuaGVscGVyLnRzXG5cbmltcG9ydCB7IERhdGFiYXNlTWFuYWdlciB9IGZyb20gJ0BpbmZyYXN0cnVjdHVyZS9kYXRhYmFzZS9EYXRhYmFzZU1hbmFnZXInO1xuaW1wb3J0IGRvdGVudiBmcm9tICdkb3RlbnYnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5cbi8qKlxuICogSGVscGVyIHBhcmEgdGVzdGVzIGRlIGludGVncmHDp8OjbyBjb20gYmFuY28gcmVhbFxuICogXG4gKiBHZXJlbmNpYSBjb25leMOjbyBjb20gYmFuY28gZGUgcHJvZHXDp8OjbyBkZSBmb3JtYSBzZWd1cmEgcGFyYSB0ZXN0ZXNcbiAqL1xuXG5leHBvcnQgY2xhc3MgRGF0YWJhc2VUZXN0SGVscGVyIHtcbiAgcHJpdmF0ZSBzdGF0aWMgaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgcHJpdmF0ZSBzdGF0aWMgdXNlUmVhbERhdGFiYXNlID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIEluaWNpYWxpemEgY29uZXjDo28gY29tIGJhbmNvIHBhcmEgdGVzdGVzXG4gICAqIFNlIGZhbGhhciwgdm9sdGEgcGFyYSBtb2NrIGF1dG9tYXRpY2FtZW50ZVxuICAgKi9cbiAgc3RhdGljIGFzeW5jIGluaXRpYWxpemUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgaWYgKHRoaXMuaW5pdGlhbGl6ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBDYXJyZWdhciAuZW52LnRlc3RcbiAgICBkb3RlbnYuY29uZmlnKHsgcGF0aDogcGF0aC5yZXNvbHZlKHByb2Nlc3MuY3dkKCksICcuZW52LnRlc3QnKSB9KTtcblxuICAgIHRyeSB7XG4gICAgICAvLyBUZW50YXIgY29uZWN0YXIgYW8gYmFuY28gcmVhbFxuICAgICAgYXdhaXQgRGF0YWJhc2VNYW5hZ2VyLmluaXRpYWxpemUoKTtcbiAgICAgIFxuICAgICAgLy8gVmVyaWZpY2FyIHNlIGVzdMOhIHJlYWxtZW50ZSBjb25lY3RhZG9cbiAgICAgIGNvbnN0IHN0YXR1cyA9IERhdGFiYXNlTWFuYWdlci5nZXRDb25uZWN0aW9uU3RhdHVzKCk7XG4gICAgICBcbiAgICAgIGlmIChzdGF0dXMubW9kZSA9PT0gJ1JFQUxfREFUQUJBU0UnKSB7XG4gICAgICAgIHRoaXMudXNlUmVhbERhdGFiYXNlID0gdHJ1ZTtcbiAgICAgICAgY29uc29sZS5sb2coJ+KchSBUZXN0ZXMgdXNhbmRvIGJhbmNvIFJFQUwgZGUgcHJvZHXDp8OjbyAoc29tZW50ZSBsZWl0dXJhKScpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy51c2VSZWFsRGF0YWJhc2UgPSBmYWxzZTtcbiAgICAgICAgY29uc29sZS5sb2coJ+KaoO+4jyAgVGVzdGVzIHVzYW5kbyBNT0NLX0RBVEEgKGJhbmNvIG7Do28gZGlzcG9uw612ZWwpJyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCfinYwgRXJybyBhbyBjb25lY3RhciBiYW5jbyBwYXJhIHRlc3RlcywgdXNhbmRvIE1PQ0tfREFUQTonLCBlcnJvcik7XG4gICAgICB0aGlzLnVzZVJlYWxEYXRhYmFzZSA9IGZhbHNlO1xuICAgICAgdGhpcy5pbml0aWFsaXplZCA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFZlcmlmaWNhIHNlIGVzdMOhIHVzYW5kbyBiYW5jbyByZWFsXG4gICAqL1xuICBzdGF0aWMgaXNVc2luZ1JlYWxEYXRhYmFzZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy51c2VSZWFsRGF0YWJhc2U7XG4gIH1cblxuICAvKipcbiAgICogRmVjaGEgY29uZXjDtWVzIGFww7NzIHRlc3Rlc1xuICAgKi9cbiAgc3RhdGljIGFzeW5jIGNsZWFudXAoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgaWYgKHRoaXMuaW5pdGlhbGl6ZWQpIHtcbiAgICAgIGF3YWl0IERhdGFiYXNlTWFuYWdlci5jbG9zZSgpO1xuICAgICAgdGhpcy5pbml0aWFsaXplZCA9IGZhbHNlO1xuICAgICAgdGhpcy51c2VSZWFsRGF0YWJhc2UgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRXhlY3V0YSBxdWVyeSBubyBiYW5jbyAob3UgbW9jaylcbiAgICovXG4gIHN0YXRpYyBhc3luYyBxdWVyeShzcWw6IHN0cmluZywgcGFyYW1zPzogYW55W10pOiBQcm9taXNlPGFueT4ge1xuICAgIGlmICghdGhpcy5pbml0aWFsaXplZCkge1xuICAgICAgYXdhaXQgdGhpcy5pbml0aWFsaXplKCk7XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcykge1xuICAgICAgcmV0dXJuIERhdGFiYXNlTWFuYWdlci5xdWVyeUVtcFdpdGhQYXJhbXMoc3FsLCBwYXJhbXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gRGF0YWJhc2VNYW5hZ2VyLnF1ZXJ5RW1wKHNxbCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFZlcmlmaWNhIHNlIGl0ZW0gZXhpc3RlIG5vIGJhbmNvXG4gICAqIMOadGlsIHBhcmEgc2V0dXAgZGUgdGVzdGVzXG4gICAqL1xuICBzdGF0aWMgYXN5bmMgaXRlbUV4aXN0cyhpdGVtQ29kaWdvOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgRGF0YWJhc2VNYW5hZ2VyLnF1ZXJ5RW1wV2l0aFBhcmFtcyhcbiAgICAgICAgYFNFTEVDVCBUT1AgMSBpdGVtLlwiaXQtY29kaWdvXCIgYXMgaXRlbUNvZGlnb1xuICAgICAgICAgRlJPTSBPUEVOUVVFUlkoUFJEX0VNUzJFTVAsIFxuICAgICAgICAgICAnU0VMRUNUIFwiaXQtY29kaWdvXCIgRlJPTSBwdWIuaXRlbSBXSEVSRSBcIml0LWNvZGlnb1wiID0gJycke2l0ZW1Db2RpZ299JycnXG4gICAgICAgICApIGFzIGl0ZW1gLFxuICAgICAgICBbXVxuICAgICAgKTtcbiAgICAgIFxuICAgICAgcmV0dXJuIHJlc3VsdCAmJiByZXN1bHQubGVuZ3RoID4gMDtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBCdXNjYSB1bSBpdGVtIHJlYWwgZG8gYmFuY28gcGFyYSB1c2FyIG5vcyB0ZXN0ZXNcbiAgICogU2UgbsOjbyBhY2hhciwgcmV0b3JuYSB1bSBjw7NkaWdvIG1vY2tcbiAgICovXG4gIHN0YXRpYyBhc3luYyBnZXRUZXN0SXRlbUNvZGUoKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICBpZiAoIXRoaXMudXNlUmVhbERhdGFiYXNlKSB7XG4gICAgICByZXR1cm4gJzc1MzAxMTAnOyAvLyBNb2NrIGNvbmhlY2lkb1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBEYXRhYmFzZU1hbmFnZXIucXVlcnlFbXBXaXRoUGFyYW1zKFxuICAgICAgICBgU0VMRUNUIFRPUCAxIGl0ZW0uXCJpdC1jb2RpZ29cIiBhcyBpdGVtQ29kaWdvXG4gICAgICAgICBGUk9NIE9QRU5RVUVSWShQUkRfRU1TMkVNUCwgXG4gICAgICAgICAgICdTRUxFQ1QgXCJpdC1jb2RpZ29cIiBGUk9NIHB1Yi5pdGVtIExJTUlUIDEnXG4gICAgICAgICApIGFzIGl0ZW1gLFxuICAgICAgICBbXVxuICAgICAgKTtcblxuICAgICAgaWYgKHJlc3VsdCAmJiByZXN1bHQubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0WzBdLml0ZW1Db2RpZ287XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm8gYW8gYnVzY2FyIGl0ZW0gZGUgdGVzdGU6JywgZXJyb3IpO1xuICAgIH1cblxuICAgIHJldHVybiAnNzUzMDExMCc7IC8vIEZhbGxiYWNrXG4gIH1cblxuICAvKipcbiAgICogUmV0b3JuYSBjw7NkaWdvcyBkZSB0ZXN0ZSBjb25oZWNpZG9zXG4gICAqIFBhcmEgZGlmZXJlbnRlcyBjZW7DoXJpb3NcbiAgICovXG4gIHN0YXRpYyBnZXRLbm93blRlc3RDb2RlcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLy8gSXRlbSBxdWUgREVWRSBleGlzdGlyIGVtIHByb2R1w6fDo29cbiAgICAgIHZhbGlkSXRlbTogJzc1MzAxMTAnLFxuICAgICAgXG4gICAgICAvLyBJdGVtIHF1ZSBOw4NPIGV4aXN0ZVxuICAgICAgaW52YWxpZEl0ZW06ICdJTlZBTElEOTk5JyxcbiAgICAgIFxuICAgICAgLy8gSXRlbSBwYXJhIHRlc3RlIGRlIGNhcmFjdGVyZXMgZXNwZWNpYWlzXG4gICAgICBzcGVjaWFsQ2hhcnM6ICdBQkMtMTIzJyxcbiAgICAgIFxuICAgICAgLy8gSXRlbSBkZSAxIGNhcmFjdGVyZVxuICAgICAgc2luZ2xlQ2hhcjogJ0EnLFxuICAgICAgXG4gICAgICAvLyBJdGVtIGRlIDE2IGNhcmFjdGVyZXMgKG3DoXhpbW8pXG4gICAgICBtYXhMZW5ndGg6ICcxMjM0NTY3ODkwMTIzNDU2JyxcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEFndWFyZGEgbyBiYW5jbyBlc3RhciBwcm9udG9cbiAgICogw5p0aWwgcGFyYSBiZWZvcmVBbGwgZW0gdGVzdGVzXG4gICAqL1xuICBzdGF0aWMgYXN5bmMgd2FpdFVudGlsUmVhZHkobWF4V2FpdE1zID0gNTAwMCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIGNvbnN0IHN0YXJ0VGltZSA9IERhdGUubm93KCk7XG5cbiAgICB3aGlsZSAoRGF0ZS5ub3coKSAtIHN0YXJ0VGltZSA8IG1heFdhaXRNcykge1xuICAgICAgaWYgKERhdGFiYXNlTWFuYWdlci5pc1JlYWR5KCkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgMTAwKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlc2V0YSBlc3RhZG8gZG8gRGF0YWJhc2VNYW5hZ2VyIChwYXJhIHRlc3RlcyBpc29sYWRvcylcbiAgICovXG4gIHN0YXRpYyBhc3luYyByZXNldCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBhd2FpdCB0aGlzLmNsZWFudXAoKTtcbiAgICB0aGlzLmluaXRpYWxpemVkID0gZmFsc2U7XG4gICAgdGhpcy51c2VSZWFsRGF0YWJhc2UgPSBmYWxzZTtcbiAgfVxufVxuXG4vKipcbiAqIEhlbHBlciBwYXJhIGNyaWFyIGNvbmV4w6NvIGRlIHRlc3RlXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzZXR1cFRlc3REYXRhYmFzZSgpIHtcbiAgYXdhaXQgRGF0YWJhc2VUZXN0SGVscGVyLmluaXRpYWxpemUoKTtcbiAgcmV0dXJuIERhdGFiYXNlVGVzdEhlbHBlci5pc1VzaW5nUmVhbERhdGFiYXNlKCk7XG59XG5cbi8qKlxuICogSGVscGVyIHBhcmEgY2xlYW51cCBkZSB0ZXN0ZVxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdGVhcmRvd25UZXN0RGF0YWJhc2UoKSB7XG4gIGF3YWl0IERhdGFiYXNlVGVzdEhlbHBlci5jbGVhbnVwKCk7XG59XG5cbi8qKlxuICogRGVjb3JhdG9yIHBhcmEgcHVsYXIgdGVzdGUgc2UgYmFuY28gbsOjbyBlc3RpdmVyIGRpc3BvbsOtdmVsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXF1aXJlc1JlYWxEYXRhYmFzZSgpIHtcbiAgcmV0dXJuICh0YXJnZXQ6IGFueSwgcHJvcGVydHlLZXk6IHN0cmluZywgZGVzY3JpcHRvcjogUHJvcGVydHlEZXNjcmlwdG9yKSA9PiB7XG4gICAgY29uc3Qgb3JpZ2luYWxNZXRob2QgPSBkZXNjcmlwdG9yLnZhbHVlO1xuXG4gICAgZGVzY3JpcHRvci52YWx1ZSA9IGFzeW5jIGZ1bmN0aW9uICguLi5hcmdzOiBhbnlbXSkge1xuICAgICAgaWYgKCFEYXRhYmFzZVRlc3RIZWxwZXIuaXNVc2luZ1JlYWxEYXRhYmFzZSgpKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGDij63vuI8gIFB1bGFuZG8gdGVzdGUgXCIke3Byb3BlcnR5S2V5fVwiIC0gcmVxdWVyIGJhbmNvIHJlYWxgKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gb3JpZ2luYWxNZXRob2QuYXBwbHkodGhpcywgYXJncyk7XG4gICAgfTtcblxuICAgIHJldHVybiBkZXNjcmlwdG9yO1xuICB9O1xufSJdLCJ2ZXJzaW9uIjozfQ==