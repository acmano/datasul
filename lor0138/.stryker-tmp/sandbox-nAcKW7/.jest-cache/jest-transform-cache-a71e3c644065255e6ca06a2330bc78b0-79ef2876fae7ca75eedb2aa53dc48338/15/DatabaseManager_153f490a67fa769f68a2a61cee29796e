8024cf5035184c8d35e1a462bfd69484
"use strict";
// @ts-nocheck
// src/infrastructure/database/DatabaseManager.ts
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatabaseManager = void 0;
const SqlServerConnection_1 = require("./connections/SqlServerConnection");
const OdbcConnection_1 = require("./connections/OdbcConnection");
const MockConnection_1 = require("./connections/MockConnection");
const sqlServerConfig_1 = require("./config/sqlServerConfig");
const odbcConfig_1 = require("./config/odbcConfig");
// ‚úÖ NOVO: Import do helper de m√©tricas
const databaseMetrics_1 = require("@infrastructure/metrics/helpers/databaseMetrics");
class DatabaseManager {
    // Construtor privado para padr√£o Singleton
    constructor() { }
    /**
     * ‚úÖ NOVO: Retorna inst√¢ncia singleton
     * Usado pelo health check no app.ts
     */
    static getInstance() {
        if (!this.instance) {
            this.instance = new DatabaseManager();
        }
        return this.instance;
    }
    /**
     * ‚úÖ NOVO: Retorna a conex√£o prim√°ria (EMP)
     * Usado pelo health check no app.ts
     */
    static getConnection() {
        if (this.useMockData) {
            return this.getMockConnection();
        }
        if (!this.connectionEmp) {
            throw new Error('Conex√£o EMP n√£o inicializada');
        }
        return this.connectionEmp;
    }
    static async initialize() {
        if (this.initializationPromise) {
            return this.initializationPromise;
        }
        if (this.isInitialized) {
            return Promise.resolve();
        }
        this.initializationPromise = this.doInitialize();
        try {
            await this.initializationPromise;
        }
        finally {
            this.initializationPromise = null;
        }
    }
    static async doInitialize() {
        console.log('Inicializando conexoes Datasul...');
        this.connectionType = process.env.DB_CONNECTION_TYPE || 'odbc';
        console.log(`Modo: ${this.connectionType.toUpperCase()}`);
        try {
            if (this.connectionType === 'odbc') {
                await this.initializeOdbc();
            }
            else {
                await this.initializeSqlServer();
            }
            this.useMockData = false;
            this.isInitialized = true;
            // ‚úÖ NOVO: Registrar m√©tricas de conex√£o bem-sucedida
            databaseMetrics_1.DatabaseMetricsHelper.setActiveConnections('EMP', 1);
            databaseMetrics_1.DatabaseMetricsHelper.setActiveConnections('MULT', 1);
            console.log('‚úÖ CONECTADO AO DATASUL');
        }
        catch (error) {
            this.connectionError = error.message;
            this.useMockData = true;
            this.isInitialized = true;
            // ‚úÖ NOVO: Registrar erro de conex√£o nas m√©tricas
            databaseMetrics_1.DatabaseMetricsHelper.recordConnectionError('EMP', error);
            databaseMetrics_1.DatabaseMetricsHelper.recordConnectionError('MULT', error);
            console.warn('‚ö†Ô∏è USANDO DADOS MOCK');
            console.error('Erro conex√£o:', this.connectionError);
        }
    }
    static async initializeSqlServer() {
        const configEmp = (0, sqlServerConfig_1.getSqlServerConfigEmp)();
        const configMult = (0, sqlServerConfig_1.getSqlServerConfigMult)();
        this.connectionEmp = new SqlServerConnection_1.SqlServerConnection(configEmp, 'EMP');
        this.connectionMult = new SqlServerConnection_1.SqlServerConnection(configMult, 'MULT');
        await Promise.all([
            this.connectionEmp.connect(),
            this.connectionMult.connect(),
        ]);
        console.log('‚úÖ SQL Server conectado');
    }
    static async initializeOdbc() {
        const connStringEmp = (0, odbcConfig_1.getOdbcConnectionString)('EMP');
        const connStringMult = (0, odbcConfig_1.getOdbcConnectionString)('MULT');
        this.connectionEmp = new OdbcConnection_1.OdbcConnection(connStringEmp, 'EMP');
        this.connectionMult = new OdbcConnection_1.OdbcConnection(connStringMult, 'MULT');
        await Promise.all([
            this.connectionEmp.connect(),
            this.connectionMult.connect(),
        ]);
        console.log('‚úÖ ODBC conectado');
    }
    /**
     * Query simples EMP (DEPRECATED - Use queryEmpWithParams quando poss√≠vel)
     * ‚úÖ COM M√âTRICAS
     */
    static async queryEmp(sql) {
        if (this.useMockData) {
            return this.getMockConnection().query(sql);
        }
        if (!this.connectionEmp) {
            throw new Error('Conex√£o EMP n√£o inicializada');
        }
        // ‚úÖ NOVO: Instrumentar com m√©tricas
        return databaseMetrics_1.DatabaseMetricsHelper.instrumentQuery('EMP', sql, () => this.connectionEmp.query(sql));
    }
    /**
     * Query simples MULT (DEPRECATED - Use queryMultWithParams quando poss√≠vel)
     * ‚úÖ COM M√âTRICAS
     */
    static async queryMult(sql) {
        if (this.useMockData) {
            return this.getMockConnection().query(sql);
        }
        if (!this.connectionMult) {
            throw new Error('Conex√£o MULT n√£o inicializada');
        }
        // ‚úÖ NOVO: Instrumentar com m√©tricas
        return databaseMetrics_1.DatabaseMetricsHelper.instrumentQuery('MULT', sql, () => this.connectionMult.query(sql));
    }
    /**
     * Query parametrizada EMP (‚úÖ PROTEGIDO contra SQL Injection)
     * ‚úÖ COM M√âTRICAS
     */
    static async queryEmpWithParams(sql, params) {
        if (this.useMockData) {
            return this.getMockConnection().queryWithParams(sql, params);
        }
        if (!this.connectionEmp) {
            throw new Error('Conex√£o EMP n√£o inicializada');
        }
        // ‚úÖ NOVO: Instrumentar com m√©tricas
        return databaseMetrics_1.DatabaseMetricsHelper.instrumentQuery('EMP', sql, () => this.connectionEmp.queryWithParams(sql, params));
    }
    /**
     * Query parametrizada MULT (‚úÖ PROTEGIDO contra SQL Injection)
     * ‚úÖ COM M√âTRICAS
     */
    static async queryMultWithParams(sql, params) {
        if (this.useMockData) {
            return this.getMockConnection().queryWithParams(sql, params);
        }
        if (!this.connectionMult) {
            throw new Error('Conex√£o MULT n√£o inicializada');
        }
        // ‚úÖ NOVO: Instrumentar com m√©tricas
        return databaseMetrics_1.DatabaseMetricsHelper.instrumentQuery('MULT', sql, () => this.connectionMult.queryWithParams(sql, params));
    }
    static getMockConnection() {
        return new MockConnection_1.MockConnection();
    }
    static getConnectionStatus() {
        return {
            type: this.connectionType,
            mode: this.useMockData ? 'MOCK_DATA' : 'REAL_DATABASE',
            error: this.connectionError || undefined,
        };
    }
    static isReady() {
        return this.isInitialized;
    }
    static async close() {
        const promises = [];
        if (this.connectionEmp) {
            promises.push(this.connectionEmp.close());
        }
        if (this.connectionMult) {
            promises.push(this.connectionMult.close());
        }
        await Promise.all(promises);
        // ‚úÖ NOVO: Atualizar m√©tricas de conex√£o
        databaseMetrics_1.DatabaseMetricsHelper.setActiveConnections('EMP', 0);
        databaseMetrics_1.DatabaseMetricsHelper.setActiveConnections('MULT', 0);
        this.connectionEmp = null;
        this.connectionMult = null;
        this.isInitialized = false;
        console.log('üîå Conex√µes fechadas');
    }
    // M√©todos legados para compatibilidade
    static getConnectionEmp() {
        if (!this.connectionEmp) {
            throw new Error('Conex√£o EMP n√£o inicializada');
        }
        return this.connectionEmp;
    }
    static getConnectionMult() {
        if (!this.connectionMult) {
            throw new Error('Conex√£o MULT n√£o inicializada');
        }
        return this.connectionMult;
    }
}
exports.DatabaseManager = DatabaseManager;
DatabaseManager.instance = null;
DatabaseManager.connectionEmp = null;
DatabaseManager.connectionMult = null;
DatabaseManager.connectionType = 'odbc';
DatabaseManager.useMockData = false;
DatabaseManager.connectionError = null;
DatabaseManager.isInitialized = false;
DatabaseManager.initializationPromise = null;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,