{"file":"/home/mano/projetos/datasul/lor0138/.stryker-tmp/sandbox-nAcKW7/src/api/lor0138/item/dadosCadastrais/informacoesGerais/repository/informacoesGerais.repository.ts","mappings":";AAAA,cAAc;AACd,oGAAoG;;;AAEpG,8EAA2E;AAE3E,6EAA0E;AAE1E;;GAEG;AACH,MAAa,+BAA+B;IAE1C;;OAEG;IACH,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,UAAkB;QAC3C,IAAI,CAAC;YACH,MAAM,KAAK,GAAG;;;;;;;;;;;;;;;;;;;;OAoBb,CAAC;YAEF,MAAM,MAAM,GAAqB;gBAC/B,EAAE,IAAI,EAAE,iBAAiB,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,UAAU,EAAE;aAChE,CAAC;YAEF,4CAA4C;YAC5C,MAAM,MAAM,GAAG,MAAM,qCAAiB,CAAC,aAAa,CAClD,KAAK,EACL,MAAM,EACN,KAAK,IAAI,EAAE,CAAC,iCAAe,CAAC,kBAAkB,CAAC,KAAK,EAAE,MAAM,CAAC,CAC9D,CAAC;YAEF,OAAO,MAAM,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;QAExD,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,6BAA6B,EAAE,KAAK,CAAC,CAAC;YACpD,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,KAAK,CAAC,uBAAuB,CAAC,UAAkB;QACrD,IAAI,CAAC;YACH,MAAM,KAAK,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;OA2Bb,CAAC;YAEF,MAAM,MAAM,GAAqB;gBAC/B,EAAE,IAAI,EAAE,iBAAiB,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,UAAU,EAAE;aAChE,CAAC;YAEF,4CAA4C;YAC5C,MAAM,MAAM,GAAG,MAAM,qCAAiB,CAAC,wBAAwB,CAC7D,KAAK,EACL,MAAM,EACN,KAAK,IAAI,EAAE,CAAC,iCAAe,CAAC,kBAAkB,CAAC,KAAK,EAAE,MAAM,CAAC,CAC9D,CAAC;YAEF,OAAO,MAAM,IAAI,EAAE,CAAC;QAEtB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,kCAAkC,EAAE,KAAK,CAAC,CAAC;YACzD,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,KAAK,CAAC,eAAe,CAAC,UAAkB;QAC7C,MAAM,qCAAiB,CAAC,kBAAkB,CAAC;YACzC,QAAQ;YACR,mBAAmB;SACpB,CAAC,CAAC;QACH,OAAO,CAAC,GAAG,CAAC,6BAA6B,EAAE,UAAU,CAAC,CAAC;IACzD,CAAC;CACF;AA/GD,0EA+GC","names":[],"sources":["/home/mano/projetos/datasul/lor0138/.stryker-tmp/sandbox-nAcKW7/src/api/lor0138/item/dadosCadastrais/informacoesGerais/repository/informacoesGerais.repository.ts"],"sourcesContent":["// @ts-nocheck\n// src/api/lor0138/item/dadosCadastrais/informacoesGerais/repository/informacoesGerais.repository.ts\r\n\r\nimport { DatabaseManager } from '@infrastructure/database/DatabaseManager';\r\nimport { QueryParameter } from '@infrastructure/database/types';\r\nimport { QueryCacheService } from '@shared/utils/cache/QueryCacheService';\r\n\r\n/**\r\n * Repository para consultas de Informações Gerais do Item\r\n */\r\nexport class ItemInformacoesGeraisRepository {\r\n  \r\n  /**\r\n   * Busca dados mestres do item (COM CACHE - TTL: 10 minutos)\r\n   */\r\n  static async getItemMaster(itemCodigo: string): Promise<any | null> {\r\n    try {\r\n      const query = `\r\n        DECLARE @itemCodigo varchar(16) = @paramItemCodigo;\r\n        DECLARE @sql nvarchar(max);\r\n        \r\n        SET @sql = N'\r\n          SELECT \r\n            item.\"it-codigo\" as itemCodigo,\r\n            item.\"desc-item\" as itemDescricao,\r\n            item.\"un\" as itemUnidade\r\n          FROM OPENQUERY(PRD_EMS2EMP, ''\r\n            SELECT \r\n              item.\"it-codigo\",\r\n              item.\"desc-item\", \r\n              item.\"un\"\r\n            FROM pub.item\r\n            WHERE item.\"it-codigo\" = ''''' + @itemCodigo + '''''\r\n          '') as item\r\n        ';\r\n        \r\n        EXEC sp_executesql @sql;\r\n      `;\r\n\r\n      const params: QueryParameter[] = [\r\n        { name: 'paramItemCodigo', type: 'varchar', value: itemCodigo }\r\n      ];\r\n\r\n      // ✅ Query com cache L1/L2 (TTL: 10 minutos)\r\n      const result = await QueryCacheService.withItemCache(\r\n        query,\r\n        params,\r\n        async () => DatabaseManager.queryEmpWithParams(query, params)\r\n      );\r\n      \r\n      return result && result.length > 0 ? result[0] : null;\r\n      \r\n    } catch (error) {\r\n      console.error('Erro ao buscar item master:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Busca estabelecimentos do item (COM CACHE - TTL: 15 minutos)\r\n   */\r\n  static async getItemEstabelecimentos(itemCodigo: string): Promise<any[]> {\r\n    try {\r\n      const query = `\r\n        DECLARE @itemCodigo varchar(16) = @paramItemCodigo;\r\n        DECLARE @sql nvarchar(max);\r\n        \r\n        SET @sql = N'\r\n          SELECT \r\n            itemEstab.\"it-codigo\" as itemCodigo,\r\n            itemEstab.\"cod-estabel\" as estabCodigo,\r\n            estab.\"nome\" as estabNome,\r\n            itemEstab.\"cod-obsoleto\" as codObsoleto\r\n          FROM OPENQUERY(PRD_EMS2EMP, ''\r\n            SELECT \r\n              \"item-uni-estab\".\"it-codigo\",\r\n              \"item-uni-estab\".\"cod-estabel\",\r\n              \"item-uni-estab\".\"cod-obsoleto\"\r\n            FROM pub.\"item-uni-estab\"\r\n            WHERE \"item-uni-estab\".\"it-codigo\" = ''''' + @itemCodigo + '''''\r\n          '') as itemEstab\r\n          LEFT JOIN OPENQUERY(PRD_EMS2MULT, ''\r\n            SELECT \r\n              estabelec.\"ep-codigo\" as cod_estabel,\r\n              estabelec.\"nome\"\r\n            FROM pub.estabelec\r\n          '') as estab ON itemEstab.\"cod-estabel\" = estab.cod_estabel\r\n        ';\r\n        \r\n        EXEC sp_executesql @sql;\r\n      `;\r\n\r\n      const params: QueryParameter[] = [\r\n        { name: 'paramItemCodigo', type: 'varchar', value: itemCodigo }\r\n      ];\r\n\r\n      // ✅ Query com cache L1/L2 (TTL: 15 minutos)\r\n      const result = await QueryCacheService.withEstabelecimentoCache(\r\n        query,\r\n        params,\r\n        async () => DatabaseManager.queryEmpWithParams(query, params)\r\n      );\r\n      \r\n      return result || [];\r\n      \r\n    } catch (error) {\r\n      console.error('Erro ao buscar estabelecimentos:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Invalida cache do item (chamar após UPDATE/DELETE)\r\n   */\r\n  static async invalidateCache(itemCodigo: string): Promise<void> {\r\n    await QueryCacheService.invalidateMultiple([\r\n      'item:*',\r\n      'estabelecimento:*'\r\n    ]);\r\n    console.log('Cache invalidado para item:', itemCodigo);\r\n  }\r\n}"],"version":3}