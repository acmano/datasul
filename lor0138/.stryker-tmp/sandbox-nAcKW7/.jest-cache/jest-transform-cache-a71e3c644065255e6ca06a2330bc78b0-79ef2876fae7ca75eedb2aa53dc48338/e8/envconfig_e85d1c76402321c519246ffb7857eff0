ef11dc827f194ed2491d6f4da8425756
"use strict";
// @ts-nocheck
// src/config/env.config.ts
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.serverConfig = exports.envConfig = exports.config = void 0;
exports.parseTimeout = parseTimeout;
const dotenv_1 = __importDefault(require("dotenv"));
const app_config_1 = require("./app.config");
dotenv_1.default.config();
/**
 * Parse de string de timeout para milissegundos
 * Aceita formatos: "30s", "5000ms", "5m", "5000"
 *
 * IMPORTANTE: Esta função é usada em TODO o projeto.
 * Garante que timeouts sempre sejam números válidos em ms.
 *
 * Formatos suportados:
 * - "30000" → 30000ms (número puro)
 * - "30s" → 30000ms (segundos)
 * - "30000ms" → 30000ms (milissegundos)
 * - "5m" → 300000ms (minutos)
 */
function parseTimeout(value, defaultValue) {
    if (!value)
        return defaultValue;
    // Se for número puro, retorna direto
    if (/^\d+$/.test(value)) {
        return parseInt(value, 10);
    }
    // ✅ IMPORTANTE: Verificar 'ms' ANTES de 's'
    // (porque 'ms' também termina com 's')
    if (value.endsWith('ms')) {
        return parseInt(value.slice(0, -2), 10);
    }
    // Se terminar com 's', converte segundos para ms
    if (value.endsWith('s')) {
        return parseInt(value.slice(0, -1), 10) * 1000;
    }
    // Se terminar com 'm', converte minutos para ms
    if (value.endsWith('m')) {
        return parseInt(value.slice(0, -1), 10) * 60000;
    }
    return defaultValue;
}
// ============================================
// CONFIGURAÇÃO CENTRALIZADA
// ============================================
exports.config = {
    // ==================== SERVIDOR ====================
    server: {
        port: parseInt(process.env.PORT || '3000', 10),
        nodeEnv: (process.env.NODE_ENV || 'development'),
        apiPrefix: process.env.API_PREFIX || '/api',
    },
    // ==================== BANCO DE DADOS ====================
    database: {
        // Tipo de conexão
        type: (process.env.DB_CONNECTION_TYPE || 'sqlserver'),
        useMockData: process.env.USE_MOCK_DATA === 'true',
        // SQL Server (usado pelo DatabaseManager)
        sqlServer: {
            server: process.env.DB_SERVER || app_config_1.appConfig.host,
            port: parseInt(process.env.DB_PORT || '1433', 10),
            user: process.env.DB_USER || '',
            password: process.env.DB_PASSWORD || '',
            // ✅ CORRETO: Usa DB_DATABASE_* (não DB_NAME_*)
            databaseEmp: process.env.DB_DATABASE_EMP || '',
            databaseMult: process.env.DB_DATABASE_MULT || '',
            // ✅ CORRETO: Usa parseTimeout para TODOS os timeouts
            connectionTimeout: parseTimeout(process.env.DB_CONNECTION_TIMEOUT, 15000),
            requestTimeout: parseTimeout(process.env.DB_REQUEST_TIMEOUT, 30000),
            encrypt: process.env.DB_ENCRYPT === 'true',
            trustServerCertificate: process.env.DB_TRUST_SERVER_CERTIFICATE === 'true',
        },
        // ODBC
        odbc: {
            dsnEmp: process.env.ODBC_DSN_EMP || '',
            dsnMult: process.env.ODBC_DSN_MULT || '',
            connectionTimeout: parseTimeout(process.env.ODBC_CONNECTION_TIMEOUT, 15000),
        },
        // Retry
        retry: {
            maxAttempts: parseInt(process.env.DB_RETRY_MAX_ATTEMPTS || '3', 10),
            initialDelay: parseTimeout(process.env.DB_RETRY_INITIAL_DELAY, 1000),
            maxDelay: parseTimeout(process.env.DB_RETRY_MAX_DELAY, 10000),
            backoffFactor: parseFloat(process.env.DB_RETRY_BACKOFF_FACTOR || '2'),
        },
    },
    // ==================== CORS ====================
    cors: {
        allowedOrigins: process.env.CORS_ALLOWED_ORIGINS
            ? process.env.CORS_ALLOWED_ORIGINS.split(',')
            : [app_config_1.appConfig.baseUrl],
    },
    // ==================== TIMEOUTS HTTP ====================
    timeout: {
        request: parseTimeout(process.env.HTTP_REQUEST_TIMEOUT, 30000),
        heavyOperation: parseTimeout(process.env.HTTP_HEAVY_TIMEOUT, 60000),
        healthCheck: parseTimeout(process.env.HTTP_HEALTH_TIMEOUT, 5000),
    },
    // ==================== CACHE (Redis) ====================
    cache: {
        enabled: process.env.CACHE_ENABLED === 'true',
        strategy: (process.env.CACHE_STRATEGY || 'memory'),
        redis: {
            url: process.env.CACHE_REDIS_URL || 'redis://lor0138.lorenzetti.ibe:6379',
        },
        defaultTTL: parseTimeout(process.env.CACHE_DEFAULT_TTL, 300000), // 5min padrão
    },
};
// ============================================
// EXPORTS COMPATÍVEIS (não quebra código existente)
// ============================================
/**
 * @deprecated Use 'config' ao invés de 'envConfig'
 */
exports.envConfig = exports.config;
/**
 * @deprecated Use 'config.server' diretamente
 */
exports.serverConfig = {
    port: exports.config.server.port,
    nodeEnv: exports.config.server.nodeEnv,
    apiPrefix: exports.config.server.apiPrefix,
    corsOrigin: exports.config.cors.allowedOrigins[0] || '*',
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,