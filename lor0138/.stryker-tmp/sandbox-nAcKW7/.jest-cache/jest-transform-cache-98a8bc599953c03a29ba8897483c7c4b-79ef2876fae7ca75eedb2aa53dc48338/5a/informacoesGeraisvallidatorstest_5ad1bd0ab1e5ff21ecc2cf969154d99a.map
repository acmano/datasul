{"file":"/home/mano/projetos/datasul/lor0138/tests/unit/validators/informacoesGerais.vallidators.test.ts","mappings":"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","names":[],"sources":["/home/mano/projetos/datasul/lor0138/tests/unit/validators/informacoesGerais.vallidators.test.ts"],"sourcesContent":["// tests/unit/validators/informacoesGerais.validators.test.ts\n\nimport { validateItemInformacoesGeraisRequest } from '@api/lor0138/item/dadosCadastrais/informacoesGerais/validators/informacoesGerais.validators';\nimport { testItemCodigos, expectedErrors } from '../../factories/item.factory';\n\ndescribe('Validators - InformacoesGerais', () => {\n  \n  describe('validateItemInformacoesGeraisRequest', () => {\n    \n    // ========================================\n    // CASOS DE SUCESSO ✅\n    // ========================================\n    describe('Casos Válidos', () => {\n      \n      test('deve validar código numérico simples', () => {\n        const result = validateItemInformacoesGeraisRequest({ itemCodigo: '7530110' });\n        \n        expect(result.valid).toBe(true);\n        expect(result.data).toEqual({ itemCodigo: '7530110' });\n        expect(result.error).toBeUndefined();\n      });\n\n      test('deve validar código alfanumérico', () => {\n        const result = validateItemInformacoesGeraisRequest({ itemCodigo: 'ABC123' });\n        \n        expect(result.valid).toBe(true);\n        expect(result.data?.itemCodigo).toBe('ABC123');\n      });\n\n      test('deve validar código com 16 caracteres (máximo)', () => {\n        const codigo = '1234567890123456'; // 16 caracteres\n        const result = validateItemInformacoesGeraisRequest({ itemCodigo: codigo });\n        \n        expect(result.valid).toBe(true);\n        expect(result.data?.itemCodigo).toBe(codigo);\n      });\n\n      test('deve validar código com 1 caractere (mínimo)', () => {\n        const result = validateItemInformacoesGeraisRequest({ itemCodigo: 'A' });\n        \n        expect(result.valid).toBe(true);\n        expect(result.data?.itemCodigo).toBe('A');\n      });\n\n      test.each(testItemCodigos.valid)(\n        'deve validar código válido: %s',\n        (codigo) => {\n          const result = validateItemInformacoesGeraisRequest({ itemCodigo: codigo });\n          expect(result.valid).toBe(true);\n        }\n      );\n    });\n\n    // ========================================\n    // SANITIZAÇÃO 🧹\n    // ========================================\n    describe('Sanitização de Entrada', () => {\n      \n      test('deve remover espaços em branco nas extremidades', () => {\n        const result = validateItemInformacoesGeraisRequest({ itemCodigo: '  7530110  ' });\n        \n        expect(result.valid).toBe(true);\n        expect(result.data?.itemCodigo).toBe('7530110');\n      });\n\n      test('deve remover caracteres de controle', () => {\n        const result = validateItemInformacoesGeraisRequest({ \n          itemCodigo: '7530110\\x00\\x1F' \n        });\n        \n        expect(result.valid).toBe(true);\n        expect(result.data?.itemCodigo).toBe('7530110');\n      });\n\n      test('deve remover tentativas de path traversal', () => {\n        const result = validateItemInformacoesGeraisRequest({ \n          itemCodigo: '..ABC123..' \n        });\n        \n        expect(result.valid).toBe(true);\n        expect(result.data?.itemCodigo).toBe('ABC123');\n      });\n\n      test.each(testItemCodigos.sanitized)(\n        'deve sanitizar corretamente: $input → $expected',\n        ({ input, expected }) => {\n          const result = validateItemInformacoesGeraisRequest({ itemCodigo: input });\n          expect(result.data?.itemCodigo).toBe(expected);\n        }\n      );\n    });\n\n    // ========================================\n    // VALIDAÇÃO DE ERROS ❌\n    // ========================================\n    describe('Casos Inválidos', () => {\n      \n      test('deve rejeitar itemCodigo ausente', () => {\n        const result = validateItemInformacoesGeraisRequest({});\n        \n        expect(result.valid).toBe(false);\n        expect(result.error).toBe(expectedErrors.validationError);\n      });\n\n      test('deve rejeitar itemCodigo vazio', () => {\n        const result = validateItemInformacoesGeraisRequest({ itemCodigo: '' });\n        \n        expect(result.valid).toBe(false);\n        expect(result.error).toContain('obrigatório');\n      });\n\n      test('deve rejeitar string com apenas espaços', () => {\n        const result = validateItemInformacoesGeraisRequest({ itemCodigo: '   ' });\n        \n        expect(result.valid).toBe(false);\n        expect(result.error).toContain('inválido');\n      });\n\n      test('deve rejeitar código com mais de 16 caracteres', () => {\n        const codigo = '12345678901234567'; // 17 caracteres\n        const result = validateItemInformacoesGeraisRequest({ itemCodigo: codigo });\n        \n        expect(result.valid).toBe(false);\n        expect(result.error).toBe(expectedErrors.maxLength);\n      });\n\n      test('deve rejeitar tipo não-string', () => {\n        const result = validateItemInformacoesGeraisRequest({ itemCodigo: 123 as any });\n        \n        expect(result.valid).toBe(false);\n        expect(result.error).toContain('string');\n      });\n    });\n\n    // ========================================\n    // SEGURANÇA 🛡️ - SQL INJECTION\n    // ========================================\n    describe('Proteção contra SQL Injection', () => {\n      \n      test('deve bloquear SELECT (dentro do limite de caracteres)', () => {\n        // Usa código curto que passa tamanho mas tem SQL keyword\n        const result = validateItemInformacoesGeraisRequest({ \n          itemCodigo: 'SELECTabc' \n        });\n        \n        expect(result.valid).toBe(false);\n        expect(result.error).toContain('padrões não permitidos');\n      });\n\n      test('deve bloquear INSERT', () => {\n        const result = validateItemInformacoesGeraisRequest({ \n          itemCodigo: 'INSERTx' \n        });\n        \n        expect(result.valid).toBe(false);\n        expect(result.error).toContain('padrões não permitidos');\n      });\n\n      test('deve bloquear DROP', () => {\n        const result = validateItemInformacoesGeraisRequest({ \n          itemCodigo: 'DROPtable' \n        });\n        \n        expect(result.valid).toBe(false);\n        expect(result.error).toContain('padrões não permitidos');\n      });\n\n      test('deve bloquear UNION', () => {\n        const result = validateItemInformacoesGeraisRequest({ \n          itemCodigo: 'UNIONselect' \n        });\n        \n        expect(result.valid).toBe(false);\n        expect(result.error).toContain('padrões não permitidos');\n      });\n\n      test('deve remover aspas simples e duplas', () => {\n        const result = validateItemInformacoesGeraisRequest({ \n          itemCodigo: \"item'test\" \n        });\n        \n        // Aspas são removidas na sanitização\n        expect(result.valid).toBe(true);\n        expect(result.data?.itemCodigo).toBe('itemtest');\n      });\n\n      test('deve remover ponto e vírgula', () => {\n        const result = validateItemInformacoesGeraisRequest({ \n          itemCodigo: 'item;test' \n        });\n        \n        // ; é removido na sanitização\n        expect(result.valid).toBe(true);\n        expect(result.data?.itemCodigo).toBe('itemtest');\n      });\n    });\n\n    // ========================================\n    // SEGURANÇA 🛡️ - COMMAND INJECTION\n    // ========================================\n    describe('Proteção contra Command Injection', () => {\n      \n      test('deve bloquear pipe (|)', () => {\n        const result = validateItemInformacoesGeraisRequest({ \n          itemCodigo: 'item|test' \n        });\n        \n        expect(result.valid).toBe(false);\n        expect(result.error).toContain('não permitidos');\n      });\n\n      test('deve bloquear && operator', () => {\n        const result = validateItemInformacoesGeraisRequest({ \n          itemCodigo: 'item&&test' \n        });\n        \n        expect(result.valid).toBe(false);\n        expect(result.error).toContain('não permitidos');\n      });\n\n      test('deve bloquear || operator', () => {\n        const result = validateItemInformacoesGeraisRequest({ \n          itemCodigo: 'item||test' \n        });\n        \n        expect(result.valid).toBe(false);\n        expect(result.error).toContain('não permitidos');\n      });\n\n      test('deve bloquear backticks', () => {\n        const result = validateItemInformacoesGeraisRequest({ \n          itemCodigo: 'item`test`' \n        });\n        \n        expect(result.valid).toBe(false);\n        expect(result.error).toContain('não permitidos');\n      });\n\n      test('deve bloquear $() substitution', () => {\n        const result = validateItemInformacoesGeraisRequest({ \n          itemCodigo: 'item$(test)' \n        });\n        \n        expect(result.valid).toBe(false);\n        expect(result.error).toContain('não permitidos');\n      });\n    });\n\n    // ========================================\n    // SEGURANÇA 🛡️ - XSS\n    // ========================================\n    describe('Proteção contra XSS', () => {\n      \n      test('deve remover tags HTML e validar resultado', () => {\n        const result = validateItemInformacoesGeraisRequest({ \n          itemCodigo: '<script>alert(1)</script>' \n        });\n        \n        // Tags são removidas, mas resultado pode ser inválido por outros motivos\n        // O validator remove <> mas \"scriptalert1script\" é válido\n        expect(result.valid).toBe(true);\n        expect(result.data?.itemCodigo).toBe('scriptalert1script');\n      });\n\n      test('deve remover tags com atributos e validar', () => {\n        const result = validateItemInformacoesGeraisRequest({ \n          itemCodigo: '<img src=x>' \n        });\n        \n        // Remove tags, fica \"imgsrcx\" que é válido\n        expect(result.valid).toBe(true);\n        expect(result.data?.itemCodigo).toBe('imgsrcx');\n      });\n\n      test('deve bloquear script com caracteres especiais', () => {\n        const result = validateItemInformacoesGeraisRequest({ \n          itemCodigo: '<script>alert(\"xss\")</script>' \n        });\n        \n        // Aspas são removidas também, mas parênteses causam erro de formato\n        expect(result.valid).toBe(false);\n      });\n    });\n\n    // ========================================\n    // EDGE CASES 🔍\n    // ========================================\n    describe('Edge Cases', () => {\n      \n      test('deve aceitar apenas números', () => {\n        const result = validateItemInformacoesGeraisRequest({ itemCodigo: '123456' });\n        \n        expect(result.valid).toBe(true);\n        expect(result.data?.itemCodigo).toBe('123456');\n      });\n\n      test('deve aceitar apenas letras', () => {\n        const result = validateItemInformacoesGeraisRequest({ itemCodigo: 'ABCDEF' });\n        \n        expect(result.valid).toBe(true);\n        expect(result.data?.itemCodigo).toBe('ABCDEF');\n      });\n\n      test('deve aceitar mix maiúsculas e minúsculas', () => {\n        const result = validateItemInformacoesGeraisRequest({ itemCodigo: 'AbC123' });\n        \n        expect(result.valid).toBe(true);\n        expect(result.data?.itemCodigo).toBe('AbC123');\n      });\n\n      test('deve rejeitar caracteres especiais', () => {\n        const specialChars = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')'];\n        \n        specialChars.forEach(char => {\n          const result = validateItemInformacoesGeraisRequest({ \n            itemCodigo: `item${char}test` \n          });\n          \n          // Caracteres especiais causam erro\n          expect(result.valid).toBe(false);\n        });\n      });\n\n      test('deve sanitizar e validar corretamente códigos complexos', () => {\n        // Código com vários caracteres especiais que serão removidos\n        const result = validateItemInformacoesGeraisRequest({ \n          itemCodigo: '  ABC-123\"test;  ' \n        });\n        \n        // Remove espaços, -, \", ; → fica ABC123test\n        expect(result.valid).toBe(true);\n        expect(result.data?.itemCodigo).toBe('ABC123test');\n      });\n    });\n\n    // ========================================\n    // FLUXO COMPLETO DE VALIDAÇÃO\n    // ========================================\n    describe('Fluxo de Validação Completo', () => {\n      \n      test('deve seguir ordem: sanitização → tamanho → formato → SQL', () => {\n        // 1. Input com caracteres especiais\n        const input = '  ITEM-123  ';\n        const result = validateItemInformacoesGeraisRequest({ itemCodigo: input });\n        \n        // 2. Sanitiza (remove espaços e -)\n        // 3. Fica \"ITEM123\" (7 chars)\n        // 4. Passa no tamanho\n        // 5. Passa no formato alfanumérico\n        // 6. Não tem SQL keywords\n        expect(result.valid).toBe(true);\n        expect(result.data?.itemCodigo).toBe('ITEM123');\n      });\n\n      test('deve falhar no tamanho antes de checar SQL', () => {\n        // String longa com SQL keyword\n        const result = validateItemInformacoesGeraisRequest({ \n          itemCodigo: 'SELECT1234567890' // 16 chars, mas SELECT está lá\n        });\n        \n        // Passa no tamanho (16 chars), mas falha no SQL keyword\n        expect(result.valid).toBe(false);\n        expect(result.error).toContain('padrões não permitidos');\n      });\n\n      test('deve falhar no formato antes de checar SQL', () => {\n        // String curta com SQL e caracteres inválidos\n        const result = validateItemInformacoesGeraisRequest({ \n          itemCodigo: 'SELECT *' // Tem espaço\n        });\n        \n        // 1. Sanitiza (mantém espaço)\n        // 2. Passa no tamanho (8 chars)\n        // 3. FALHA no formato (regex não aceita espaço)\n        expect(result.valid).toBe(false);\n        expect(result.error).toContain('caracteres inválidos');\n      });\n    });\n\n  });\n});"],"version":3}