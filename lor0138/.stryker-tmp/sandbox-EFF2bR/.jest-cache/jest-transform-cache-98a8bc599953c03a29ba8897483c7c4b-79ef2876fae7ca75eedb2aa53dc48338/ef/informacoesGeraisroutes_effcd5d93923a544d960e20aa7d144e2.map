{"file":"/home/mano/projetos/datasul/lor0138/src/api/lor0138/item/dadosCadastrais/informacoesGerais/routes/informacoesGerais.routes.ts","mappings":";AAAA,4FAA4F;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAE5F,qCAAkE;AAClE,qFAA+E;AAC/E,2FAA6E;AAC7E,mEAA6D;AAE7D,MAAM,MAAM,GAAG,IAAA,gBAAM,GAAE,CAAC;AAExB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAgGG;AACH,MAAM,CAAC,GAAG,CAAC,cAAc,EACvB,0CAAkB,EAAG,6BAA6B;AAClD,wCAAa,EAAQ,8BAA8B;AACnD,wBAAS,EAAY,aAAa;AAClC,KAAK,EAAE,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;IAC1D,IAAI,CAAC;QACH,0CAA0C;QAC1C,MAAM,EAAE,2BAA2B,EAAE,GAAG,wDAAa,4CAA4C,GAAC,CAAC;QAEnG,mDAAmD;QACnD,MAAM,2BAA2B,CAAC,oBAAoB,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;IACzE,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,8BAA8B,EAAE,KAAK,CAAC,CAAC;QACrD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,OAAO,EAAE,KAAK;YACd,KAAK,EAAE,sCAAsC;SAC9C,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,kBAAe,MAAM,CAAC","names":[],"sources":["/home/mano/projetos/datasul/lor0138/src/api/lor0138/item/dadosCadastrais/informacoesGerais/routes/informacoesGerais.routes.ts"],"sourcesContent":["// src/api/lor0138/item/dadosCadastrais/informacoesGerais/routes/informacoesGerais.routes.ts\r\n\r\nimport { Router, Request, Response, NextFunction } from 'express';\r\nimport { optionalApiKeyAuth } from '@shared/middlewares/apiKeyAuth.middleware';\r\nimport { userRateLimit } from '@shared/middlewares/userRateLimit.middleware';\r\nimport { itemCache } from '@shared/middlewares/cachePresets';\r\n\r\nconst router = Router();\r\n\r\n/**\r\n * @openapi\r\n * /api/lor0138/item/dadosCadastrais/informacoesGerais/{itemCodigo}:\r\n *   get:\r\n *     summary: Obter informações gerais de um item\r\n *     description: |\r\n *       Retorna dados cadastrais completos de um item do Datasul, incluindo:\r\n *       - Dados gerais (código, descrição, pesos)\r\n *       - Unidades de medida com fatores de conversão\r\n *       - Estabelecimentos onde o item está cadastrado\r\n *       \r\n *       **Importante**: Os dados são consultados via Linked Server (OPENQUERY) \r\n *       do SQL Server para o Progress OpenEdge.\r\n *       \r\n *       **Rate Limit**: 10 requisições por minuto para o mesmo item\r\n *     tags:\r\n *       - Item - Informações Gerais\r\n *     parameters:\r\n *       - in: path\r\n *         name: itemCodigo\r\n *         required: true\r\n *         schema:\r\n *           type: string\r\n *           pattern: '^[A-Za-z0-9]+$'\r\n *           minLength: 1\r\n *           maxLength: 16\r\n *         description: Código do item (alfanumérico, máx 16 caracteres)\r\n *         example: '7530110'\r\n *     responses:\r\n *       200:\r\n *         description: Informações do item retornadas com sucesso\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               $ref: '#/components/schemas/InformacoesGerais'\r\n *             examples:\r\n *               sucesso:\r\n *                 summary: Item encontrado com múltiplos estabelecimentos\r\n *                 value:\r\n *                   dadosGerais:\r\n *                     codigo: '7530110'\r\n *                     descricao: 'VALVULA DE ESFERA 1/2\" BRONZE'\r\n *                     unidadeMedida: 'UN'\r\n *                     pesoLiquido: 0.150\r\n *                     pesoBruto: 0.200\r\n *                   unidadesMedida:\r\n *                     - unidade: 'UN'\r\n *                       fatorConversao: 1.0\r\n *                       descricao: 'Unidade'\r\n *                     - unidade: 'CX'\r\n *                       fatorConversao: 12.0\r\n *                       descricao: 'Caixa com 12 unidades'\r\n *                   estabelecimentos:\r\n *                     - codigo: '01.01'\r\n *                       nome: 'CD São Paulo'\r\n *                       ativo: true\r\n *                       estoqueAtual: 1500.0\r\n *                       estoqueMinimo: 100.0\r\n *                       localEstoque: 'A-12-03'\r\n *                     - codigo: '02.01'\r\n *                       nome: 'Fábrica Joinville'\r\n *                       ativo: true\r\n *                       estoqueAtual: 3200.0\r\n *                       estoqueMinimo: 500.0\r\n *                       localEstoque: 'B-05-12'\r\n *               itemSemEstabelecimentos:\r\n *                 summary: Item sem estabelecimentos cadastrados\r\n *                 value:\r\n *                   dadosGerais:\r\n *                     codigo: '7530110'\r\n *                     descricao: 'VALVULA DE ESFERA 1/2\" BRONZE'\r\n *                     unidadeMedida: 'UN'\r\n *                     pesoLiquido: 0.150\r\n *                     pesoBruto: 0.200\r\n *                   unidadesMedida:\r\n *                     - unidade: 'UN'\r\n *                       fatorConversao: 1.0\r\n *                       descricao: 'Unidade'\r\n *                   estabelecimentos: []\r\n *       400:\r\n *         $ref: '#/components/responses/BadRequest'\r\n *       404:\r\n *         $ref: '#/components/responses/NotFound'\r\n *       429:\r\n *         $ref: '#/components/responses/TooManyRequests'\r\n *       500:\r\n *         $ref: '#/components/responses/InternalError'\r\n *       504:\r\n *         description: Gateway Timeout - Requisição excedeu o tempo limite\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               $ref: '#/components/schemas/Error'\r\n *             example:\r\n *               error: 'Timeout da requisição'\r\n *               details: 'A consulta ao banco de dados demorou mais de 30 segundos'\r\n */\r\nrouter.get('/:itemCodigo', \r\n  optionalApiKeyAuth,  // Autentica se tiver API Key\r\n  userRateLimit,       // Rate limit por usuário/tier\r\n  itemCache,           // Cache HTTP\r\n  async (req: Request, res: Response, next: NextFunction) => {\r\n  try {\r\n    // ✅ CORRIGIDO: Nome correto do controller\r\n    const { InformacoesGeraisController } = await import('../controller/informacoesGerais.controller');\r\n    \r\n    // ✅ CORRIGIDO: Passa req, res, next (3 parâmetros)\r\n    await InformacoesGeraisController.getInformacoesGerais(req, res, next);\r\n  } catch (error) {\r\n    console.error('Erro ao carregar controller:', error);\r\n    res.status(500).json({\r\n      success: false,\r\n      error: 'Erro interno ao processar requisição',\r\n    });\r\n  }\r\n});\r\n\r\nexport default router;"],"version":3}