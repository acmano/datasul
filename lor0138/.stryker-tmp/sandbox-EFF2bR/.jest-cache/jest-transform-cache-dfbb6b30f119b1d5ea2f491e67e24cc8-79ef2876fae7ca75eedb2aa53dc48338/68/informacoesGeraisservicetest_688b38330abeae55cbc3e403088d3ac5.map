{"file":"/home/mano/projetos/datasul/lor0138/.stryker-tmp/sandbox-EFF2bR/tests/unit/services/informacoesGerais.service.test.ts","mappings":"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","names":[],"sources":["/home/mano/projetos/datasul/lor0138/.stryker-tmp/sandbox-EFF2bR/tests/unit/services/informacoesGerais.service.test.ts"],"sourcesContent":["// @ts-nocheck\n// tests/unit/services/informacoesGerais.service.test.ts\n\nimport { InformacoesGeraisService } from '@api/lor0138/item/dadosCadastrais/informacoesGerais/service/informacoesGerais.service';\nimport { ItemInformacoesGeraisRepository } from '@api/lor0138/item/dadosCadastrais/informacoesGerais/repository/informacoesGerais.repository';\nimport { ItemNotFoundError, DatabaseError } from '@shared/errors/CustomErrors';\nimport { \n  createItemMasterQueryResult, \n  createItemEstabQueryResult,\n  createInformacoesGerais\n} from '../../factories/item.factory';\n\n// Mock do Repository\njest.mock('@api/lor0138/item/dadosCadastrais/informacoesGerais/repository/informacoesGerais.repository');\n\n// Mock do logger\njest.mock('@shared/utils/logger', () => ({\n  log: {\n    info: jest.fn(),\n    error: jest.fn(),\n    warn: jest.fn(),\n  },\n}));\n\ndescribe('Service - InformacoesGeraisService', () => {\n  \n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  // ========================================\n  // CASOS DE SUCESSO\n  // ========================================\n  describe('getInformacoesGerais - Sucesso', () => {\n    \n    it('deve retornar informações completas do item', async () => {\n      const mockItem = createItemMasterQueryResult();\n      const mockEstabs = [\n        createItemEstabQueryResult(),\n        createItemEstabQueryResult({ estabCodigo: '02.01', codObsoleto: 1 })\n      ];\n\n      (ItemInformacoesGeraisRepository.getItemMaster as jest.Mock).mockResolvedValue(mockItem);\n      (ItemInformacoesGeraisRepository.getItemEstabelecimentos as jest.Mock).mockResolvedValue(mockEstabs);\n\n      const result = await InformacoesGeraisService.getInformacoesGerais('7530110');\n\n      expect(result).toBeDefined();\n      expect(result.identificacaoItemCodigo).toBe('7530110');\n      expect(result.identificacaoItemDescricao).toBe('VALVULA DE ESFERA 1/2\" BRONZE');\n      expect(result.identificacaoItemUnidade).toBe('UN');\n      expect(result.identificacaoItensEstabelecimentos).toHaveLength(2);\n    });\n\n    it('deve transformar dados do repository para DTO de resposta', async () => {\n      const mockItem = createItemMasterQueryResult();\n      const mockEstabs = [createItemEstabQueryResult()];\n\n      (ItemInformacoesGeraisRepository.getItemMaster as jest.Mock).mockResolvedValue(mockItem);\n      (ItemInformacoesGeraisRepository.getItemEstabelecimentos as jest.Mock).mockResolvedValue(mockEstabs);\n\n      const result = await InformacoesGeraisService.getInformacoesGerais('7530110');\n\n      // Valida mapeamento de campos\n      expect(result).toHaveProperty('identificacaoItemCodigo');\n      expect(result).toHaveProperty('identificacaoItemDescricao');\n      expect(result).toHaveProperty('identificacaoItemUnidade');\n      expect(result).toHaveProperty('identificacaoItensEstabelecimentos');\n    });\n\n    it('deve calcular statusIndex corretamente (0 = ativo)', async () => {\n      const mockItem = createItemMasterQueryResult();\n      const mockEstabs = [\n        createItemEstabQueryResult({ codObsoleto: 0 }) // Ativo\n      ];\n\n      (ItemInformacoesGeraisRepository.getItemMaster as jest.Mock).mockResolvedValue(mockItem);\n      (ItemInformacoesGeraisRepository.getItemEstabelecimentos as jest.Mock).mockResolvedValue(mockEstabs);\n\n      const result = await InformacoesGeraisService.getInformacoesGerais('7530110');\n\n      expect(result.identificacaoItensEstabelecimentos[0].statusIndex).toBe(1);\n    });\n\n    it('deve calcular statusIndex corretamente (1+ = inativo)', async () => {\n      const mockItem = createItemMasterQueryResult();\n      const mockEstabs = [\n        createItemEstabQueryResult({ codObsoleto: 1 }), // Inativo\n        createItemEstabQueryResult({ codObsoleto: 2 }), // Inativo\n        createItemEstabQueryResult({ codObsoleto: 99 }) // Inativo\n      ];\n\n      (ItemInformacoesGeraisRepository.getItemMaster as jest.Mock).mockResolvedValue(mockItem);\n      (ItemInformacoesGeraisRepository.getItemEstabelecimentos as jest.Mock).mockResolvedValue(mockEstabs);\n\n      const result = await InformacoesGeraisService.getInformacoesGerais('7530110');\n\n      expect(result.identificacaoItensEstabelecimentos[0].statusIndex).toBe(2);\n      expect(result.identificacaoItensEstabelecimentos[1].statusIndex).toBe(2);\n      expect(result.identificacaoItensEstabelecimentos[2].statusIndex).toBe(2);\n    });\n\n    it('deve retornar item com array vazio de estabelecimentos', async () => {\n      const mockItem = createItemMasterQueryResult();\n\n      (ItemInformacoesGeraisRepository.getItemMaster as jest.Mock).mockResolvedValue(mockItem);\n      (ItemInformacoesGeraisRepository.getItemEstabelecimentos as jest.Mock).mockResolvedValue([]);\n\n      const result = await InformacoesGeraisService.getInformacoesGerais('7530110');\n\n      expect(result.identificacaoItensEstabelecimentos).toEqual([]);\n    });\n\n    it('deve mapear todos os campos do estabelecimento', async () => {\n      const mockItem = createItemMasterQueryResult();\n      const mockEstabs = [createItemEstabQueryResult({\n        itemCodigo: '7530110',\n        estabCodigo: '01.01',\n        estabNome: 'CD São Paulo',\n        codObsoleto: 0\n      })];\n\n      (ItemInformacoesGeraisRepository.getItemMaster as jest.Mock).mockResolvedValue(mockItem);\n      (ItemInformacoesGeraisRepository.getItemEstabelecimentos as jest.Mock).mockResolvedValue(mockEstabs);\n\n      const result = await InformacoesGeraisService.getInformacoesGerais('7530110');\n\n      const estab = result.identificacaoItensEstabelecimentos[0];\n      expect(estab.itemCodigo).toBe('7530110');\n      expect(estab.estabCodigo).toBe('01.01');\n      expect(estab.estabNome).toBe('CD São Paulo');\n      expect(estab.statusIndex).toBe(1);\n    });\n\n  });\n\n  // ========================================\n  // ITEM NÃO ENCONTRADO\n  // ========================================\n  describe('getInformacoesGerais - Item Não Encontrado', () => {\n    \n    it('deve lançar ItemNotFoundError quando item não existe', async () => {\n      (ItemInformacoesGeraisRepository.getItemMaster as jest.Mock).mockResolvedValue(null);\n\n      await expect(\n        InformacoesGeraisService.getInformacoesGerais('INEXISTENTE')\n      ).rejects.toThrow(ItemNotFoundError);\n    });\n\n    it('deve incluir código do item na mensagem de erro', async () => {\n      (ItemInformacoesGeraisRepository.getItemMaster as jest.Mock).mockResolvedValue(null);\n\n      try {\n        await InformacoesGeraisService.getInformacoesGerais('ABC123');\n        fail('Deveria ter lançado erro');\n      } catch (error) {\n        expect(error).toBeInstanceOf(ItemNotFoundError);\n        expect((error as ItemNotFoundError).message).toContain('ABC123');\n      }\n    });\n\n    it('deve logar quando item não é encontrado', async () => {\n      const { log } = require('@shared/utils/logger');\n      \n      (ItemInformacoesGeraisRepository.getItemMaster as jest.Mock).mockResolvedValue(null);\n\n      try {\n        await InformacoesGeraisService.getInformacoesGerais('7530110');\n      } catch (error) {\n        // Esperado\n      }\n\n      expect(log.info).toHaveBeenCalledWith(\n        'Item não encontrado',\n        { itemCodigo: '7530110' }\n      );\n    });\n\n  });\n\n  // ========================================\n  // TRATAMENTO DE ERROS\n  // ========================================\n  describe('getInformacoesGerais - Tratamento de Erros', () => {\n    \n    it('deve re-lançar ItemNotFoundError sem conversão', async () => {\n      const notFoundError = new ItemNotFoundError('7530110');\n      \n      (ItemInformacoesGeraisRepository.getItemMaster as jest.Mock).mockRejectedValue(notFoundError);\n\n      await expect(\n        InformacoesGeraisService.getInformacoesGerais('7530110')\n      ).rejects.toThrow(ItemNotFoundError);\n    });\n\n    it('deve converter erros de banco em DatabaseError', async () => {\n      const dbError = new Error('Conexão perdida');\n      \n      (ItemInformacoesGeraisRepository.getItemMaster as jest.Mock).mockRejectedValue(dbError);\n\n      await expect(\n        InformacoesGeraisService.getInformacoesGerais('7530110')\n      ).rejects.toThrow(DatabaseError);\n    });\n\n    it('deve incluir erro original em DatabaseError', async () => {\n      const originalError = new Error('Timeout SQL');\n      \n      (ItemInformacoesGeraisRepository.getItemMaster as jest.Mock).mockRejectedValue(originalError);\n\n      try {\n        await InformacoesGeraisService.getInformacoesGerais('7530110');\n        fail('Deveria ter lançado erro');\n      } catch (error) {\n        expect(error).toBeInstanceOf(DatabaseError);\n        expect((error as DatabaseError).message).toContain('Falha ao buscar');\n      }\n    });\n\n    it('deve logar erros de banco', async () => {\n      const { log } = require('@shared/utils/logger');\n      const dbError = new Error('Erro SQL');\n      \n      (ItemInformacoesGeraisRepository.getItemMaster as jest.Mock).mockRejectedValue(dbError);\n\n      try {\n        await InformacoesGeraisService.getInformacoesGerais('7530110');\n      } catch (error) {\n        // Esperado\n      }\n\n      expect(log.error).toHaveBeenCalledWith(\n        'Erro ao buscar informações gerais',\n        expect.objectContaining({\n          itemCodigo: '7530110',\n          error: 'Erro SQL'\n        })\n      );\n    });\n\n    it('deve tratar erro na busca de estabelecimentos', async () => {\n      const mockItem = createItemMasterQueryResult();\n      const estabError = new Error('Erro ao buscar estabelecimentos');\n\n      (ItemInformacoesGeraisRepository.getItemMaster as jest.Mock).mockResolvedValue(mockItem);\n      (ItemInformacoesGeraisRepository.getItemEstabelecimentos as jest.Mock).mockRejectedValue(estabError);\n\n      await expect(\n        InformacoesGeraisService.getInformacoesGerais('7530110')\n      ).rejects.toThrow(DatabaseError);\n    });\n\n  });\n\n  // ========================================\n  // INTEGRAÇÃO COM REPOSITORY\n  // ========================================\n  describe('Integração com Repository', () => {\n    \n    it('deve chamar getItemMaster com código correto', async () => {\n      const mockItem = createItemMasterQueryResult();\n      \n      (ItemInformacoesGeraisRepository.getItemMaster as jest.Mock).mockResolvedValue(mockItem);\n      (ItemInformacoesGeraisRepository.getItemEstabelecimentos as jest.Mock).mockResolvedValue([]);\n\n      await InformacoesGeraisService.getInformacoesGerais('ABC123');\n\n      expect(ItemInformacoesGeraisRepository.getItemMaster).toHaveBeenCalledWith('ABC123');\n    });\n\n    it('deve chamar getItemEstabelecimentos com código correto', async () => {\n      const mockItem = createItemMasterQueryResult();\n      \n      (ItemInformacoesGeraisRepository.getItemMaster as jest.Mock).mockResolvedValue(mockItem);\n      (ItemInformacoesGeraisRepository.getItemEstabelecimentos as jest.Mock).mockResolvedValue([]);\n\n      await InformacoesGeraisService.getInformacoesGerais('ABC123');\n\n      expect(ItemInformacoesGeraisRepository.getItemEstabelecimentos).toHaveBeenCalledWith('ABC123');\n    });\n\n    it('deve chamar Repository na ordem correta (master → estabelecimentos)', async () => {\n      const mockItem = createItemMasterQueryResult();\n      const callOrder: string[] = [];\n\n      (ItemInformacoesGeraisRepository.getItemMaster as jest.Mock).mockImplementation(async () => {\n        callOrder.push('master');\n        return mockItem;\n      });\n\n      (ItemInformacoesGeraisRepository.getItemEstabelecimentos as jest.Mock).mockImplementation(async () => {\n        callOrder.push('estabelecimentos');\n        return [];\n      });\n\n      await InformacoesGeraisService.getInformacoesGerais('7530110');\n\n      expect(callOrder).toEqual(['master', 'estabelecimentos']);\n    });\n\n    it('não deve buscar estabelecimentos se item não existe', async () => {\n      (ItemInformacoesGeraisRepository.getItemMaster as jest.Mock).mockResolvedValue(null);\n\n      try {\n        await InformacoesGeraisService.getInformacoesGerais('7530110');\n      } catch (error) {\n        // Esperado\n      }\n\n      expect(ItemInformacoesGeraisRepository.getItemEstabelecimentos).not.toHaveBeenCalled();\n    });\n\n  });\n\n  // ========================================\n  // EDGE CASES\n  // ========================================\n  describe('Edge Cases', () => {\n    \n    it('deve tratar item com descrição vazia', async () => {\n      const mockItem = createItemMasterQueryResult({ itemDescricao: '' });\n      \n      (ItemInformacoesGeraisRepository.getItemMaster as jest.Mock).mockResolvedValue(mockItem);\n      (ItemInformacoesGeraisRepository.getItemEstabelecimentos as jest.Mock).mockResolvedValue([]);\n\n      const result = await InformacoesGeraisService.getInformacoesGerais('7530110');\n\n      expect(result.identificacaoItemDescricao).toBe('');\n    });\n\n    it('deve tratar múltiplos estabelecimentos (10+)', async () => {\n      const mockItem = createItemMasterQueryResult();\n      const mockEstabs = Array.from({ length: 15 }, (_, i) => \n        createItemEstabQueryResult({ \n          estabCodigo: `0${i + 1}.01`,\n          codObsoleto: i % 2 \n        })\n      );\n\n      (ItemInformacoesGeraisRepository.getItemMaster as jest.Mock).mockResolvedValue(mockItem);\n      (ItemInformacoesGeraisRepository.getItemEstabelecimentos as jest.Mock).mockResolvedValue(mockEstabs);\n\n      const result = await InformacoesGeraisService.getInformacoesGerais('7530110');\n\n      expect(result.identificacaoItensEstabelecimentos).toHaveLength(15);\n    });\n\n    it('deve tratar nome de estabelecimento null', async () => {\n      const mockItem = createItemMasterQueryResult();\n      const mockEstabs = [\n        createItemEstabQueryResult({ estabNome: null as any })\n      ];\n\n      (ItemInformacoesGeraisRepository.getItemMaster as jest.Mock).mockResolvedValue(mockItem);\n      (ItemInformacoesGeraisRepository.getItemEstabelecimentos as jest.Mock).mockResolvedValue(mockEstabs);\n\n      const result = await InformacoesGeraisService.getInformacoesGerais('7530110');\n\n      expect(result.identificacaoItensEstabelecimentos[0].estabNome).toBeNull();\n    });\n\n    it('deve tratar valores negativos de codObsoleto', async () => {\n      const mockItem = createItemMasterQueryResult();\n      const mockEstabs = [\n        createItemEstabQueryResult({ codObsoleto: -1 })\n      ];\n\n      (ItemInformacoesGeraisRepository.getItemMaster as jest.Mock).mockResolvedValue(mockItem);\n      (ItemInformacoesGeraisRepository.getItemEstabelecimentos as jest.Mock).mockResolvedValue(mockEstabs);\n\n      const result = await InformacoesGeraisService.getInformacoesGerais('7530110');\n\n      // -1 não é 0, então statusIndex = 2\n      expect(result.identificacaoItensEstabelecimentos[0].statusIndex).toBe(2);\n    });\n\n  });\n\n});"],"version":3}