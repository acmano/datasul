ba7022abefae277992186b43f54dfc9c
"use strict";
// @ts-nocheck
// tests/unit/validators/informacoesGerais.validators.test.ts
Object.defineProperty(exports, "__esModule", { value: true });
const informacoesGerais_validators_1 = require("@api/lor0138/item/dadosCadastrais/informacoesGerais/validators/informacoesGerais.validators");
const item_factory_1 = require("../../factories/item.factory");
describe('Validators - InformacoesGerais', () => {
    describe('validateItemInformacoesGeraisRequest', () => {
        // ========================================
        // CASOS DE SUCESSO ‚úÖ
        // ========================================
        describe('Casos V√°lidos', () => {
            test('deve validar c√≥digo num√©rico simples', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({ itemCodigo: '7530110' });
                expect(result.valid).toBe(true);
                expect(result.data).toEqual({ itemCodigo: '7530110' });
                expect(result.error).toBeUndefined();
            });
            test('deve validar c√≥digo alfanum√©rico', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({ itemCodigo: 'ABC123' });
                expect(result.valid).toBe(true);
                expect(result.data?.itemCodigo).toBe('ABC123');
            });
            test('deve validar c√≥digo com 16 caracteres (m√°ximo)', () => {
                const codigo = '1234567890123456'; // 16 caracteres
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({ itemCodigo: codigo });
                expect(result.valid).toBe(true);
                expect(result.data?.itemCodigo).toBe(codigo);
            });
            test('deve validar c√≥digo com 1 caractere (m√≠nimo)', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({ itemCodigo: 'A' });
                expect(result.valid).toBe(true);
                expect(result.data?.itemCodigo).toBe('A');
            });
            test.each(item_factory_1.testItemCodigos.valid)('deve validar c√≥digo v√°lido: %s', (codigo) => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({ itemCodigo: codigo });
                expect(result.valid).toBe(true);
            });
        });
        // ========================================
        // SANITIZA√á√ÉO üßπ
        // ========================================
        describe('Sanitiza√ß√£o de Entrada', () => {
            test('deve remover espa√ßos em branco nas extremidades', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({ itemCodigo: '  7530110  ' });
                expect(result.valid).toBe(true);
                expect(result.data?.itemCodigo).toBe('7530110');
            });
            test('deve remover caracteres de controle', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({
                    itemCodigo: '7530110\x00\x1F'
                });
                expect(result.valid).toBe(true);
                expect(result.data?.itemCodigo).toBe('7530110');
            });
            test('deve remover tentativas de path traversal', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({
                    itemCodigo: '..ABC123..'
                });
                expect(result.valid).toBe(true);
                expect(result.data?.itemCodigo).toBe('ABC123');
            });
            test.each(item_factory_1.testItemCodigos.sanitized)('deve sanitizar corretamente: $input ‚Üí $expected', ({ input, expected }) => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({ itemCodigo: input });
                expect(result.data?.itemCodigo).toBe(expected);
            });
        });
        // ========================================
        // VALIDA√á√ÉO DE ERROS ‚ùå
        // ========================================
        describe('Casos Inv√°lidos', () => {
            test('deve rejeitar itemCodigo ausente', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({});
                expect(result.valid).toBe(false);
                expect(result.error).toBe(item_factory_1.expectedErrors.validationError);
            });
            test('deve rejeitar itemCodigo vazio', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({ itemCodigo: '' });
                expect(result.valid).toBe(false);
                expect(result.error).toContain('obrigat√≥rio');
            });
            test('deve rejeitar string com apenas espa√ßos', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({ itemCodigo: '   ' });
                expect(result.valid).toBe(false);
                expect(result.error).toContain('inv√°lido');
            });
            test('deve rejeitar c√≥digo com mais de 16 caracteres', () => {
                const codigo = '12345678901234567'; // 17 caracteres
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({ itemCodigo: codigo });
                expect(result.valid).toBe(false);
                expect(result.error).toBe(item_factory_1.expectedErrors.maxLength);
            });
            test('deve rejeitar tipo n√£o-string', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({ itemCodigo: 123 });
                expect(result.valid).toBe(false);
                expect(result.error).toContain('string');
            });
        });
        // ========================================
        // SEGURAN√áA üõ°Ô∏è - SQL INJECTION
        // ========================================
        describe('Prote√ß√£o contra SQL Injection', () => {
            test('deve bloquear SELECT (dentro do limite de caracteres)', () => {
                // Usa c√≥digo curto que passa tamanho mas tem SQL keyword
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({
                    itemCodigo: 'SELECTabc'
                });
                expect(result.valid).toBe(false);
                expect(result.error).toContain('padr√µes n√£o permitidos');
            });
            test('deve bloquear INSERT', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({
                    itemCodigo: 'INSERTx'
                });
                expect(result.valid).toBe(false);
                expect(result.error).toContain('padr√µes n√£o permitidos');
            });
            test('deve bloquear DROP', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({
                    itemCodigo: 'DROPtable'
                });
                expect(result.valid).toBe(false);
                expect(result.error).toContain('padr√µes n√£o permitidos');
            });
            test('deve bloquear UNION', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({
                    itemCodigo: 'UNIONselect'
                });
                expect(result.valid).toBe(false);
                expect(result.error).toContain('padr√µes n√£o permitidos');
            });
            test('deve remover aspas simples e duplas', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({
                    itemCodigo: "item'test"
                });
                // Aspas s√£o removidas na sanitiza√ß√£o
                expect(result.valid).toBe(true);
                expect(result.data?.itemCodigo).toBe('itemtest');
            });
            test('deve remover ponto e v√≠rgula', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({
                    itemCodigo: 'item;test'
                });
                // ; √© removido na sanitiza√ß√£o
                expect(result.valid).toBe(true);
                expect(result.data?.itemCodigo).toBe('itemtest');
            });
        });
        // ========================================
        // SEGURAN√áA üõ°Ô∏è - COMMAND INJECTION
        // ========================================
        describe('Prote√ß√£o contra Command Injection', () => {
            test('deve bloquear pipe (|)', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({
                    itemCodigo: 'item|test'
                });
                expect(result.valid).toBe(false);
                // | n√£o √© removido na sanitiza√ß√£o, ent√£o falha no regex
                expect(result.error).toContain('caracteres inv√°lidos');
            });
            test('deve bloquear && operator', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({
                    itemCodigo: 'item&&test'
                });
                expect(result.valid).toBe(false);
                // & n√£o √© removido, falha no regex
                expect(result.error).toContain('caracteres inv√°lidos');
            });
            test('deve bloquear || operator', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({
                    itemCodigo: 'item||test'
                });
                expect(result.valid).toBe(false);
                // | n√£o √© removido, falha no regex
                expect(result.error).toContain('caracteres inv√°lidos');
            });
            test('deve bloquear backticks', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({
                    itemCodigo: 'item`test`'
                });
                expect(result.valid).toBe(false);
                // ` n√£o √© removido, falha no regex
                expect(result.error).toContain('caracteres inv√°lidos');
            });
            test('deve bloquear $() substitution', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({
                    itemCodigo: 'item$(test)'
                });
                expect(result.valid).toBe(false);
                // $() n√£o s√£o removidos, falha no regex
                expect(result.error).toContain('caracteres inv√°lidos');
            });
        });
        // ========================================
        // SEGURAN√áA üõ°Ô∏è - XSS
        // ========================================
        describe('Prote√ß√£o contra XSS', () => {
            test('deve remover tags HTML mas bloquear par√™nteses', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({
                    itemCodigo: '<script>alert(1)</script>'
                });
                // Tags <> s√£o removidas, mas () permanecem e falham no regex
                expect(result.valid).toBe(false);
                expect(result.error).toContain('caracteres inv√°lidos');
            });
            test('deve remover tags mas bloquear caracteres especiais remanescentes', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({
                    itemCodigo: '<img src=x>'
                });
                // Remove <>, mas resultado final √© inv√°lido
                expect(result.valid).toBe(false);
                expect(result.error).toContain('inv√°lido');
            });
            test('deve bloquear script com caracteres especiais', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({
                    itemCodigo: '<script>alert("xss")</script>'
                });
                // Aspas e par√™nteses causam erro de formato
                expect(result.valid).toBe(false);
            });
            test('deve aceitar tags removidas que resultam em alfanum√©rico v√°lido', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({
                    itemCodigo: '<b>test123</b>'
                });
                // Remove <b> e </b> completamente, fica "test123"
                expect(result.valid).toBe(true);
                expect(result.data?.itemCodigo).toBe('test123');
            });
        });
        // ========================================
        // EDGE CASES üîç
        // ========================================
        describe('Edge Cases', () => {
            test('deve aceitar apenas n√∫meros', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({ itemCodigo: '123456' });
                expect(result.valid).toBe(true);
                expect(result.data?.itemCodigo).toBe('123456');
            });
            test('deve aceitar apenas letras', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({ itemCodigo: 'ABCDEF' });
                expect(result.valid).toBe(true);
                expect(result.data?.itemCodigo).toBe('ABCDEF');
            });
            test('deve aceitar mix mai√∫sculas e min√∫sculas', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({ itemCodigo: 'AbC123' });
                expect(result.valid).toBe(true);
                expect(result.data?.itemCodigo).toBe('AbC123');
            });
            test('deve rejeitar caracteres especiais', () => {
                const specialChars = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')'];
                specialChars.forEach(char => {
                    const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({
                        itemCodigo: `item${char}test`
                    });
                    // Caracteres especiais causam erro
                    expect(result.valid).toBe(false);
                });
            });
            test('deve sanitizar e validar corretamente c√≥digos complexos', () => {
                // C√≥digo com v√°rios caracteres especiais que ser√£o removidos
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({
                    itemCodigo: '  ABC-123"test;  '
                });
                // Remove espa√ßos, -, ", ; ‚Üí fica ABC123test
                expect(result.valid).toBe(true);
                expect(result.data?.itemCodigo).toBe('ABC123test');
            });
        });
        // ========================================
        // FLUXO COMPLETO DE VALIDA√á√ÉO
        // ========================================
        describe('Fluxo de Valida√ß√£o Completo', () => {
            test('deve seguir ordem: sanitiza√ß√£o ‚Üí tamanho ‚Üí formato ‚Üí SQL', () => {
                // 1. Input com caracteres especiais
                const input = '  ITEM-123  ';
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({ itemCodigo: input });
                // 2. Sanitiza (remove espa√ßos e -)
                // 3. Fica "ITEM123" (7 chars)
                // 4. Passa no tamanho
                // 5. Passa no formato alfanum√©rico
                // 6. N√£o tem SQL keywords
                expect(result.valid).toBe(true);
                expect(result.data?.itemCodigo).toBe('ITEM123');
            });
            test('deve falhar no tamanho antes de checar SQL', () => {
                // String longa com SQL keyword
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({
                    itemCodigo: 'SELECT1234567890' // 16 chars, mas SELECT est√° l√°
                });
                // Passa no tamanho (16 chars), mas falha no SQL keyword
                expect(result.valid).toBe(false);
                expect(result.error).toContain('padr√µes n√£o permitidos');
            });
            test('deve falhar no formato antes de checar SQL', () => {
                // String curta com SQL e caracteres inv√°lidos
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({
                    itemCodigo: 'SELECT *' // Tem espa√ßo
                });
                // 1. Sanitiza (mant√©m espa√ßo)
                // 2. Passa no tamanho (8 chars)
                // 3. FALHA no formato (regex n√£o aceita espa√ßo)
                expect(result.valid).toBe(false);
                expect(result.error).toContain('caracteres inv√°lidos');
            });
        });
        describe('Gaps de Mutation Testing', () => {
            // Gap 1: String que fica vazia ap√≥s sanitiza√ß√£o
            it('deve rejeitar c√≥digo com apenas caracteres remov√≠veis', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({
                    itemCodigo: '//\\\\' // S√≥ barras que ser√£o removidas
                });
                expect(result.valid).toBe(false);
                // Mensagem real que o validador retorna
                expect(result.error).toContain('inv√°lido');
            });
            it('deve rejeitar c√≥digo com apenas tags HTML', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({
                    itemCodigo: '<><><>' // S√≥ tags removidas
                });
                expect(result.valid).toBe(false);
            });
            // Gap 2: Garantir que dangerousPatterns est√° sendo usado
            it('deve ter array de padr√µes perigosos n√£o vazio', () => {
                // Este teste for√ßa o c√≥digo a executar o loop
                const patterns = ['&&', '||', '|', '`', '$'];
                patterns.forEach(pattern => {
                    const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({
                        itemCodigo: `test${pattern}code`
                    });
                    expect(result.valid).toBe(false);
                    // Mensagem real: "C√≥digo do item cont√©m caracteres inv√°lidos..."
                    expect(result.error).toContain('caracteres inv√°lidos');
                });
            });
            // Gap 3: Garantir execu√ß√£o do bloco if dentro do loop
            it('deve validar cada padr√£o perigoso individualmente', () => {
                const testCases = [
                    { input: 'a&&b', pattern: '&&' },
                    { input: 'a||b', pattern: '||' },
                    { input: 'a|b', pattern: '|' },
                    { input: 'a`b', pattern: '`' },
                    { input: 'a$b', pattern: '$' },
                ];
                testCases.forEach(({ input, pattern }) => {
                    const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({ itemCodigo: input });
                    expect(result.valid).toBe(false);
                    expect(result.error).toContain('caracteres inv√°lidos');
                });
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,