3d3d0c6e6bcb655638580ef9c101dd2b
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MemoryCacheAdapter = void 0;
// @ts-nocheck
// src/shared/utils/cache/MemoryCacheAdapter.ts
function stryNS_9fa48() {
    var g = typeof globalThis === 'object' && globalThis && globalThis.Math === Math && globalThis || new Function("return this")();
    var ns = g.__stryker__ || (g.__stryker__ = {});
    if (ns.activeMutant === undefined && g.process && g.process.env && g.process.env.__STRYKER_ACTIVE_MUTANT__) {
        ns.activeMutant = g.process.env.__STRYKER_ACTIVE_MUTANT__;
    }
    function retrieveNS() {
        return ns;
    }
    stryNS_9fa48 = retrieveNS;
    return retrieveNS();
}
stryNS_9fa48();
function stryCov_9fa48() {
    var ns = stryNS_9fa48();
    var cov = ns.mutantCoverage || (ns.mutantCoverage = {
        static: {},
        perTest: {}
    });
    function cover() {
        var c = cov.static;
        if (ns.currentTestId) {
            c = cov.perTest[ns.currentTestId] = cov.perTest[ns.currentTestId] || {};
        }
        var a = arguments;
        for (var i = 0; i < a.length; i++) {
            c[a[i]] = (c[a[i]] || 0) + 1;
        }
    }
    stryCov_9fa48 = cover;
    cover.apply(null, arguments);
}
function stryMutAct_9fa48(id) {
    var ns = stryNS_9fa48();
    function isActive(id) {
        if (ns.activeMutant === id) {
            if (ns.hitCount !== void 0 && ++ns.hitCount > ns.hitLimit) {
                throw new Error('Stryker: Hit count limit reached (' + ns.hitCount + ')');
            }
            return true;
        }
        return false;
    }
    stryMutAct_9fa48 = isActive;
    return isActive(id);
}
const node_cache_1 = __importDefault(require("node-cache"));
const logger_1 = require("../logger");
/**
 * Adaptador de cache em memória (L1)
 * - Ultra rápido (acesso local)
 * - Volátil (perde dados ao reiniciar)
 * - Não compartilhado entre instâncias
 */
class MemoryCacheAdapter {
    constructor(stdTTL = 300, name = stryMutAct_9fa48("3531") ? "" : (stryCov_9fa48("3531"), 'L1-Memory')) {
        if (stryMutAct_9fa48("3532")) {
            { }
        }
        else {
            stryCov_9fa48("3532");
            this.cache = new node_cache_1.default(stryMutAct_9fa48("3533") ? {} : (stryCov_9fa48("3533"), {
                stdTTL,
                checkperiod: 120,
                // Verifica expiração a cada 2min
                useClones: stryMutAct_9fa48("3534") ? true : (stryCov_9fa48("3534"), false) // Performance: não clona objetos
            }));
            this.name = name;
            logger_1.log.info(stryMutAct_9fa48("3535") ? `` : (stryCov_9fa48("3535"), `${this.name} cache inicializado`), stryMutAct_9fa48("3536") ? {} : (stryCov_9fa48("3536"), {
                ttl: stdTTL,
                checkPeriod: 120
            }));
        }
    }
    async get(key) {
        if (stryMutAct_9fa48("3537")) {
            { }
        }
        else {
            stryCov_9fa48("3537");
            try {
                if (stryMutAct_9fa48("3538")) {
                    { }
                }
                else {
                    stryCov_9fa48("3538");
                    const value = this.cache.get(key);
                    if (stryMutAct_9fa48("3541") ? value === undefined : stryMutAct_9fa48("3540") ? false : stryMutAct_9fa48("3539") ? true : (stryCov_9fa48("3539", "3540", "3541"), value !== undefined)) {
                        if (stryMutAct_9fa48("3542")) {
                            { }
                        }
                        else {
                            stryCov_9fa48("3542");
                            logger_1.log.debug(stryMutAct_9fa48("3543") ? `` : (stryCov_9fa48("3543"), `${this.name} HIT`), stryMutAct_9fa48("3544") ? {} : (stryCov_9fa48("3544"), {
                                key
                            }));
                        }
                    }
                    else {
                        if (stryMutAct_9fa48("3545")) {
                            { }
                        }
                        else {
                            stryCov_9fa48("3545");
                            logger_1.log.debug(stryMutAct_9fa48("3546") ? `` : (stryCov_9fa48("3546"), `${this.name} MISS`), stryMutAct_9fa48("3547") ? {} : (stryCov_9fa48("3547"), {
                                key
                            }));
                        }
                    }
                    return value;
                }
            }
            catch (error) {
                if (stryMutAct_9fa48("3548")) {
                    { }
                }
                else {
                    stryCov_9fa48("3548");
                    logger_1.log.error(stryMutAct_9fa48("3549") ? `` : (stryCov_9fa48("3549"), `${this.name} GET error`), stryMutAct_9fa48("3550") ? {} : (stryCov_9fa48("3550"), {
                        key,
                        error
                    }));
                    return undefined;
                }
            }
        }
    }
    async set(key, value, ttl) {
        if (stryMutAct_9fa48("3551")) {
            { }
        }
        else {
            stryCov_9fa48("3551");
            try {
                if (stryMutAct_9fa48("3552")) {
                    { }
                }
                else {
                    stryCov_9fa48("3552");
                    const success = ttl ? this.cache.set(key, value, ttl) : this.cache.set(key, value);
                    if (stryMutAct_9fa48("3554") ? false : stryMutAct_9fa48("3553") ? true : (stryCov_9fa48("3553", "3554"), success)) {
                        if (stryMutAct_9fa48("3555")) {
                            { }
                        }
                        else {
                            stryCov_9fa48("3555");
                            logger_1.log.debug(stryMutAct_9fa48("3556") ? `` : (stryCov_9fa48("3556"), `${this.name} SET`), stryMutAct_9fa48("3557") ? {} : (stryCov_9fa48("3557"), {
                                key,
                                ttl
                            }));
                        }
                    }
                    return success;
                }
            }
            catch (error) {
                if (stryMutAct_9fa48("3558")) {
                    { }
                }
                else {
                    stryCov_9fa48("3558");
                    logger_1.log.error(stryMutAct_9fa48("3559") ? `` : (stryCov_9fa48("3559"), `${this.name} SET error`), stryMutAct_9fa48("3560") ? {} : (stryCov_9fa48("3560"), {
                        key,
                        error
                    }));
                    return stryMutAct_9fa48("3561") ? true : (stryCov_9fa48("3561"), false);
                }
            }
        }
    }
    async delete(key) {
        if (stryMutAct_9fa48("3562")) {
            { }
        }
        else {
            stryCov_9fa48("3562");
            try {
                if (stryMutAct_9fa48("3563")) {
                    { }
                }
                else {
                    stryCov_9fa48("3563");
                    const deleted = this.cache.del(key);
                    logger_1.log.debug(stryMutAct_9fa48("3564") ? `` : (stryCov_9fa48("3564"), `${this.name} DELETE`), stryMutAct_9fa48("3565") ? {} : (stryCov_9fa48("3565"), {
                        key,
                        deleted
                    }));
                    return deleted;
                }
            }
            catch (error) {
                if (stryMutAct_9fa48("3566")) {
                    { }
                }
                else {
                    stryCov_9fa48("3566");
                    logger_1.log.error(stryMutAct_9fa48("3567") ? `` : (stryCov_9fa48("3567"), `${this.name} DELETE error`), stryMutAct_9fa48("3568") ? {} : (stryCov_9fa48("3568"), {
                        key,
                        error
                    }));
                    return 0;
                }
            }
        }
    }
    async flush() {
        if (stryMutAct_9fa48("3569")) {
            { }
        }
        else {
            stryCov_9fa48("3569");
            try {
                if (stryMutAct_9fa48("3570")) {
                    { }
                }
                else {
                    stryCov_9fa48("3570");
                    this.cache.flushAll();
                    logger_1.log.info(stryMutAct_9fa48("3571") ? `` : (stryCov_9fa48("3571"), `${this.name} FLUSH ALL`));
                }
            }
            catch (error) {
                if (stryMutAct_9fa48("3572")) {
                    { }
                }
                else {
                    stryCov_9fa48("3572");
                    logger_1.log.error(stryMutAct_9fa48("3573") ? `` : (stryCov_9fa48("3573"), `${this.name} FLUSH error`), stryMutAct_9fa48("3574") ? {} : (stryCov_9fa48("3574"), {
                        error
                    }));
                }
            }
        }
    }
    async keys(pattern) {
        if (stryMutAct_9fa48("3575")) {
            { }
        }
        else {
            stryCov_9fa48("3575");
            try {
                if (stryMutAct_9fa48("3576")) {
                    { }
                }
                else {
                    stryCov_9fa48("3576");
                    const allKeys = this.cache.keys();
                    if (stryMutAct_9fa48("3579") ? false : stryMutAct_9fa48("3578") ? true : stryMutAct_9fa48("3577") ? pattern : (stryCov_9fa48("3577", "3578", "3579"), !pattern)) {
                        if (stryMutAct_9fa48("3580")) {
                            { }
                        }
                        else {
                            stryCov_9fa48("3580");
                            return allKeys;
                        }
                    }
                    // Converte pattern com * para regex
                    const regex = new RegExp((stryMutAct_9fa48("3581") ? "" : (stryCov_9fa48("3581"), '^')) + pattern.replace(/\*/g, stryMutAct_9fa48("3582") ? "" : (stryCov_9fa48("3582"), '.*')) + (stryMutAct_9fa48("3583") ? "" : (stryCov_9fa48("3583"), '$')));
                    return stryMutAct_9fa48("3584") ? allKeys : (stryCov_9fa48("3584"), allKeys.filter(stryMutAct_9fa48("3585") ? () => undefined : (stryCov_9fa48("3585"), key => regex.test(key))));
                }
            }
            catch (error) {
                if (stryMutAct_9fa48("3586")) {
                    { }
                }
                else {
                    stryCov_9fa48("3586");
                    logger_1.log.error(stryMutAct_9fa48("3587") ? `` : (stryCov_9fa48("3587"), `${this.name} KEYS error`), stryMutAct_9fa48("3588") ? {} : (stryCov_9fa48("3588"), {
                        pattern,
                        error
                    }));
                    return stryMutAct_9fa48("3589") ? ["Stryker was here"] : (stryCov_9fa48("3589"), []);
                }
            }
        }
    }
    async isReady() {
        if (stryMutAct_9fa48("3590")) {
            { }
        }
        else {
            stryCov_9fa48("3590");
            return stryMutAct_9fa48("3591") ? false : (stryCov_9fa48("3591"), true); // Memória sempre está pronta
        }
    }
    async close() {
        if (stryMutAct_9fa48("3592")) {
            { }
        }
        else {
            stryCov_9fa48("3592");
            try {
                if (stryMutAct_9fa48("3593")) {
                    { }
                }
                else {
                    stryCov_9fa48("3593");
                    this.cache.close();
                    logger_1.log.info(stryMutAct_9fa48("3594") ? `` : (stryCov_9fa48("3594"), `${this.name} fechado`));
                }
            }
            catch (error) {
                if (stryMutAct_9fa48("3595")) {
                    { }
                }
                else {
                    stryCov_9fa48("3595");
                    logger_1.log.error(stryMutAct_9fa48("3596") ? `` : (stryCov_9fa48("3596"), `${this.name} CLOSE error`), stryMutAct_9fa48("3597") ? {} : (stryCov_9fa48("3597"), {
                        error
                    }));
                }
            }
        }
    }
    /**
     * Métodos extras específicos do NodeCache
     */
    getStats() {
        if (stryMutAct_9fa48("3598")) {
            { }
        }
        else {
            stryCov_9fa48("3598");
            return this.cache.getStats();
        }
    }
    getTtl(key) {
        if (stryMutAct_9fa48("3599")) {
            { }
        }
        else {
            stryCov_9fa48("3599");
            return this.cache.getTtl(key);
        }
    }
}
exports.MemoryCacheAdapter = MemoryCacheAdapter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvbWFuby9wcm9qZXRvcy9kYXRhc3VsL2xvcjAxMzgvLnN0cnlrZXItdG1wL3NhbmRib3gtRUZGMmJSL3NyYy9zaGFyZWQvdXRpbHMvY2FjaGUvTWVtb3J5Q2FjaGVBZGFwdGVyLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLGNBQWM7QUFDZCwrQ0FBK0M7QUFDL0MsU0FBUyxZQUFZO0lBQ25CLElBQUksQ0FBQyxHQUFHLE9BQU8sVUFBVSxLQUFLLFFBQVEsSUFBSSxVQUFVLElBQUksVUFBVSxDQUFDLElBQUksS0FBSyxJQUFJLElBQUksVUFBVSxJQUFJLElBQUksUUFBUSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUM7SUFDaEksSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLFdBQVcsSUFBSSxDQUFDLENBQUMsQ0FBQyxXQUFXLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDL0MsSUFBSSxFQUFFLENBQUMsWUFBWSxLQUFLLFNBQVMsSUFBSSxDQUFDLENBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLHlCQUF5QixFQUFFLENBQUM7UUFDM0csRUFBRSxDQUFDLFlBQVksR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyx5QkFBeUIsQ0FBQztJQUM1RCxDQUFDO0lBQ0QsU0FBUyxVQUFVO1FBQ2pCLE9BQU8sRUFBRSxDQUFDO0lBQ1osQ0FBQztJQUNELFlBQVksR0FBRyxVQUFVLENBQUM7SUFDMUIsT0FBTyxVQUFVLEVBQUUsQ0FBQztBQUN0QixDQUFDO0FBQ0QsWUFBWSxFQUFFLENBQUM7QUFDZixTQUFTLGFBQWE7SUFDcEIsSUFBSSxFQUFFLEdBQUcsWUFBWSxFQUFFLENBQUM7SUFDeEIsSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDLGNBQWMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxjQUFjLEdBQUc7UUFDbEQsTUFBTSxFQUFFLEVBQUU7UUFDVixPQUFPLEVBQUUsRUFBRTtLQUNaLENBQUMsQ0FBQztJQUNILFNBQVMsS0FBSztRQUNaLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUM7UUFDbkIsSUFBSSxFQUFFLENBQUMsYUFBYSxFQUFFLENBQUM7WUFDckIsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUMxRSxDQUFDO1FBQ0QsSUFBSSxDQUFDLEdBQUcsU0FBUyxDQUFDO1FBQ2xCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7WUFDbEMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMvQixDQUFDO0lBQ0gsQ0FBQztJQUNELGFBQWEsR0FBRyxLQUFLLENBQUM7SUFDdEIsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDL0IsQ0FBQztBQUNELFNBQVMsZ0JBQWdCLENBQUMsRUFBRTtJQUMxQixJQUFJLEVBQUUsR0FBRyxZQUFZLEVBQUUsQ0FBQztJQUN4QixTQUFTLFFBQVEsQ0FBQyxFQUFFO1FBQ2xCLElBQUksRUFBRSxDQUFDLFlBQVksS0FBSyxFQUFFLEVBQUUsQ0FBQztZQUMzQixJQUFJLEVBQUUsQ0FBQyxRQUFRLEtBQUssS0FBSyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztnQkFDMUQsTUFBTSxJQUFJLEtBQUssQ0FBQyxvQ0FBb0MsR0FBRyxFQUFFLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQyxDQUFDO1lBQzVFLENBQUM7WUFDRCxPQUFPLElBQUksQ0FBQztRQUNkLENBQUM7UUFDRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7SUFDRCxnQkFBZ0IsR0FBRyxRQUFRLENBQUM7SUFDNUIsT0FBTyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDdEIsQ0FBQztBQUNELDREQUFtQztBQUVuQyxzQ0FBZ0M7QUFFaEM7Ozs7O0dBS0c7QUFDSCxNQUFhLGtCQUFrQjtJQUc3QixZQUFZLFNBQWlCLEdBQUcsRUFBRSxPQUFlLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxFQUFFLFdBQVcsQ0FBQztRQUNuSCxJQUFJLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7WUFDN0IsQ0FBQyxDQUFBLENBQUM7UUFDSixDQUFDO2FBQU0sQ0FBQztZQUNOLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN0QixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksb0JBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsRUFBRTtnQkFDakYsTUFBTTtnQkFDTixXQUFXLEVBQUUsR0FBRztnQkFDaEIsaUNBQWlDO2dCQUNqQyxTQUFTLEVBQUUsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsaUNBQWlDO2FBQzlHLENBQUMsQ0FBQyxDQUFDO1lBQ0osSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7WUFDakIsWUFBRyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLHFCQUFxQixDQUFDLEVBQUUsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7Z0JBQzNKLEdBQUcsRUFBRSxNQUFNO2dCQUNYLFdBQVcsRUFBRSxHQUFHO2FBQ2pCLENBQUMsQ0FBQyxDQUFDO1FBQ04sQ0FBQztJQUNILENBQUM7SUFDRCxLQUFLLENBQUMsR0FBRyxDQUFJLEdBQVc7UUFDdEIsSUFBSSxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDO1lBQzdCLENBQUMsQ0FBQSxDQUFDO1FBQ0osQ0FBQzthQUFNLENBQUM7WUFDTixhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDdEIsSUFBSSxDQUFDO2dCQUNILElBQUksZ0JBQWdCLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQztvQkFDN0IsQ0FBQyxDQUFBLENBQUM7Z0JBQ0osQ0FBQztxQkFBTSxDQUFDO29CQUNOLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztvQkFDdEIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUksR0FBRyxDQUFDLENBQUM7b0JBQ3JDLElBQUksZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLEVBQUUsS0FBSyxLQUFLLFNBQVMsQ0FBQyxFQUFFLENBQUM7d0JBQ3ZMLElBQUksZ0JBQWdCLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQzs0QkFDN0IsQ0FBQyxDQUFBLENBQUM7d0JBQ0osQ0FBQzs2QkFBTSxDQUFDOzRCQUNOLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQzs0QkFDdEIsWUFBRyxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLE1BQU0sQ0FBQyxFQUFFLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxFQUFFO2dDQUM3SSxHQUFHOzZCQUNKLENBQUMsQ0FBQyxDQUFDO3dCQUNOLENBQUM7b0JBQ0gsQ0FBQzt5QkFBTSxDQUFDO3dCQUNOLElBQUksZ0JBQWdCLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQzs0QkFDN0IsQ0FBQyxDQUFBLENBQUM7d0JBQ0osQ0FBQzs2QkFBTSxDQUFDOzRCQUNOLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQzs0QkFDdEIsWUFBRyxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLE9BQU8sQ0FBQyxFQUFFLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxFQUFFO2dDQUM5SSxHQUFHOzZCQUNKLENBQUMsQ0FBQyxDQUFDO3dCQUNOLENBQUM7b0JBQ0gsQ0FBQztvQkFDRCxPQUFPLEtBQUssQ0FBQztnQkFDZixDQUFDO1lBQ0gsQ0FBQztZQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7Z0JBQ2YsSUFBSSxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDO29CQUM3QixDQUFDLENBQUEsQ0FBQztnQkFDSixDQUFDO3FCQUFNLENBQUM7b0JBQ04sYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO29CQUN0QixZQUFHLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksWUFBWSxDQUFDLEVBQUUsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7d0JBQ25KLEdBQUc7d0JBQ0gsS0FBSztxQkFDTixDQUFDLENBQUMsQ0FBQztvQkFDSixPQUFPLFNBQVMsQ0FBQztnQkFDbkIsQ0FBQztZQUNILENBQUM7UUFDSCxDQUFDO0lBQ0gsQ0FBQztJQUNELEtBQUssQ0FBQyxHQUFHLENBQUksR0FBVyxFQUFFLEtBQVEsRUFBRSxHQUFZO1FBQzlDLElBQUksZ0JBQWdCLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQztZQUM3QixDQUFDLENBQUEsQ0FBQztRQUNKLENBQUM7YUFBTSxDQUFDO1lBQ04sYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3RCLElBQUksQ0FBQztnQkFDSCxJQUFJLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7b0JBQzdCLENBQUMsQ0FBQSxDQUFDO2dCQUNKLENBQUM7cUJBQU0sQ0FBQztvQkFDTixhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7b0JBQ3RCLE1BQU0sT0FBTyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO29CQUNuRixJQUFJLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsRUFBRSxPQUFPLENBQUMsRUFBRSxDQUFDO3dCQUNsSCxJQUFJLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7NEJBQzdCLENBQUMsQ0FBQSxDQUFDO3dCQUNKLENBQUM7NkJBQU0sQ0FBQzs0QkFDTixhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7NEJBQ3RCLFlBQUcsQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsSUFBSSxNQUFNLENBQUMsRUFBRSxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsRUFBRTtnQ0FDN0ksR0FBRztnQ0FDSCxHQUFHOzZCQUNKLENBQUMsQ0FBQyxDQUFDO3dCQUNOLENBQUM7b0JBQ0gsQ0FBQztvQkFDRCxPQUFPLE9BQU8sQ0FBQztnQkFDakIsQ0FBQztZQUNILENBQUM7WUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO2dCQUNmLElBQUksZ0JBQWdCLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQztvQkFDN0IsQ0FBQyxDQUFBLENBQUM7Z0JBQ0osQ0FBQztxQkFBTSxDQUFDO29CQUNOLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztvQkFDdEIsWUFBRyxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLFlBQVksQ0FBQyxFQUFFLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxFQUFFO3dCQUNuSixHQUFHO3dCQUNILEtBQUs7cUJBQ04sQ0FBQyxDQUFDLENBQUM7b0JBQ0osT0FBTyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztnQkFDMUUsQ0FBQztZQUNILENBQUM7UUFDSCxDQUFDO0lBQ0gsQ0FBQztJQUNELEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBVztRQUN0QixJQUFJLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7WUFDN0IsQ0FBQyxDQUFBLENBQUM7UUFDSixDQUFDO2FBQU0sQ0FBQztZQUNOLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN0QixJQUFJLENBQUM7Z0JBQ0gsSUFBSSxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDO29CQUM3QixDQUFDLENBQUEsQ0FBQztnQkFDSixDQUFDO3FCQUFNLENBQUM7b0JBQ04sYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO29CQUN0QixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztvQkFDcEMsWUFBRyxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLFNBQVMsQ0FBQyxFQUFFLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxFQUFFO3dCQUNoSixHQUFHO3dCQUNILE9BQU87cUJBQ1IsQ0FBQyxDQUFDLENBQUM7b0JBQ0osT0FBTyxPQUFPLENBQUM7Z0JBQ2pCLENBQUM7WUFDSCxDQUFDO1lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztnQkFDZixJQUFJLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7b0JBQzdCLENBQUMsQ0FBQSxDQUFDO2dCQUNKLENBQUM7cUJBQU0sQ0FBQztvQkFDTixhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7b0JBQ3RCLFlBQUcsQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsSUFBSSxlQUFlLENBQUMsRUFBRSxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsRUFBRTt3QkFDdEosR0FBRzt3QkFDSCxLQUFLO3FCQUNOLENBQUMsQ0FBQyxDQUFDO29CQUNKLE9BQU8sQ0FBQyxDQUFDO2dCQUNYLENBQUM7WUFDSCxDQUFDO1FBQ0gsQ0FBQztJQUNILENBQUM7SUFDRCxLQUFLLENBQUMsS0FBSztRQUNULElBQUksZ0JBQWdCLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQztZQUM3QixDQUFDLENBQUEsQ0FBQztRQUNKLENBQUM7YUFBTSxDQUFDO1lBQ04sYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3RCLElBQUksQ0FBQztnQkFDSCxJQUFJLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7b0JBQzdCLENBQUMsQ0FBQSxDQUFDO2dCQUNKLENBQUM7cUJBQU0sQ0FBQztvQkFDTixhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7b0JBQ3RCLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7b0JBQ3RCLFlBQUcsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsSUFBSSxZQUFZLENBQUMsQ0FBQyxDQUFDO2dCQUM5RixDQUFDO1lBQ0gsQ0FBQztZQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7Z0JBQ2YsSUFBSSxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDO29CQUM3QixDQUFDLENBQUEsQ0FBQztnQkFDSixDQUFDO3FCQUFNLENBQUM7b0JBQ04sYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO29CQUN0QixZQUFHLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksY0FBYyxDQUFDLEVBQUUsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7d0JBQ3JKLEtBQUs7cUJBQ04sQ0FBQyxDQUFDLENBQUM7Z0JBQ04sQ0FBQztZQUNILENBQUM7UUFDSCxDQUFDO0lBQ0gsQ0FBQztJQUNELEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBZ0I7UUFDekIsSUFBSSxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDO1lBQzdCLENBQUMsQ0FBQSxDQUFDO1FBQ0osQ0FBQzthQUFNLENBQUM7WUFDTixhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDdEIsSUFBSSxDQUFDO2dCQUNILElBQUksZ0JBQWdCLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQztvQkFDN0IsQ0FBQyxDQUFBLENBQUM7Z0JBQ0osQ0FBQztxQkFBTSxDQUFDO29CQUNOLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztvQkFDdEIsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztvQkFDbEMsSUFBSSxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQzt3QkFDaEssSUFBSSxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDOzRCQUM3QixDQUFDLENBQUEsQ0FBQzt3QkFDSixDQUFDOzZCQUFNLENBQUM7NEJBQ04sYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDOzRCQUN0QixPQUFPLE9BQU8sQ0FBQzt3QkFDakIsQ0FBQztvQkFDSCxDQUFDO29CQUVELG9DQUFvQztvQkFDcEMsTUFBTSxLQUFLLEdBQUcsSUFBSSxNQUFNLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ2xQLE9BQU8sZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3BMLENBQUM7WUFDSCxDQUFDO1lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztnQkFDZixJQUFJLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7b0JBQzdCLENBQUMsQ0FBQSxDQUFDO2dCQUNKLENBQUM7cUJBQU0sQ0FBQztvQkFDTixhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7b0JBQ3RCLFlBQUcsQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsSUFBSSxhQUFhLENBQUMsRUFBRSxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsRUFBRTt3QkFDcEosT0FBTzt3QkFDUCxLQUFLO3FCQUNOLENBQUMsQ0FBQyxDQUFDO29CQUNKLE9BQU8sZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7Z0JBQ3ZGLENBQUM7WUFDSCxDQUFDO1FBQ0gsQ0FBQztJQUNILENBQUM7SUFDRCxLQUFLLENBQUMsT0FBTztRQUNYLElBQUksZ0JBQWdCLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQztZQUM3QixDQUFDLENBQUEsQ0FBQztRQUNKLENBQUM7YUFBTSxDQUFDO1lBQ04sYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3RCLE9BQU8sZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyw2QkFBNkI7UUFDeEcsQ0FBQztJQUNILENBQUM7SUFDRCxLQUFLLENBQUMsS0FBSztRQUNULElBQUksZ0JBQWdCLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQztZQUM3QixDQUFDLENBQUEsQ0FBQztRQUNKLENBQUM7YUFBTSxDQUFDO1lBQ04sYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3RCLElBQUksQ0FBQztnQkFDSCxJQUFJLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7b0JBQzdCLENBQUMsQ0FBQSxDQUFDO2dCQUNKLENBQUM7cUJBQU0sQ0FBQztvQkFDTixhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7b0JBQ3RCLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7b0JBQ25CLFlBQUcsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsSUFBSSxVQUFVLENBQUMsQ0FBQyxDQUFDO2dCQUM1RixDQUFDO1lBQ0gsQ0FBQztZQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7Z0JBQ2YsSUFBSSxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDO29CQUM3QixDQUFDLENBQUEsQ0FBQztnQkFDSixDQUFDO3FCQUFNLENBQUM7b0JBQ04sYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO29CQUN0QixZQUFHLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksY0FBYyxDQUFDLEVBQUUsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7d0JBQ3JKLEtBQUs7cUJBQ04sQ0FBQyxDQUFDLENBQUM7Z0JBQ04sQ0FBQztZQUNILENBQUM7UUFDSCxDQUFDO0lBQ0gsQ0FBQztJQUVEOztPQUVHO0lBQ0gsUUFBUTtRQUNOLElBQUksZ0JBQWdCLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQztZQUM3QixDQUFDLENBQUEsQ0FBQztRQUNKLENBQUM7YUFBTSxDQUFDO1lBQ04sYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3RCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUMvQixDQUFDO0lBQ0gsQ0FBQztJQUNELE1BQU0sQ0FBQyxHQUFXO1FBQ2hCLElBQUksZ0JBQWdCLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQztZQUM3QixDQUFDLENBQUEsQ0FBQztRQUNKLENBQUM7YUFBTSxDQUFDO1lBQ04sYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3RCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDaEMsQ0FBQztJQUNILENBQUM7Q0FDRjtBQTVQRCxnREE0UEMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL2hvbWUvbWFuby9wcm9qZXRvcy9kYXRhc3VsL2xvcjAxMzgvLnN0cnlrZXItdG1wL3NhbmRib3gtRUZGMmJSL3NyYy9zaGFyZWQvdXRpbHMvY2FjaGUvTWVtb3J5Q2FjaGVBZGFwdGVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEB0cy1ub2NoZWNrXG4vLyBzcmMvc2hhcmVkL3V0aWxzL2NhY2hlL01lbW9yeUNhY2hlQWRhcHRlci50c1xuZnVuY3Rpb24gc3RyeU5TXzlmYTQ4KCkge1xuICB2YXIgZyA9IHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JyAmJiBnbG9iYWxUaGlzICYmIGdsb2JhbFRoaXMuTWF0aCA9PT0gTWF0aCAmJiBnbG9iYWxUaGlzIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG4gIHZhciBucyA9IGcuX19zdHJ5a2VyX18gfHwgKGcuX19zdHJ5a2VyX18gPSB7fSk7XG4gIGlmIChucy5hY3RpdmVNdXRhbnQgPT09IHVuZGVmaW5lZCAmJiBnLnByb2Nlc3MgJiYgZy5wcm9jZXNzLmVudiAmJiBnLnByb2Nlc3MuZW52Ll9fU1RSWUtFUl9BQ1RJVkVfTVVUQU5UX18pIHtcbiAgICBucy5hY3RpdmVNdXRhbnQgPSBnLnByb2Nlc3MuZW52Ll9fU1RSWUtFUl9BQ1RJVkVfTVVUQU5UX187XG4gIH1cbiAgZnVuY3Rpb24gcmV0cmlldmVOUygpIHtcbiAgICByZXR1cm4gbnM7XG4gIH1cbiAgc3RyeU5TXzlmYTQ4ID0gcmV0cmlldmVOUztcbiAgcmV0dXJuIHJldHJpZXZlTlMoKTtcbn1cbnN0cnlOU185ZmE0OCgpO1xuZnVuY3Rpb24gc3RyeUNvdl85ZmE0OCgpIHtcbiAgdmFyIG5zID0gc3RyeU5TXzlmYTQ4KCk7XG4gIHZhciBjb3YgPSBucy5tdXRhbnRDb3ZlcmFnZSB8fCAobnMubXV0YW50Q292ZXJhZ2UgPSB7XG4gICAgc3RhdGljOiB7fSxcbiAgICBwZXJUZXN0OiB7fVxuICB9KTtcbiAgZnVuY3Rpb24gY292ZXIoKSB7XG4gICAgdmFyIGMgPSBjb3Yuc3RhdGljO1xuICAgIGlmIChucy5jdXJyZW50VGVzdElkKSB7XG4gICAgICBjID0gY292LnBlclRlc3RbbnMuY3VycmVudFRlc3RJZF0gPSBjb3YucGVyVGVzdFtucy5jdXJyZW50VGVzdElkXSB8fCB7fTtcbiAgICB9XG4gICAgdmFyIGEgPSBhcmd1bWVudHM7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjW2FbaV1dID0gKGNbYVtpXV0gfHwgMCkgKyAxO1xuICAgIH1cbiAgfVxuICBzdHJ5Q292XzlmYTQ4ID0gY292ZXI7XG4gIGNvdmVyLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG59XG5mdW5jdGlvbiBzdHJ5TXV0QWN0XzlmYTQ4KGlkKSB7XG4gIHZhciBucyA9IHN0cnlOU185ZmE0OCgpO1xuICBmdW5jdGlvbiBpc0FjdGl2ZShpZCkge1xuICAgIGlmIChucy5hY3RpdmVNdXRhbnQgPT09IGlkKSB7XG4gICAgICBpZiAobnMuaGl0Q291bnQgIT09IHZvaWQgMCAmJiArK25zLmhpdENvdW50ID4gbnMuaGl0TGltaXQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTdHJ5a2VyOiBIaXQgY291bnQgbGltaXQgcmVhY2hlZCAoJyArIG5zLmhpdENvdW50ICsgJyknKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc3RyeU11dEFjdF85ZmE0OCA9IGlzQWN0aXZlO1xuICByZXR1cm4gaXNBY3RpdmUoaWQpO1xufVxuaW1wb3J0IE5vZGVDYWNoZSBmcm9tICdub2RlLWNhY2hlJztcbmltcG9ydCB7IENhY2hlQWRhcHRlciB9IGZyb20gJy4vQ2FjaGVBZGFwdGVyJztcbmltcG9ydCB7IGxvZyB9IGZyb20gJy4uL2xvZ2dlcic7XG5cbi8qKlxuICogQWRhcHRhZG9yIGRlIGNhY2hlIGVtIG1lbcOzcmlhIChMMSlcbiAqIC0gVWx0cmEgcsOhcGlkbyAoYWNlc3NvIGxvY2FsKVxuICogLSBWb2zDoXRpbCAocGVyZGUgZGFkb3MgYW8gcmVpbmljaWFyKVxuICogLSBOw6NvIGNvbXBhcnRpbGhhZG8gZW50cmUgaW5zdMOibmNpYXNcbiAqL1xuZXhwb3J0IGNsYXNzIE1lbW9yeUNhY2hlQWRhcHRlciBpbXBsZW1lbnRzIENhY2hlQWRhcHRlciB7XG4gIHByaXZhdGUgY2FjaGU6IE5vZGVDYWNoZTtcbiAgcHJpdmF0ZSBuYW1lOiBzdHJpbmc7XG4gIGNvbnN0cnVjdG9yKHN0ZFRUTDogbnVtYmVyID0gMzAwLCBuYW1lOiBzdHJpbmcgPSBzdHJ5TXV0QWN0XzlmYTQ4KFwiMzUzMVwiKSA/IFwiXCIgOiAoc3RyeUNvdl85ZmE0OChcIjM1MzFcIiksICdMMS1NZW1vcnknKSkge1xuICAgIGlmIChzdHJ5TXV0QWN0XzlmYTQ4KFwiMzUzMlwiKSkge1xuICAgICAge31cbiAgICB9IGVsc2Uge1xuICAgICAgc3RyeUNvdl85ZmE0OChcIjM1MzJcIik7XG4gICAgICB0aGlzLmNhY2hlID0gbmV3IE5vZGVDYWNoZShzdHJ5TXV0QWN0XzlmYTQ4KFwiMzUzM1wiKSA/IHt9IDogKHN0cnlDb3ZfOWZhNDgoXCIzNTMzXCIpLCB7XG4gICAgICAgIHN0ZFRUTCxcbiAgICAgICAgY2hlY2twZXJpb2Q6IDEyMCxcbiAgICAgICAgLy8gVmVyaWZpY2EgZXhwaXJhw6fDo28gYSBjYWRhIDJtaW5cbiAgICAgICAgdXNlQ2xvbmVzOiBzdHJ5TXV0QWN0XzlmYTQ4KFwiMzUzNFwiKSA/IHRydWUgOiAoc3RyeUNvdl85ZmE0OChcIjM1MzRcIiksIGZhbHNlKSAvLyBQZXJmb3JtYW5jZTogbsOjbyBjbG9uYSBvYmpldG9zXG4gICAgICB9KSk7XG4gICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgbG9nLmluZm8oc3RyeU11dEFjdF85ZmE0OChcIjM1MzVcIikgPyBgYCA6IChzdHJ5Q292XzlmYTQ4KFwiMzUzNVwiKSwgYCR7dGhpcy5uYW1lfSBjYWNoZSBpbmljaWFsaXphZG9gKSwgc3RyeU11dEFjdF85ZmE0OChcIjM1MzZcIikgPyB7fSA6IChzdHJ5Q292XzlmYTQ4KFwiMzUzNlwiKSwge1xuICAgICAgICB0dGw6IHN0ZFRUTCxcbiAgICAgICAgY2hlY2tQZXJpb2Q6IDEyMFxuICAgICAgfSkpO1xuICAgIH1cbiAgfVxuICBhc3luYyBnZXQ8VD4oa2V5OiBzdHJpbmcpOiBQcm9taXNlPFQgfCB1bmRlZmluZWQ+IHtcbiAgICBpZiAoc3RyeU11dEFjdF85ZmE0OChcIjM1MzdcIikpIHtcbiAgICAgIHt9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0cnlDb3ZfOWZhNDgoXCIzNTM3XCIpO1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKHN0cnlNdXRBY3RfOWZhNDgoXCIzNTM4XCIpKSB7XG4gICAgICAgICAge31cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdHJ5Q292XzlmYTQ4KFwiMzUzOFwiKTtcbiAgICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuY2FjaGUuZ2V0PFQ+KGtleSk7XG4gICAgICAgICAgaWYgKHN0cnlNdXRBY3RfOWZhNDgoXCIzNTQxXCIpID8gdmFsdWUgPT09IHVuZGVmaW5lZCA6IHN0cnlNdXRBY3RfOWZhNDgoXCIzNTQwXCIpID8gZmFsc2UgOiBzdHJ5TXV0QWN0XzlmYTQ4KFwiMzUzOVwiKSA/IHRydWUgOiAoc3RyeUNvdl85ZmE0OChcIjM1MzlcIiwgXCIzNTQwXCIsIFwiMzU0MVwiKSwgdmFsdWUgIT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgICAgIGlmIChzdHJ5TXV0QWN0XzlmYTQ4KFwiMzU0MlwiKSkge1xuICAgICAgICAgICAgICB7fVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc3RyeUNvdl85ZmE0OChcIjM1NDJcIik7XG4gICAgICAgICAgICAgIGxvZy5kZWJ1ZyhzdHJ5TXV0QWN0XzlmYTQ4KFwiMzU0M1wiKSA/IGBgIDogKHN0cnlDb3ZfOWZhNDgoXCIzNTQzXCIpLCBgJHt0aGlzLm5hbWV9IEhJVGApLCBzdHJ5TXV0QWN0XzlmYTQ4KFwiMzU0NFwiKSA/IHt9IDogKHN0cnlDb3ZfOWZhNDgoXCIzNTQ0XCIpLCB7XG4gICAgICAgICAgICAgICAga2V5XG4gICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHN0cnlNdXRBY3RfOWZhNDgoXCIzNTQ1XCIpKSB7XG4gICAgICAgICAgICAgIHt9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzdHJ5Q292XzlmYTQ4KFwiMzU0NVwiKTtcbiAgICAgICAgICAgICAgbG9nLmRlYnVnKHN0cnlNdXRBY3RfOWZhNDgoXCIzNTQ2XCIpID8gYGAgOiAoc3RyeUNvdl85ZmE0OChcIjM1NDZcIiksIGAke3RoaXMubmFtZX0gTUlTU2ApLCBzdHJ5TXV0QWN0XzlmYTQ4KFwiMzU0N1wiKSA/IHt9IDogKHN0cnlDb3ZfOWZhNDgoXCIzNTQ3XCIpLCB7XG4gICAgICAgICAgICAgICAga2V5XG4gICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBpZiAoc3RyeU11dEFjdF85ZmE0OChcIjM1NDhcIikpIHtcbiAgICAgICAgICB7fVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0cnlDb3ZfOWZhNDgoXCIzNTQ4XCIpO1xuICAgICAgICAgIGxvZy5lcnJvcihzdHJ5TXV0QWN0XzlmYTQ4KFwiMzU0OVwiKSA/IGBgIDogKHN0cnlDb3ZfOWZhNDgoXCIzNTQ5XCIpLCBgJHt0aGlzLm5hbWV9IEdFVCBlcnJvcmApLCBzdHJ5TXV0QWN0XzlmYTQ4KFwiMzU1MFwiKSA/IHt9IDogKHN0cnlDb3ZfOWZhNDgoXCIzNTUwXCIpLCB7XG4gICAgICAgICAgICBrZXksXG4gICAgICAgICAgICBlcnJvclxuICAgICAgICAgIH0pKTtcbiAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGFzeW5jIHNldDxUPihrZXk6IHN0cmluZywgdmFsdWU6IFQsIHR0bD86IG51bWJlcik6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIGlmIChzdHJ5TXV0QWN0XzlmYTQ4KFwiMzU1MVwiKSkge1xuICAgICAge31cbiAgICB9IGVsc2Uge1xuICAgICAgc3RyeUNvdl85ZmE0OChcIjM1NTFcIik7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoc3RyeU11dEFjdF85ZmE0OChcIjM1NTJcIikpIHtcbiAgICAgICAgICB7fVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0cnlDb3ZfOWZhNDgoXCIzNTUyXCIpO1xuICAgICAgICAgIGNvbnN0IHN1Y2Nlc3MgPSB0dGwgPyB0aGlzLmNhY2hlLnNldChrZXksIHZhbHVlLCB0dGwpIDogdGhpcy5jYWNoZS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgaWYgKHN0cnlNdXRBY3RfOWZhNDgoXCIzNTU0XCIpID8gZmFsc2UgOiBzdHJ5TXV0QWN0XzlmYTQ4KFwiMzU1M1wiKSA/IHRydWUgOiAoc3RyeUNvdl85ZmE0OChcIjM1NTNcIiwgXCIzNTU0XCIpLCBzdWNjZXNzKSkge1xuICAgICAgICAgICAgaWYgKHN0cnlNdXRBY3RfOWZhNDgoXCIzNTU1XCIpKSB7XG4gICAgICAgICAgICAgIHt9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzdHJ5Q292XzlmYTQ4KFwiMzU1NVwiKTtcbiAgICAgICAgICAgICAgbG9nLmRlYnVnKHN0cnlNdXRBY3RfOWZhNDgoXCIzNTU2XCIpID8gYGAgOiAoc3RyeUNvdl85ZmE0OChcIjM1NTZcIiksIGAke3RoaXMubmFtZX0gU0VUYCksIHN0cnlNdXRBY3RfOWZhNDgoXCIzNTU3XCIpID8ge30gOiAoc3RyeUNvdl85ZmE0OChcIjM1NTdcIiksIHtcbiAgICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgICAgdHRsXG4gICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHN1Y2Nlc3M7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGlmIChzdHJ5TXV0QWN0XzlmYTQ4KFwiMzU1OFwiKSkge1xuICAgICAgICAgIHt9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RyeUNvdl85ZmE0OChcIjM1NThcIik7XG4gICAgICAgICAgbG9nLmVycm9yKHN0cnlNdXRBY3RfOWZhNDgoXCIzNTU5XCIpID8gYGAgOiAoc3RyeUNvdl85ZmE0OChcIjM1NTlcIiksIGAke3RoaXMubmFtZX0gU0VUIGVycm9yYCksIHN0cnlNdXRBY3RfOWZhNDgoXCIzNTYwXCIpID8ge30gOiAoc3RyeUNvdl85ZmE0OChcIjM1NjBcIiksIHtcbiAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgIGVycm9yXG4gICAgICAgICAgfSkpO1xuICAgICAgICAgIHJldHVybiBzdHJ5TXV0QWN0XzlmYTQ4KFwiMzU2MVwiKSA/IHRydWUgOiAoc3RyeUNvdl85ZmE0OChcIjM1NjFcIiksIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBhc3luYyBkZWxldGUoa2V5OiBzdHJpbmcpOiBQcm9taXNlPG51bWJlcj4ge1xuICAgIGlmIChzdHJ5TXV0QWN0XzlmYTQ4KFwiMzU2MlwiKSkge1xuICAgICAge31cbiAgICB9IGVsc2Uge1xuICAgICAgc3RyeUNvdl85ZmE0OChcIjM1NjJcIik7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoc3RyeU11dEFjdF85ZmE0OChcIjM1NjNcIikpIHtcbiAgICAgICAgICB7fVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0cnlDb3ZfOWZhNDgoXCIzNTYzXCIpO1xuICAgICAgICAgIGNvbnN0IGRlbGV0ZWQgPSB0aGlzLmNhY2hlLmRlbChrZXkpO1xuICAgICAgICAgIGxvZy5kZWJ1ZyhzdHJ5TXV0QWN0XzlmYTQ4KFwiMzU2NFwiKSA/IGBgIDogKHN0cnlDb3ZfOWZhNDgoXCIzNTY0XCIpLCBgJHt0aGlzLm5hbWV9IERFTEVURWApLCBzdHJ5TXV0QWN0XzlmYTQ4KFwiMzU2NVwiKSA/IHt9IDogKHN0cnlDb3ZfOWZhNDgoXCIzNTY1XCIpLCB7XG4gICAgICAgICAgICBrZXksXG4gICAgICAgICAgICBkZWxldGVkXG4gICAgICAgICAgfSkpO1xuICAgICAgICAgIHJldHVybiBkZWxldGVkO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBpZiAoc3RyeU11dEFjdF85ZmE0OChcIjM1NjZcIikpIHtcbiAgICAgICAgICB7fVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0cnlDb3ZfOWZhNDgoXCIzNTY2XCIpO1xuICAgICAgICAgIGxvZy5lcnJvcihzdHJ5TXV0QWN0XzlmYTQ4KFwiMzU2N1wiKSA/IGBgIDogKHN0cnlDb3ZfOWZhNDgoXCIzNTY3XCIpLCBgJHt0aGlzLm5hbWV9IERFTEVURSBlcnJvcmApLCBzdHJ5TXV0QWN0XzlmYTQ4KFwiMzU2OFwiKSA/IHt9IDogKHN0cnlDb3ZfOWZhNDgoXCIzNTY4XCIpLCB7XG4gICAgICAgICAgICBrZXksXG4gICAgICAgICAgICBlcnJvclxuICAgICAgICAgIH0pKTtcbiAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBhc3luYyBmbHVzaCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBpZiAoc3RyeU11dEFjdF85ZmE0OChcIjM1NjlcIikpIHtcbiAgICAgIHt9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0cnlDb3ZfOWZhNDgoXCIzNTY5XCIpO1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKHN0cnlNdXRBY3RfOWZhNDgoXCIzNTcwXCIpKSB7XG4gICAgICAgICAge31cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdHJ5Q292XzlmYTQ4KFwiMzU3MFwiKTtcbiAgICAgICAgICB0aGlzLmNhY2hlLmZsdXNoQWxsKCk7XG4gICAgICAgICAgbG9nLmluZm8oc3RyeU11dEFjdF85ZmE0OChcIjM1NzFcIikgPyBgYCA6IChzdHJ5Q292XzlmYTQ4KFwiMzU3MVwiKSwgYCR7dGhpcy5uYW1lfSBGTFVTSCBBTExgKSk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGlmIChzdHJ5TXV0QWN0XzlmYTQ4KFwiMzU3MlwiKSkge1xuICAgICAgICAgIHt9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RyeUNvdl85ZmE0OChcIjM1NzJcIik7XG4gICAgICAgICAgbG9nLmVycm9yKHN0cnlNdXRBY3RfOWZhNDgoXCIzNTczXCIpID8gYGAgOiAoc3RyeUNvdl85ZmE0OChcIjM1NzNcIiksIGAke3RoaXMubmFtZX0gRkxVU0ggZXJyb3JgKSwgc3RyeU11dEFjdF85ZmE0OChcIjM1NzRcIikgPyB7fSA6IChzdHJ5Q292XzlmYTQ4KFwiMzU3NFwiKSwge1xuICAgICAgICAgICAgZXJyb3JcbiAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgYXN5bmMga2V5cyhwYXR0ZXJuPzogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xuICAgIGlmIChzdHJ5TXV0QWN0XzlmYTQ4KFwiMzU3NVwiKSkge1xuICAgICAge31cbiAgICB9IGVsc2Uge1xuICAgICAgc3RyeUNvdl85ZmE0OChcIjM1NzVcIik7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoc3RyeU11dEFjdF85ZmE0OChcIjM1NzZcIikpIHtcbiAgICAgICAgICB7fVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0cnlDb3ZfOWZhNDgoXCIzNTc2XCIpO1xuICAgICAgICAgIGNvbnN0IGFsbEtleXMgPSB0aGlzLmNhY2hlLmtleXMoKTtcbiAgICAgICAgICBpZiAoc3RyeU11dEFjdF85ZmE0OChcIjM1NzlcIikgPyBmYWxzZSA6IHN0cnlNdXRBY3RfOWZhNDgoXCIzNTc4XCIpID8gdHJ1ZSA6IHN0cnlNdXRBY3RfOWZhNDgoXCIzNTc3XCIpID8gcGF0dGVybiA6IChzdHJ5Q292XzlmYTQ4KFwiMzU3N1wiLCBcIjM1NzhcIiwgXCIzNTc5XCIpLCAhcGF0dGVybikpIHtcbiAgICAgICAgICAgIGlmIChzdHJ5TXV0QWN0XzlmYTQ4KFwiMzU4MFwiKSkge1xuICAgICAgICAgICAgICB7fVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc3RyeUNvdl85ZmE0OChcIjM1ODBcIik7XG4gICAgICAgICAgICAgIHJldHVybiBhbGxLZXlzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIENvbnZlcnRlIHBhdHRlcm4gY29tICogcGFyYSByZWdleFxuICAgICAgICAgIGNvbnN0IHJlZ2V4ID0gbmV3IFJlZ0V4cCgoc3RyeU11dEFjdF85ZmE0OChcIjM1ODFcIikgPyBcIlwiIDogKHN0cnlDb3ZfOWZhNDgoXCIzNTgxXCIpLCAnXicpKSArIHBhdHRlcm4ucmVwbGFjZSgvXFwqL2csIHN0cnlNdXRBY3RfOWZhNDgoXCIzNTgyXCIpID8gXCJcIiA6IChzdHJ5Q292XzlmYTQ4KFwiMzU4MlwiKSwgJy4qJykpICsgKHN0cnlNdXRBY3RfOWZhNDgoXCIzNTgzXCIpID8gXCJcIiA6IChzdHJ5Q292XzlmYTQ4KFwiMzU4M1wiKSwgJyQnKSkpO1xuICAgICAgICAgIHJldHVybiBzdHJ5TXV0QWN0XzlmYTQ4KFwiMzU4NFwiKSA/IGFsbEtleXMgOiAoc3RyeUNvdl85ZmE0OChcIjM1ODRcIiksIGFsbEtleXMuZmlsdGVyKHN0cnlNdXRBY3RfOWZhNDgoXCIzNTg1XCIpID8gKCkgPT4gdW5kZWZpbmVkIDogKHN0cnlDb3ZfOWZhNDgoXCIzNTg1XCIpLCBrZXkgPT4gcmVnZXgudGVzdChrZXkpKSkpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBpZiAoc3RyeU11dEFjdF85ZmE0OChcIjM1ODZcIikpIHtcbiAgICAgICAgICB7fVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0cnlDb3ZfOWZhNDgoXCIzNTg2XCIpO1xuICAgICAgICAgIGxvZy5lcnJvcihzdHJ5TXV0QWN0XzlmYTQ4KFwiMzU4N1wiKSA/IGBgIDogKHN0cnlDb3ZfOWZhNDgoXCIzNTg3XCIpLCBgJHt0aGlzLm5hbWV9IEtFWVMgZXJyb3JgKSwgc3RyeU11dEFjdF85ZmE0OChcIjM1ODhcIikgPyB7fSA6IChzdHJ5Q292XzlmYTQ4KFwiMzU4OFwiKSwge1xuICAgICAgICAgICAgcGF0dGVybixcbiAgICAgICAgICAgIGVycm9yXG4gICAgICAgICAgfSkpO1xuICAgICAgICAgIHJldHVybiBzdHJ5TXV0QWN0XzlmYTQ4KFwiMzU4OVwiKSA/IFtcIlN0cnlrZXIgd2FzIGhlcmVcIl0gOiAoc3RyeUNvdl85ZmE0OChcIjM1ODlcIiksIFtdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBhc3luYyBpc1JlYWR5KCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIGlmIChzdHJ5TXV0QWN0XzlmYTQ4KFwiMzU5MFwiKSkge1xuICAgICAge31cbiAgICB9IGVsc2Uge1xuICAgICAgc3RyeUNvdl85ZmE0OChcIjM1OTBcIik7XG4gICAgICByZXR1cm4gc3RyeU11dEFjdF85ZmE0OChcIjM1OTFcIikgPyBmYWxzZSA6IChzdHJ5Q292XzlmYTQ4KFwiMzU5MVwiKSwgdHJ1ZSk7IC8vIE1lbcOzcmlhIHNlbXByZSBlc3TDoSBwcm9udGFcbiAgICB9XG4gIH1cbiAgYXN5bmMgY2xvc2UoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgaWYgKHN0cnlNdXRBY3RfOWZhNDgoXCIzNTkyXCIpKSB7XG4gICAgICB7fVxuICAgIH0gZWxzZSB7XG4gICAgICBzdHJ5Q292XzlmYTQ4KFwiMzU5MlwiKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChzdHJ5TXV0QWN0XzlmYTQ4KFwiMzU5M1wiKSkge1xuICAgICAgICAgIHt9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RyeUNvdl85ZmE0OChcIjM1OTNcIik7XG4gICAgICAgICAgdGhpcy5jYWNoZS5jbG9zZSgpO1xuICAgICAgICAgIGxvZy5pbmZvKHN0cnlNdXRBY3RfOWZhNDgoXCIzNTk0XCIpID8gYGAgOiAoc3RyeUNvdl85ZmE0OChcIjM1OTRcIiksIGAke3RoaXMubmFtZX0gZmVjaGFkb2ApKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgaWYgKHN0cnlNdXRBY3RfOWZhNDgoXCIzNTk1XCIpKSB7XG4gICAgICAgICAge31cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdHJ5Q292XzlmYTQ4KFwiMzU5NVwiKTtcbiAgICAgICAgICBsb2cuZXJyb3Ioc3RyeU11dEFjdF85ZmE0OChcIjM1OTZcIikgPyBgYCA6IChzdHJ5Q292XzlmYTQ4KFwiMzU5NlwiKSwgYCR7dGhpcy5uYW1lfSBDTE9TRSBlcnJvcmApLCBzdHJ5TXV0QWN0XzlmYTQ4KFwiMzU5N1wiKSA/IHt9IDogKHN0cnlDb3ZfOWZhNDgoXCIzNTk3XCIpLCB7XG4gICAgICAgICAgICBlcnJvclxuICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBNw6l0b2RvcyBleHRyYXMgZXNwZWPDrWZpY29zIGRvIE5vZGVDYWNoZVxuICAgKi9cbiAgZ2V0U3RhdHMoKSB7XG4gICAgaWYgKHN0cnlNdXRBY3RfOWZhNDgoXCIzNTk4XCIpKSB7XG4gICAgICB7fVxuICAgIH0gZWxzZSB7XG4gICAgICBzdHJ5Q292XzlmYTQ4KFwiMzU5OFwiKTtcbiAgICAgIHJldHVybiB0aGlzLmNhY2hlLmdldFN0YXRzKCk7XG4gICAgfVxuICB9XG4gIGdldFR0bChrZXk6IHN0cmluZyk6IG51bWJlciB8IHVuZGVmaW5lZCB7XG4gICAgaWYgKHN0cnlNdXRBY3RfOWZhNDgoXCIzNTk5XCIpKSB7XG4gICAgICB7fVxuICAgIH0gZWxzZSB7XG4gICAgICBzdHJ5Q292XzlmYTQ4KFwiMzU5OVwiKTtcbiAgICAgIHJldHVybiB0aGlzLmNhY2hlLmdldFR0bChrZXkpO1xuICAgIH1cbiAgfVxufSJdLCJ2ZXJzaW9uIjozfQ==