d13778e3bbb14d5acd6d816ef6c653a7
"use strict";
// @ts-nocheck
// src/infrastructure/metrics/MetricsManager.ts
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.metricsManager = exports.MetricsManager = void 0;
const prom_client_1 = __importDefault(require("prom-client"));
/**
 * Gerenciador central de m√©tricas Prometheus
 * Singleton que gerencia todas as m√©tricas da aplica√ß√£o
 */
class MetricsManager {
    constructor(config) {
        this.isInitialized = false;
        this.registry = new prom_client_1.default.Registry();
        // Labels padr√£o para todas as m√©tricas
        if (config.defaultLabels) {
            this.registry.setDefaultLabels(config.defaultLabels);
        }
        // Prefixo para todas as m√©tricas
        const prefix = config.prefix || 'lor0138_';
        // ========================================
        // üìä HTTP METRICS
        // ========================================
        this.httpRequestsTotal = new prom_client_1.default.Counter({
            name: `${prefix}http_requests_total`,
            help: 'Total de requisi√ß√µes HTTP',
            labelNames: ['method', 'route', 'status_code'],
            registers: [this.registry],
        });
        this.httpRequestDuration = new prom_client_1.default.Histogram({
            name: `${prefix}http_request_duration_seconds`,
            help: 'Dura√ß√£o das requisi√ß√µes HTTP em segundos',
            labelNames: ['method', 'route', 'status_code'],
            buckets: [0.005, 0.01, 0.025, 0.05, 0.1, 0.25, 0.5, 1, 2.5, 5, 10],
            registers: [this.registry],
        });
        this.httpRequestsInProgress = new prom_client_1.default.Gauge({
            name: `${prefix}http_requests_in_progress`,
            help: 'N√∫mero de requisi√ß√µes HTTP em andamento',
            labelNames: ['method', 'route'],
            registers: [this.registry],
        });
        // ========================================
        // üóÑÔ∏è DATABASE METRICS
        // ========================================
        this.dbQueriesTotal = new prom_client_1.default.Counter({
            name: `${prefix}db_queries_total`,
            help: 'Total de queries executadas',
            labelNames: ['database', 'operation'],
            registers: [this.registry],
        });
        this.dbQueryDuration = new prom_client_1.default.Histogram({
            name: `${prefix}db_query_duration_seconds`,
            help: 'Dura√ß√£o das queries em segundos',
            labelNames: ['database', 'operation'],
            buckets: [0.001, 0.005, 0.01, 0.025, 0.05, 0.1, 0.25, 0.5, 1, 2.5, 5],
            registers: [this.registry],
        });
        this.dbQueriesInProgress = new prom_client_1.default.Gauge({
            name: `${prefix}db_queries_in_progress`,
            help: 'N√∫mero de queries em andamento',
            labelNames: ['database'],
            registers: [this.registry],
        });
        this.dbQueryErrors = new prom_client_1.default.Counter({
            name: `${prefix}db_query_errors_total`,
            help: 'Total de erros em queries',
            labelNames: ['database', 'error_type'],
            registers: [this.registry],
        });
        this.dbConnectionsActive = new prom_client_1.default.Gauge({
            name: `${prefix}db_connections_active`,
            help: 'N√∫mero de conex√µes ativas com o banco',
            labelNames: ['database'],
            registers: [this.registry],
        });
        this.dbConnectionErrors = new prom_client_1.default.Counter({
            name: `${prefix}db_connection_errors_total`,
            help: 'Total de erros de conex√£o',
            labelNames: ['database', 'error_type'],
            registers: [this.registry],
        });
        // ========================================
        // üîí RATE LIMIT METRICS
        // ========================================
        this.rateLimitRequestsBlocked = new prom_client_1.default.Counter({
            name: `${prefix}rate_limit_requests_blocked_total`,
            help: 'Total de requisi√ß√µes bloqueadas por rate limit',
            labelNames: ['route', 'user_id', 'reason'],
            registers: [this.registry],
        });
        this.rateLimitRequestsAllowed = new prom_client_1.default.Counter({
            name: `${prefix}rate_limit_requests_allowed_total`,
            help: 'Total de requisi√ß√µes permitidas',
            labelNames: ['route', 'user_id'],
            registers: [this.registry],
        });
        // ========================================
        // ‚öïÔ∏è HEALTH METRICS
        // ========================================
        this.healthCheckStatus = new prom_client_1.default.Gauge({
            name: `${prefix}health_check_status`,
            help: 'Status do health check (1 = healthy, 0 = unhealthy)',
            labelNames: ['component'],
            registers: [this.registry],
        });
        this.healthCheckDuration = new prom_client_1.default.Histogram({
            name: `${prefix}health_check_duration_seconds`,
            help: 'Dura√ß√£o do health check em segundos',
            labelNames: ['component'],
            buckets: [0.001, 0.005, 0.01, 0.025, 0.05, 0.1],
            registers: [this.registry],
        });
        // ========================================
        // üíª SYSTEM METRICS (Node.js default)
        // ========================================
        if (config.collectDefaultMetrics !== false) {
            prom_client_1.default.collectDefaultMetrics({
                register: this.registry,
                prefix,
            });
        }
        this.isInitialized = true;
        console.log('‚úÖ MetricsManager inicializado');
    }
    /**
     * Retorna inst√¢ncia singleton
     */
    static getInstance(config) {
        if (!this.instance) {
            const defaultConfig = {
                enabled: true,
                collectDefaultMetrics: true,
                prefix: 'lor0138_',
                defaultLabels: {
                    app: 'lor0138',
                    environment: process.env.NODE_ENV || 'development',
                    version: process.env.npm_package_version || '1.0.0',
                },
            };
            this.instance = new MetricsManager({ ...defaultConfig, ...config });
        }
        return this.instance;
    }
    /**
     * Retorna as m√©tricas no formato Prometheus
     */
    async getMetrics() {
        return this.registry.metrics();
    }
    /**
     * Retorna o registro para uso externo
     */
    getRegistry() {
        return this.registry;
    }
    /**
     * Reseta todas as m√©tricas (√∫til para testes)
     */
    reset() {
        this.registry.resetMetrics();
    }
    /**
     * Verifica se est√° inicializado
     */
    isReady() {
        return this.isInitialized;
    }
    /**
     * Registra m√©trica customizada
     */
    registerCustomMetric(metric) {
        this.registry.registerMetric(metric);
    }
}
exports.MetricsManager = MetricsManager;
MetricsManager.instance = null;
// Export singleton instance
exports.metricsManager = MetricsManager.getInstance();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,