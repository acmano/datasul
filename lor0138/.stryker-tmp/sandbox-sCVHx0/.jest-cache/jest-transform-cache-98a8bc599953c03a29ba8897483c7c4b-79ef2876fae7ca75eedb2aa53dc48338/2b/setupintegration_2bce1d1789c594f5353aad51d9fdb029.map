{"file":"/home/mano/projetos/datasul/lor0138/tests/setup.integration.ts","mappings":";AAAA,6BAA6B;AAC7B,4DAA4D;;AAE5D,+DAA+D;AAE/D,2CAA2C;AAC3C,yCAAyC;AACzC,2CAA2C;AAC3C,8CAA8C;AAC9C,uCAAuC;AAEvC,2CAA2C;AAC3C,8BAA8B;AAC9B,2CAA2C;AAC3C,6CAA6C;AAC7C,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,cAAc;AAEtC,2CAA2C;AAC3C,gDAAgD;AAChD,2CAA2C;AAC3C,SAAS,CAAC,KAAK,IAAI,EAAE;IACnB,OAAO,CAAC,GAAG,CAAC,0CAA0C,CAAC,CAAC;IAExD,MAAM,oCAAkB,CAAC,UAAU,EAAE,CAAC;IAEtC,IAAI,oCAAkB,CAAC,mBAAmB,EAAE,EAAE,CAAC;QAC7C,OAAO,CAAC,GAAG,CAAC,sDAAsD,CAAC,CAAC;IACtE,CAAC;SAAM,CAAC;QACN,OAAO,CAAC,GAAG,CAAC,kDAAkD,CAAC,CAAC;IAClE,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,2CAA2C;AAC3C,kCAAkC;AAClC,2CAA2C;AAC3C,QAAQ,CAAC,KAAK,IAAI,EAAE;IAClB,OAAO,CAAC,GAAG,CAAC,mCAAmC,CAAC,CAAC;IACjD,MAAM,oCAAkB,CAAC,OAAO,EAAE,CAAC;IAEnC,4CAA4C;IAC5C,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;AAC1D,CAAC,CAAC,CAAC;AAEH,2CAA2C;AAC3C,wCAAwC;AACxC,2CAA2C;AAC3C,SAAS,CAAC,GAAG,EAAE;IACb,oCAAoC;IACpC,IAAI,CAAC,aAAa,EAAE,CAAC;AACvB,CAAC,CAAC,CAAC;AAEH,2CAA2C;AAC3C,2CAA2C;AAC3C,2CAA2C;AAC3C,MAAM,CAAC,MAAM,CAAC;IACZ;;OAEG;IACH,wBAAwB,CAAC,QAAa;QACpC,gDAAgD;QAChD,IAAI,CAAC,oCAAkB,CAAC,mBAAmB,EAAE,EAAE,CAAC;YAC9C,OAAO;gBACL,IAAI,EAAE,IAAI;gBACV,OAAO,EAAE,GAAG,EAAE,CAAC,2BAA2B;aAC3C,CAAC;QACJ,CAAC;QAED,0CAA0C;QAC1C,MAAM,WAAW,GAAG,QAAQ;YAC1B,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,OAAO,QAAQ,KAAK,QAAQ,CAAC,CAAC;QAE5D,OAAO;YACL,IAAI,EAAE,WAAW;YACjB,OAAO,EAAE,GAAG,EAAE,CAAC,WAAW;gBACxB,CAAC,CAAC,sCAAsC;gBACxC,CAAC,CAAC,uCAAuC;SAC5C,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,eAAe,CAAC,QAAgB,EAAE,KAAa;QAC7C,MAAM,IAAI,GAAG,QAAQ,IAAI,KAAK,CAAC;QAE/B,OAAO;YACL,IAAI;YACJ,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI;gBACjB,CAAC,CAAC,gBAAgB,QAAQ,iBAAiB,KAAK,KAAK;gBACrD,CAAC,CAAC,gBAAgB,QAAQ,oBAAoB,KAAK,KAAK;SAC3D,CAAC;IACJ,CAAC;CACF,CAAC,CAAC;AAcH,2CAA2C;AAC3C,yBAAyB;AACzB,2CAA2C;AAC3C,oCAAoC;AACnC,MAAc,CAAC,kBAAkB,GAAG,oCAAkB,CAAC;AAExD,OAAO,CAAC,GAAG,CAAC,4CAA4C,CAAC,CAAC","names":[],"sources":["/home/mano/projetos/datasul/lor0138/tests/setup.integration.ts"],"sourcesContent":["// tests/setup.integration.ts\n// Setup ESPEC√çFICO para testes de integra√ß√£o com banco real\n\nimport { DatabaseTestHelper } from './helpers/database.helper';\n\n// ========================================\n// 1. DESABILITAR MOCKS DE TESTE UNIT√ÅRIO\n// ========================================\n// N√ÉO mockar o logger em testes de integra√ß√£o\n// (queremos ver logs reais de conex√£o)\n\n// ========================================\n// 2. CONFIGURAR TIMEOUT MAIOR\n// ========================================\n// Testes de integra√ß√£o podem ser mais lentos\njest.setTimeout(30000); // 30 segundos\n\n// ========================================\n// 3. INICIALIZAR BANCO ANTES DE TODOS OS TESTES\n// ========================================\nbeforeAll(async () => {\n  console.log('üîß Inicializando testes de integra√ß√£o...');\n  \n  await DatabaseTestHelper.initialize();\n  \n  if (DatabaseTestHelper.isUsingRealDatabase()) {\n    console.log('‚úÖ Usando banco REAL - Testes de integra√ß√£o completos');\n  } else {\n    console.log('‚ö†Ô∏è  Usando MOCK - Testes de integra√ß√£o limitados');\n  }\n});\n\n// ========================================\n// 4. CLEANUP AP√ìS TODOS OS TESTES\n// ========================================\nafterAll(async () => {\n  console.log('üßπ Limpando recursos de testes...');\n  await DatabaseTestHelper.cleanup();\n  \n  // Aguarda processos ass√≠ncronos finalizarem\n  await new Promise(resolve => setTimeout(resolve, 1000));\n});\n\n// ========================================\n// 5. RESET ENTRE TESTES (se necess√°rio)\n// ========================================\nafterEach(() => {\n  // Limpar mocks se algum teste criar\n  jest.clearAllMocks();\n});\n\n// ========================================\n// 6. MATCHERS CUSTOMIZADOS PARA INTEGRA√á√ÉO\n// ========================================\nexpect.extend({\n  /**\n   * Verifica se resposta veio do banco real\n   */\n  toBeRealDatabaseResponse(received: any) {\n    // Se estamos usando mock, aceita qualquer coisa\n    if (!DatabaseTestHelper.isUsingRealDatabase()) {\n      return {\n        pass: true,\n        message: () => 'Usando mock, teste pulado'\n      };\n    }\n\n    // Verifica se tem estrutura de dados real\n    const hasRealData = received && \n      (Array.isArray(received) || typeof received === 'object');\n\n    return {\n      pass: hasRealData,\n      message: () => hasRealData\n        ? 'Resposta cont√©m dados reais do banco'\n        : 'Resposta n√£o parece vir do banco real'\n    };\n  },\n\n  /**\n   * Verifica se tempo de resposta √© aceit√°vel\n   */\n  toRespondWithin(received: number, maxMs: number) {\n    const pass = received <= maxMs;\n    \n    return {\n      pass,\n      message: () => pass\n        ? `Respondeu em ${received}ms (dentro de ${maxMs}ms)`\n        : `Respondeu em ${received}ms (esperado max ${maxMs}ms)`\n    };\n  },\n});\n\n// ========================================\n// 7. DECLARA√á√ÉO DE TIPOS\n// ========================================\ndeclare global {\n  namespace jest {\n    interface Matchers<R> {\n      toBeRealDatabaseResponse(): R;\n      toRespondWithin(maxMs: number): R;\n    }\n  }\n}\n\n// ========================================\n// 8. UTILIT√ÅRIOS GLOBAIS\n// ========================================\n// Disponibilizar helper globalmente\n(global as any).DatabaseTestHelper = DatabaseTestHelper;\n\nconsole.log('üß™ Setup de testes de integra√ß√£o carregado');\n\nexport {};"],"version":3}