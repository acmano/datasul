236cf6fcf71b62b6a9b16d1b75dbc4b4
"use strict";
// tests/setup.integration.ts
// Setup ESPEC√çFICO para testes de integra√ß√£o com banco real
Object.defineProperty(exports, "__esModule", { value: true });
// ========================================
// 1. MOCK DO UUID (resolve problema ESM)
// ========================================
jest.mock('uuid', () => ({
    v4: jest.fn(() => 'test-uuid-integration-1234'),
}));
const database_helper_1 = require("./helpers/database.helper");
// ========================================
// 2. CONFIGURAR TIMEOUT MAIOR
// ========================================
// Testes de integra√ß√£o podem ser mais lentos
jest.setTimeout(30000); // 30 segundos
// ========================================
// 3. INICIALIZAR BANCO ANTES DE TODOS OS TESTES
// ========================================
beforeAll(async () => {
    console.log('üîß Inicializando testes de integra√ß√£o...');
    await database_helper_1.DatabaseTestHelper.initialize();
    if (database_helper_1.DatabaseTestHelper.isUsingRealDatabase()) {
        console.log('‚úÖ Usando banco REAL - Testes de integra√ß√£o completos');
    }
    else {
        console.log('‚ö†Ô∏è  Usando MOCK - Testes de integra√ß√£o limitados');
    }
});
// ========================================
// 4. CLEANUP AP√ìS TODOS OS TESTES
// ========================================
afterAll(async () => {
    console.log('üßπ Limpando recursos de testes...');
    await database_helper_1.DatabaseTestHelper.cleanup();
    // Aguarda processos ass√≠ncronos finalizarem
    await new Promise(resolve => setTimeout(resolve, 1000));
});
// ========================================
// 5. RESET ENTRE TESTES (se necess√°rio)
// ========================================
afterEach(() => {
    // Limpar mocks se algum teste criar
    jest.clearAllMocks();
});
// ========================================
// 6. MATCHERS CUSTOMIZADOS PARA INTEGRA√á√ÉO
// ========================================
expect.extend({
    /**
     * Verifica se resposta veio do banco real
     */
    toBeRealDatabaseResponse(received) {
        // Se estamos usando mock, aceita qualquer coisa
        if (!database_helper_1.DatabaseTestHelper.isUsingRealDatabase()) {
            return {
                pass: true,
                message: () => 'Usando mock, teste pulado'
            };
        }
        // Verifica se tem estrutura de dados real
        const hasRealData = received &&
            (Array.isArray(received) || typeof received === 'object');
        return {
            pass: hasRealData,
            message: () => hasRealData
                ? 'Resposta cont√©m dados reais do banco'
                : 'Resposta n√£o parece vir do banco real'
        };
    },
    /**
     * Verifica se tempo de resposta √© aceit√°vel
     */
    toRespondWithin(received, maxMs) {
        const pass = received <= maxMs;
        return {
            pass,
            message: () => pass
                ? `Respondeu em ${received}ms (dentro de ${maxMs}ms)`
                : `Respondeu em ${received}ms (esperado max ${maxMs}ms)`
        };
    },
});
// ========================================
// 8. UTILIT√ÅRIOS GLOBAIS
// ========================================
// Disponibilizar helper globalmente
global.DatabaseTestHelper = database_helper_1.DatabaseTestHelper;
console.log('üß™ Setup de testes de integra√ß√£o carregado');
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvbWFuby9wcm9qZXRvcy9kYXRhc3VsL2xvcjAxMzgvdGVzdHMvc2V0dXAuaW50ZWdyYXRpb24udHMiLCJtYXBwaW5ncyI6IjtBQUFBLDZCQUE2QjtBQUM3Qiw0REFBNEQ7O0FBSTVELDJDQUEyQztBQUMzQyx5Q0FBeUM7QUFDekMsMkNBQTJDO0FBQzNDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDdkIsRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsNEJBQTRCLENBQUM7Q0FDaEQsQ0FBQyxDQUFDLENBQUM7QUFQSiwrREFBK0Q7QUFTL0QsMkNBQTJDO0FBQzNDLDhCQUE4QjtBQUM5QiwyQ0FBMkM7QUFDM0MsNkNBQTZDO0FBQzdDLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxjQUFjO0FBRXRDLDJDQUEyQztBQUMzQyxnREFBZ0Q7QUFDaEQsMkNBQTJDO0FBQzNDLFNBQVMsQ0FBQyxLQUFLLElBQUksRUFBRTtJQUNuQixPQUFPLENBQUMsR0FBRyxDQUFDLDBDQUEwQyxDQUFDLENBQUM7SUFFeEQsTUFBTSxvQ0FBa0IsQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUV0QyxJQUFJLG9DQUFrQixDQUFDLG1CQUFtQixFQUFFLEVBQUUsQ0FBQztRQUM3QyxPQUFPLENBQUMsR0FBRyxDQUFDLHNEQUFzRCxDQUFDLENBQUM7SUFDdEUsQ0FBQztTQUFNLENBQUM7UUFDTixPQUFPLENBQUMsR0FBRyxDQUFDLGtEQUFrRCxDQUFDLENBQUM7SUFDbEUsQ0FBQztBQUNILENBQUMsQ0FBQyxDQUFDO0FBRUgsMkNBQTJDO0FBQzNDLGtDQUFrQztBQUNsQywyQ0FBMkM7QUFDM0MsUUFBUSxDQUFDLEtBQUssSUFBSSxFQUFFO0lBQ2xCLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUNBQW1DLENBQUMsQ0FBQztJQUNqRCxNQUFNLG9DQUFrQixDQUFDLE9BQU8sRUFBRSxDQUFDO0lBRW5DLDRDQUE0QztJQUM1QyxNQUFNLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQzFELENBQUMsQ0FBQyxDQUFDO0FBRUgsMkNBQTJDO0FBQzNDLHdDQUF3QztBQUN4QywyQ0FBMkM7QUFDM0MsU0FBUyxDQUFDLEdBQUcsRUFBRTtJQUNiLG9DQUFvQztJQUNwQyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7QUFDdkIsQ0FBQyxDQUFDLENBQUM7QUFFSCwyQ0FBMkM7QUFDM0MsMkNBQTJDO0FBQzNDLDJDQUEyQztBQUMzQyxNQUFNLENBQUMsTUFBTSxDQUFDO0lBQ1o7O09BRUc7SUFDSCx3QkFBd0IsQ0FBQyxRQUFhO1FBQ3BDLGdEQUFnRDtRQUNoRCxJQUFJLENBQUMsb0NBQWtCLENBQUMsbUJBQW1CLEVBQUUsRUFBRSxDQUFDO1lBQzlDLE9BQU87Z0JBQ0wsSUFBSSxFQUFFLElBQUk7Z0JBQ1YsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLDJCQUEyQjthQUMzQyxDQUFDO1FBQ0osQ0FBQztRQUVELDBDQUEwQztRQUMxQyxNQUFNLFdBQVcsR0FBRyxRQUFRO1lBQzFCLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxPQUFPLFFBQVEsS0FBSyxRQUFRLENBQUMsQ0FBQztRQUU1RCxPQUFPO1lBQ0wsSUFBSSxFQUFFLFdBQVc7WUFDakIsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLFdBQVc7Z0JBQ3hCLENBQUMsQ0FBQyxzQ0FBc0M7Z0JBQ3hDLENBQUMsQ0FBQyx1Q0FBdUM7U0FDNUMsQ0FBQztJQUNKLENBQUM7SUFFRDs7T0FFRztJQUNILGVBQWUsQ0FBQyxRQUFnQixFQUFFLEtBQWE7UUFDN0MsTUFBTSxJQUFJLEdBQUcsUUFBUSxJQUFJLEtBQUssQ0FBQztRQUUvQixPQUFPO1lBQ0wsSUFBSTtZQUNKLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJO2dCQUNqQixDQUFDLENBQUMsZ0JBQWdCLFFBQVEsaUJBQWlCLEtBQUssS0FBSztnQkFDckQsQ0FBQyxDQUFDLGdCQUFnQixRQUFRLG9CQUFvQixLQUFLLEtBQUs7U0FDM0QsQ0FBQztJQUNKLENBQUM7Q0FDRixDQUFDLENBQUM7QUFjSCwyQ0FBMkM7QUFDM0MseUJBQXlCO0FBQ3pCLDJDQUEyQztBQUMzQyxvQ0FBb0M7QUFDbkMsTUFBYyxDQUFDLGtCQUFrQixHQUFHLG9DQUFrQixDQUFDO0FBRXhELE9BQU8sQ0FBQyxHQUFHLENBQUMsNENBQTRDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS9tYW5vL3Byb2pldG9zL2RhdGFzdWwvbG9yMDEzOC90ZXN0cy9zZXR1cC5pbnRlZ3JhdGlvbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0ZXN0cy9zZXR1cC5pbnRlZ3JhdGlvbi50c1xuLy8gU2V0dXAgRVNQRUPDjUZJQ08gcGFyYSB0ZXN0ZXMgZGUgaW50ZWdyYcOnw6NvIGNvbSBiYW5jbyByZWFsXG5cbmltcG9ydCB7IERhdGFiYXNlVGVzdEhlbHBlciB9IGZyb20gJy4vaGVscGVycy9kYXRhYmFzZS5oZWxwZXInO1xuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyAxLiBNT0NLIERPIFVVSUQgKHJlc29sdmUgcHJvYmxlbWEgRVNNKVxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuamVzdC5tb2NrKCd1dWlkJywgKCkgPT4gKHtcbiAgdjQ6IGplc3QuZm4oKCkgPT4gJ3Rlc3QtdXVpZC1pbnRlZ3JhdGlvbi0xMjM0JyksXG59KSk7XG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIDIuIENPTkZJR1VSQVIgVElNRU9VVCBNQUlPUlxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gVGVzdGVzIGRlIGludGVncmHDp8OjbyBwb2RlbSBzZXIgbWFpcyBsZW50b3Ncbmplc3Quc2V0VGltZW91dCgzMDAwMCk7IC8vIDMwIHNlZ3VuZG9zXG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIDMuIElOSUNJQUxJWkFSIEJBTkNPIEFOVEVTIERFIFRPRE9TIE9TIFRFU1RFU1xuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuYmVmb3JlQWxsKGFzeW5jICgpID0+IHtcbiAgY29uc29sZS5sb2coJ/CflKcgSW5pY2lhbGl6YW5kbyB0ZXN0ZXMgZGUgaW50ZWdyYcOnw6NvLi4uJyk7XG4gIFxuICBhd2FpdCBEYXRhYmFzZVRlc3RIZWxwZXIuaW5pdGlhbGl6ZSgpO1xuICBcbiAgaWYgKERhdGFiYXNlVGVzdEhlbHBlci5pc1VzaW5nUmVhbERhdGFiYXNlKCkpIHtcbiAgICBjb25zb2xlLmxvZygn4pyFIFVzYW5kbyBiYW5jbyBSRUFMIC0gVGVzdGVzIGRlIGludGVncmHDp8OjbyBjb21wbGV0b3MnKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zb2xlLmxvZygn4pqg77iPICBVc2FuZG8gTU9DSyAtIFRlc3RlcyBkZSBpbnRlZ3Jhw6fDo28gbGltaXRhZG9zJyk7XG4gIH1cbn0pO1xuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyA0LiBDTEVBTlVQIEFQw5NTIFRPRE9TIE9TIFRFU1RFU1xuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuYWZ0ZXJBbGwoYXN5bmMgKCkgPT4ge1xuICBjb25zb2xlLmxvZygn8J+nuSBMaW1wYW5kbyByZWN1cnNvcyBkZSB0ZXN0ZXMuLi4nKTtcbiAgYXdhaXQgRGF0YWJhc2VUZXN0SGVscGVyLmNsZWFudXAoKTtcbiAgXG4gIC8vIEFndWFyZGEgcHJvY2Vzc29zIGFzc8OtbmNyb25vcyBmaW5hbGl6YXJlbVxuICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgMTAwMCkpO1xufSk7XG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIDUuIFJFU0VUIEVOVFJFIFRFU1RFUyAoc2UgbmVjZXNzw6FyaW8pXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5hZnRlckVhY2goKCkgPT4ge1xuICAvLyBMaW1wYXIgbW9ja3Mgc2UgYWxndW0gdGVzdGUgY3JpYXJcbiAgamVzdC5jbGVhckFsbE1vY2tzKCk7XG59KTtcblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gNi4gTUFUQ0hFUlMgQ1VTVE9NSVpBRE9TIFBBUkEgSU5URUdSQcOHw4NPXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5leHBlY3QuZXh0ZW5kKHtcbiAgLyoqXG4gICAqIFZlcmlmaWNhIHNlIHJlc3Bvc3RhIHZlaW8gZG8gYmFuY28gcmVhbFxuICAgKi9cbiAgdG9CZVJlYWxEYXRhYmFzZVJlc3BvbnNlKHJlY2VpdmVkOiBhbnkpIHtcbiAgICAvLyBTZSBlc3RhbW9zIHVzYW5kbyBtb2NrLCBhY2VpdGEgcXVhbHF1ZXIgY29pc2FcbiAgICBpZiAoIURhdGFiYXNlVGVzdEhlbHBlci5pc1VzaW5nUmVhbERhdGFiYXNlKCkpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBhc3M6IHRydWUsXG4gICAgICAgIG1lc3NhZ2U6ICgpID0+ICdVc2FuZG8gbW9jaywgdGVzdGUgcHVsYWRvJ1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBWZXJpZmljYSBzZSB0ZW0gZXN0cnV0dXJhIGRlIGRhZG9zIHJlYWxcbiAgICBjb25zdCBoYXNSZWFsRGF0YSA9IHJlY2VpdmVkICYmIFxuICAgICAgKEFycmF5LmlzQXJyYXkocmVjZWl2ZWQpIHx8IHR5cGVvZiByZWNlaXZlZCA9PT0gJ29iamVjdCcpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHBhc3M6IGhhc1JlYWxEYXRhLFxuICAgICAgbWVzc2FnZTogKCkgPT4gaGFzUmVhbERhdGFcbiAgICAgICAgPyAnUmVzcG9zdGEgY29udMOpbSBkYWRvcyByZWFpcyBkbyBiYW5jbydcbiAgICAgICAgOiAnUmVzcG9zdGEgbsOjbyBwYXJlY2UgdmlyIGRvIGJhbmNvIHJlYWwnXG4gICAgfTtcbiAgfSxcblxuICAvKipcbiAgICogVmVyaWZpY2Egc2UgdGVtcG8gZGUgcmVzcG9zdGEgw6kgYWNlaXTDoXZlbFxuICAgKi9cbiAgdG9SZXNwb25kV2l0aGluKHJlY2VpdmVkOiBudW1iZXIsIG1heE1zOiBudW1iZXIpIHtcbiAgICBjb25zdCBwYXNzID0gcmVjZWl2ZWQgPD0gbWF4TXM7XG4gICAgXG4gICAgcmV0dXJuIHtcbiAgICAgIHBhc3MsXG4gICAgICBtZXNzYWdlOiAoKSA9PiBwYXNzXG4gICAgICAgID8gYFJlc3BvbmRldSBlbSAke3JlY2VpdmVkfW1zIChkZW50cm8gZGUgJHttYXhNc31tcylgXG4gICAgICAgIDogYFJlc3BvbmRldSBlbSAke3JlY2VpdmVkfW1zIChlc3BlcmFkbyBtYXggJHttYXhNc31tcylgXG4gICAgfTtcbiAgfSxcbn0pO1xuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyA3LiBERUNMQVJBw4fDg08gREUgVElQT1Ncbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbmRlY2xhcmUgZ2xvYmFsIHtcbiAgbmFtZXNwYWNlIGplc3Qge1xuICAgIGludGVyZmFjZSBNYXRjaGVyczxSPiB7XG4gICAgICB0b0JlUmVhbERhdGFiYXNlUmVzcG9uc2UoKTogUjtcbiAgICAgIHRvUmVzcG9uZFdpdGhpbihtYXhNczogbnVtYmVyKTogUjtcbiAgICB9XG4gIH1cbn1cblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gOC4gVVRJTElUw4FSSU9TIEdMT0JBSVNcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIERpc3BvbmliaWxpemFyIGhlbHBlciBnbG9iYWxtZW50ZVxuKGdsb2JhbCBhcyBhbnkpLkRhdGFiYXNlVGVzdEhlbHBlciA9IERhdGFiYXNlVGVzdEhlbHBlcjtcblxuY29uc29sZS5sb2coJ/Cfp6ogU2V0dXAgZGUgdGVzdGVzIGRlIGludGVncmHDp8OjbyBjYXJyZWdhZG8nKTtcblxuZXhwb3J0IHt9OyJdLCJ2ZXJzaW9uIjozfQ==