5ab9b9069e70d37508d1befc0a047a8c
"use strict";
// tests/unit/validators/informacoesGerais.validators.test.ts
Object.defineProperty(exports, "__esModule", { value: true });
const informacoesGerais_validators_1 = require("@api/lor0138/item/dadosCadastrais/informacoesGerais/validators/informacoesGerais.validators");
const item_factory_1 = require("../../factories/item.factory");
describe('Validators - InformacoesGerais', () => {
    describe('validateItemInformacoesGeraisRequest', () => {
        // ========================================
        // CASOS DE SUCESSO ✅
        // ========================================
        describe('Casos Válidos', () => {
            test('deve validar código numérico simples', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({ itemCodigo: '7530110' });
                expect(result.valid).toBe(true);
                expect(result.data).toEqual({ itemCodigo: '7530110' });
                expect(result.error).toBeUndefined();
            });
            test('deve validar código alfanumérico', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({ itemCodigo: 'ABC123' });
                expect(result.valid).toBe(true);
                expect(result.data?.itemCodigo).toBe('ABC123');
            });
            test('deve validar código com 16 caracteres (máximo)', () => {
                const codigo = '1234567890123456'; // 16 caracteres
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({ itemCodigo: codigo });
                expect(result.valid).toBe(true);
                expect(result.data?.itemCodigo).toBe(codigo);
            });
            test('deve validar código com 1 caractere (mínimo)', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({ itemCodigo: 'A' });
                expect(result.valid).toBe(true);
                expect(result.data?.itemCodigo).toBe('A');
            });
            test.each(item_factory_1.testItemCodigos.valid)('deve validar código válido: %s', (codigo) => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({ itemCodigo: codigo });
                expect(result.valid).toBe(true);
            });
        });
        // ========================================
        // SANITIZAÇÃO 🧹
        // ========================================
        describe('Sanitização de Entrada', () => {
            test('deve remover espaços em branco nas extremidades', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({ itemCodigo: '  7530110  ' });
                expect(result.valid).toBe(true);
                expect(result.data?.itemCodigo).toBe('7530110');
            });
            test('deve remover caracteres de controle', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({
                    itemCodigo: '7530110\x00\x1F'
                });
                expect(result.valid).toBe(true);
                expect(result.data?.itemCodigo).toBe('7530110');
            });
            test('deve remover tentativas de path traversal', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({
                    itemCodigo: '..ABC123..'
                });
                expect(result.valid).toBe(true);
                expect(result.data?.itemCodigo).toBe('ABC123'); // Remove ../
            });
            test.each(item_factory_1.testItemCodigos.sanitized)('deve sanitizar corretamente: $input → $expected', ({ input, expected }) => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({ itemCodigo: input });
                expect(result.data?.itemCodigo).toBe(expected);
            });
        });
        // ========================================
        // VALIDAÇÃO DE ERROS ❌
        // ========================================
        describe('Casos Inválidos', () => {
            test('deve rejeitar itemCodigo ausente', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({});
                expect(result.valid).toBe(false);
                expect(result.error).toBe(item_factory_1.expectedErrors.validationError);
            });
            test('deve rejeitar itemCodigo vazio', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({ itemCodigo: '' });
                expect(result.valid).toBe(false);
                expect(result.error).toContain('obrigatório');
            });
            test('deve rejeitar string com apenas espaços', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({ itemCodigo: '   ' });
                expect(result.valid).toBe(false);
                expect(result.error).toContain('inválido');
            });
            test('deve rejeitar código com mais de 16 caracteres', () => {
                const codigo = '12345678901234567'; // 17 caracteres
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({ itemCodigo: codigo });
                expect(result.valid).toBe(false);
                expect(result.error).toBe(item_factory_1.expectedErrors.maxLength);
            });
            test('deve rejeitar tipo não-string', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({ itemCodigo: 123 });
                expect(result.valid).toBe(false);
                expect(result.error).toContain('string');
            });
        });
        // ========================================
        // SEGURANÇA 🛡️ - SQL INJECTION
        // ========================================
        describe('Proteção contra SQL Injection', () => {
            test('deve bloquear SELECT statement', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({
                    itemCodigo: 'SELECT * FROM item'
                });
                expect(result.valid).toBe(false);
                expect(result.error).toBe(item_factory_1.expectedErrors.sqlInjection);
            });
            test('deve bloquear INSERT statement', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({
                    itemCodigo: 'INSERT INTO item'
                });
                expect(result.valid).toBe(false);
                expect(result.error).toBe(item_factory_1.expectedErrors.sqlInjection);
            });
            test('deve bloquear DROP statement', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({
                    itemCodigo: 'DROP TABLE item'
                });
                expect(result.valid).toBe(false);
                expect(result.error).toBe(item_factory_1.expectedErrors.sqlInjection);
            });
            test('deve bloquear UNION attack', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({
                    itemCodigo: '1 UNION SELECT password'
                });
                expect(result.valid).toBe(false);
                expect(result.error).toBe(item_factory_1.expectedErrors.sqlInjection);
            });
            test('deve remover aspas simples e duplas', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({
                    itemCodigo: "item'--"
                });
                // Aspas são removidas na sanitização
                expect(result.data?.itemCodigo).toBe('item');
            });
            test('deve remover ponto e vírgula', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({
                    itemCodigo: 'item; DROP TABLE'
                });
                // ; é removido, mas DROP TABLE ainda bloqueia
                expect(result.valid).toBe(false);
            });
        });
        // ========================================
        // SEGURANÇA 🛡️ - COMMAND INJECTION
        // ========================================
        describe('Proteção contra Command Injection', () => {
            test('deve bloquear pipe (|)', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({
                    itemCodigo: 'item|ls'
                });
                expect(result.valid).toBe(false);
                expect(result.error).toBe(item_factory_1.expectedErrors.commandInjection);
            });
            test('deve bloquear && operator', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({
                    itemCodigo: 'item&&whoami'
                });
                expect(result.valid).toBe(false);
                expect(result.error).toBe(item_factory_1.expectedErrors.commandInjection);
            });
            test('deve bloquear || operator', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({
                    itemCodigo: 'item||cat /etc/passwd'
                });
                expect(result.valid).toBe(false);
                expect(result.error).toBe(item_factory_1.expectedErrors.commandInjection);
            });
            test('deve bloquear backticks', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({
                    itemCodigo: 'item`whoami`'
                });
                expect(result.valid).toBe(false);
                expect(result.error).toBe(item_factory_1.expectedErrors.commandInjection);
            });
            test('deve bloquear $() substitution', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({
                    itemCodigo: 'item$(whoami)'
                });
                expect(result.valid).toBe(false);
                expect(result.error).toBe(item_factory_1.expectedErrors.commandInjection);
            });
        });
        // ========================================
        // SEGURANÇA 🛡️ - XSS
        // ========================================
        describe('Proteção contra XSS', () => {
            test('deve remover tags HTML', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({
                    itemCodigo: '<script>alert(1)</script>'
                });
                // Tags são removidas na sanitização
                expect(result.data?.itemCodigo).toBe('scriptalert1script');
            });
            test('deve remover tags com atributos', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({
                    itemCodigo: '<img src=x onerror=alert(1)>'
                });
                expect(result.data?.itemCodigo).toBe('imgsrcxonerroralert1');
            });
        });
        // ========================================
        // EDGE CASES 🔍
        // ========================================
        describe('Edge Cases', () => {
            test('deve aceitar apenas números', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({ itemCodigo: '123456' });
                expect(result.valid).toBe(true);
                expect(result.data?.itemCodigo).toBe('123456');
            });
            test('deve aceitar apenas letras', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({ itemCodigo: 'ABCDEF' });
                expect(result.valid).toBe(true);
                expect(result.data?.itemCodigo).toBe('ABCDEF');
            });
            test('deve aceitar mix maiúsculas e minúsculas', () => {
                const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({ itemCodigo: 'AbC123' });
                expect(result.valid).toBe(true);
                expect(result.data?.itemCodigo).toBe('AbC123');
            });
            test('deve rejeitar caracteres especiais permitidos em outros contextos', () => {
                const specialChars = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')'];
                specialChars.forEach(char => {
                    const result = (0, informacoesGerais_validators_1.validateItemInformacoesGeraisRequest)({
                        itemCodigo: `item${char}test`
                    });
                    // Caracteres especiais são removidos ou causam erro de formato
                    expect(result.valid).toBe(false);
                });
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,