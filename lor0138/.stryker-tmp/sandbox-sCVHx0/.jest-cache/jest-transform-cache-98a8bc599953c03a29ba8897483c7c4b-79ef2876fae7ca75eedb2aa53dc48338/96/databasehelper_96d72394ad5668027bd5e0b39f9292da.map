{"file":"/home/mano/projetos/datasul/lor0138/tests/helpers/database.helper.ts","mappings":"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","names":[],"sources":["/home/mano/projetos/datasul/lor0138/tests/helpers/database.helper.ts"],"sourcesContent":["// tests/helpers/database.helper.ts\n\nimport { DatabaseManager } from '@infrastructure/database/DatabaseManager';\nimport dotenv from 'dotenv';\nimport path from 'path';\n\n/**\n * Helper para testes de integração com banco real\n * \n * Gerencia conexão com banco de produção de forma segura para testes\n */\n\nexport class DatabaseTestHelper {\n  private static initialized = false;\n  private static useRealDatabase = false;\n\n  /**\n   * Inicializa conexão com banco para testes\n   * Se falhar, volta para mock automaticamente\n   */\n  static async initialize(): Promise<void> {\n    if (this.initialized) {\n      return;\n    }\n\n    // Carregar .env.test\n    dotenv.config({ path: path.resolve(process.cwd(), '.env.test') });\n\n    try {\n      // Tentar conectar ao banco real\n      await DatabaseManager.initialize();\n      \n      // Verificar se está realmente conectado\n      const status = DatabaseManager.getConnectionStatus();\n      \n      if (status.mode === 'REAL_DATABASE') {\n        this.useRealDatabase = true;\n        console.log('✅ Testes usando banco REAL de produção (somente leitura)');\n      } else {\n        this.useRealDatabase = false;\n        console.log('⚠️  Testes usando MOCK_DATA (banco não disponível)');\n      }\n\n      this.initialized = true;\n    } catch (error) {\n      console.error('❌ Erro ao conectar banco para testes, usando MOCK_DATA:', error);\n      this.useRealDatabase = false;\n      this.initialized = true;\n    }\n  }\n\n  /**\n   * Verifica se está usando banco real\n   */\n  static isUsingRealDatabase(): boolean {\n    return this.useRealDatabase;\n  }\n\n  /**\n   * Fecha conexões após testes\n   */\n  static async cleanup(): Promise<void> {\n    if (this.initialized) {\n      await DatabaseManager.close();\n      this.initialized = false;\n      this.useRealDatabase = false;\n    }\n  }\n\n  /**\n   * Executa query no banco (ou mock)\n   */\n  static async query(sql: string, params?: any[]): Promise<any> {\n    if (!this.initialized) {\n      await this.initialize();\n    }\n\n    if (params) {\n      return DatabaseManager.queryEmpWithParams(sql, params);\n    } else {\n      return DatabaseManager.queryEmp(sql);\n    }\n  }\n\n  /**\n   * Verifica se item existe no banco\n   * Útil para setup de testes\n   */\n  static async itemExists(itemCodigo: string): Promise<boolean> {\n    try {\n      const result = await DatabaseManager.queryEmpWithParams(\n        `SELECT TOP 1 item.\"it-codigo\" as itemCodigo\n         FROM OPENQUERY(PRD_EMS2EMP, \n           'SELECT \"it-codigo\" FROM pub.item WHERE \"it-codigo\" = ''${itemCodigo}'''\n         ) as item`,\n        []\n      );\n      \n      return result && result.length > 0;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  /**\n   * Busca um item real do banco para usar nos testes\n   * Se não achar, retorna um código mock\n   */\n  static async getTestItemCode(): Promise<string> {\n    if (!this.useRealDatabase) {\n      return '7530110'; // Mock conhecido\n    }\n\n    try {\n      const result = await DatabaseManager.queryEmpWithParams(\n        `SELECT TOP 1 item.\"it-codigo\" as itemCodigo\n         FROM OPENQUERY(PRD_EMS2EMP, \n           'SELECT TOP 1 \"it-codigo\" FROM pub.item'\n         ) as item`,\n        []\n      );\n\n      if (result && result.length > 0) {\n        return result[0].itemCodigo;\n      }\n    } catch (error) {\n      console.error('Erro ao buscar item de teste:', error);\n    }\n\n    return '7530110'; // Fallback\n  }\n\n  /**\n   * Retorna códigos de teste conhecidos\n   * Para diferentes cenários\n   */\n  static getKnownTestCodes() {\n    return {\n      // Item que DEVE existir em produção\n      validItem: '7530110',\n      \n      // Item que NÃO existe\n      invalidItem: 'INVALID999',\n      \n      // Item para teste de caracteres especiais\n      specialChars: 'ABC-123',\n      \n      // Item de 1 caractere\n      singleChar: 'A',\n      \n      // Item de 16 caracteres (máximo)\n      maxLength: '1234567890123456',\n    };\n  }\n\n  /**\n   * Aguarda o banco estar pronto\n   * Útil para beforeAll em testes\n   */\n  static async waitUntilReady(maxWaitMs = 5000): Promise<boolean> {\n    const startTime = Date.now();\n\n    while (Date.now() - startTime < maxWaitMs) {\n      if (DatabaseManager.isReady()) {\n        return true;\n      }\n      await new Promise(resolve => setTimeout(resolve, 100));\n    }\n\n    return false;\n  }\n\n  /**\n   * Reseta estado do DatabaseManager (para testes isolados)\n   */\n  static async reset(): Promise<void> {\n    await this.cleanup();\n    this.initialized = false;\n    this.useRealDatabase = false;\n  }\n}\n\n/**\n * Helper para criar conexão de teste\n */\nexport async function setupTestDatabase() {\n  await DatabaseTestHelper.initialize();\n  return DatabaseTestHelper.isUsingRealDatabase();\n}\n\n/**\n * Helper para cleanup de teste\n */\nexport async function teardownTestDatabase() {\n  await DatabaseTestHelper.cleanup();\n}\n\n/**\n * Decorator para pular teste se banco não estiver disponível\n */\nexport function requiresRealDatabase() {\n  return (target: any, propertyKey: string, descriptor: PropertyDescriptor) => {\n    const originalMethod = descriptor.value;\n\n    descriptor.value = async function (...args: any[]) {\n      if (!DatabaseTestHelper.isUsingRealDatabase()) {\n        console.log(`⏭️  Pulando teste \"${propertyKey}\" - requer banco real`);\n        return;\n      }\n\n      return originalMethod.apply(this, args);\n    };\n\n    return descriptor;\n  };\n}"],"version":3}