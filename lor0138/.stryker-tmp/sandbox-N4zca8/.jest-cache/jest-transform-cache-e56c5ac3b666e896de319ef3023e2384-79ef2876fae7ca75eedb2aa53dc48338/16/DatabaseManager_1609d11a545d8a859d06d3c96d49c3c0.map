{"file":"/home/mano/projetos/datasul/lor0138/.stryker-tmp/sandbox-N4zca8/src/infrastructure/database/DatabaseManager.ts","mappings":"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","names":[],"sources":["/home/mano/projetos/datasul/lor0138/.stryker-tmp/sandbox-N4zca8/src/infrastructure/database/DatabaseManager.ts"],"sourcesContent":["// @ts-nocheck\n// src/infrastructure/database/DatabaseManager.ts\r\n\r\nimport { ConnectionType, ConnectionStatus, IConnection, QueryParameter } from './types';\r\nimport { SqlServerConnection } from './connections/SqlServerConnection';\r\nimport { OdbcConnection } from './connections/OdbcConnection';\r\nimport { MockConnection } from './connections/MockConnection';\r\nimport { getSqlServerConfigEmp, getSqlServerConfigMult } from './config/sqlServerConfig';\r\nimport { getOdbcConnectionString } from './config/odbcConfig';\r\n// ✅ NOVO: Import do helper de métricas\r\nimport { DatabaseMetricsHelper } from '@infrastructure/metrics/helpers/databaseMetrics';\r\n\r\nexport class DatabaseManager {\r\n  private static instance: DatabaseManager | null = null;\r\n  private static connectionEmp: IConnection | null = null;\r\n  private static connectionMult: IConnection | null = null;\r\n  private static connectionType: ConnectionType = 'odbc';\r\n  private static useMockData: boolean = false;\r\n  private static connectionError: string | null = null;\r\n  private static isInitialized: boolean = false;\r\n  private static initializationPromise: Promise<void> | null = null;\r\n\r\n  // Construtor privado para padrão Singleton\r\n  private constructor() {}\r\n\r\n  /**\r\n   * ✅ NOVO: Retorna instância singleton\r\n   * Usado pelo health check no app.ts\r\n   */\r\n  static getInstance(): DatabaseManager {\r\n    if (!this.instance) {\r\n      this.instance = new DatabaseManager();\r\n    }\r\n    return this.instance;\r\n  }\r\n\r\n  /**\r\n   * ✅ NOVO: Retorna a conexão primária (EMP)\r\n   * Usado pelo health check no app.ts\r\n   */\r\n  static getConnection(): IConnection {\r\n    if (this.useMockData) {\r\n      return this.getMockConnection();\r\n    }\r\n\r\n    if (!this.connectionEmp) {\r\n      throw new Error('Conexão EMP não inicializada');\r\n    }\r\n\r\n    return this.connectionEmp;\r\n  }\r\n\r\n  static async initialize(): Promise<void> {\r\n    if (this.initializationPromise) {\r\n      return this.initializationPromise;\r\n    }\r\n\r\n    if (this.isInitialized) {\r\n      return Promise.resolve();\r\n    }\r\n\r\n    this.initializationPromise = this.doInitialize();\r\n\r\n    try {\r\n      await this.initializationPromise;\r\n    } finally {\r\n      this.initializationPromise = null;\r\n    }\r\n  }\r\n\r\n  private static async doInitialize(): Promise<void> {\r\n    console.log('Inicializando conexoes Datasul...');\r\n\r\n    this.connectionType = (process.env.DB_CONNECTION_TYPE as ConnectionType) || 'odbc';\r\n    console.log(`Modo: ${this.connectionType.toUpperCase()}`);\r\n\r\n    try {\r\n      if (this.connectionType === 'odbc') {\r\n        await this.initializeOdbc();\r\n      } else {\r\n        await this.initializeSqlServer();\r\n      }\r\n\r\n      this.useMockData = false;\r\n      this.isInitialized = true;\r\n\r\n      // ✅ NOVO: Registrar métricas de conexão bem-sucedida\r\n      DatabaseMetricsHelper.setActiveConnections('EMP', 1);\r\n      DatabaseMetricsHelper.setActiveConnections('MULT', 1);\r\n\r\n      console.log('✅ CONECTADO AO DATASUL');\r\n    } catch (error) {\r\n      this.connectionError = (error as Error).message;\r\n      this.useMockData = true;\r\n      this.isInitialized = true;\r\n\r\n      // ✅ NOVO: Registrar erro de conexão nas métricas\r\n      DatabaseMetricsHelper.recordConnectionError('EMP', error);\r\n      DatabaseMetricsHelper.recordConnectionError('MULT', error);\r\n\r\n      console.warn('⚠️ USANDO DADOS MOCK');\r\n      console.error('Erro conexão:', this.connectionError);\r\n    }\r\n  }\r\n\r\n  private static async initializeSqlServer(): Promise<void> {\r\n    const configEmp = getSqlServerConfigEmp();\r\n    const configMult = getSqlServerConfigMult();\r\n\r\n    this.connectionEmp = new SqlServerConnection(configEmp, 'EMP');\r\n    this.connectionMult = new SqlServerConnection(configMult, 'MULT');\r\n\r\n    await Promise.all([\r\n      this.connectionEmp.connect(),\r\n      this.connectionMult.connect(),\r\n    ]);\r\n\r\n    console.log('✅ SQL Server conectado');\r\n  }\r\n\r\n  private static async initializeOdbc(): Promise<void> {\r\n    const connStringEmp = getOdbcConnectionString('EMP');\r\n    const connStringMult = getOdbcConnectionString('MULT');\r\n\r\n    this.connectionEmp = new OdbcConnection(connStringEmp, 'EMP');\r\n    this.connectionMult = new OdbcConnection(connStringMult, 'MULT');\r\n\r\n    await Promise.all([\r\n      this.connectionEmp.connect(),\r\n      this.connectionMult.connect(),\r\n    ]);\r\n\r\n    console.log('✅ ODBC conectado');\r\n  }\r\n\r\n  /**\r\n   * Query simples EMP (DEPRECATED - Use queryEmpWithParams quando possível)\r\n   * ✅ COM MÉTRICAS\r\n   */\r\n  static async queryEmp(sql: string): Promise<any> {\r\n    if (this.useMockData) {\r\n      return this.getMockConnection().query(sql);\r\n    }\r\n\r\n    if (!this.connectionEmp) {\r\n      throw new Error('Conexão EMP não inicializada');\r\n    }\r\n\r\n    // ✅ NOVO: Instrumentar com métricas\r\n    return DatabaseMetricsHelper.instrumentQuery('EMP', sql, () =>\r\n      this.connectionEmp!.query(sql)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Query simples MULT (DEPRECATED - Use queryMultWithParams quando possível)\r\n   * ✅ COM MÉTRICAS\r\n   */\r\n  static async queryMult(sql: string): Promise<any> {\r\n    if (this.useMockData) {\r\n      return this.getMockConnection().query(sql);\r\n    }\r\n\r\n    if (!this.connectionMult) {\r\n      throw new Error('Conexão MULT não inicializada');\r\n    }\r\n\r\n    // ✅ NOVO: Instrumentar com métricas\r\n    return DatabaseMetricsHelper.instrumentQuery('MULT', sql, () =>\r\n      this.connectionMult!.query(sql)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Query parametrizada EMP (✅ PROTEGIDO contra SQL Injection)\r\n   * ✅ COM MÉTRICAS\r\n   */\r\n  static async queryEmpWithParams(sql: string, params: QueryParameter[]): Promise<any> {\r\n    if (this.useMockData) {\r\n      return this.getMockConnection().queryWithParams(sql, params);\r\n    }\r\n\r\n    if (!this.connectionEmp) {\r\n      throw new Error('Conexão EMP não inicializada');\r\n    }\r\n\r\n    // ✅ NOVO: Instrumentar com métricas\r\n    return DatabaseMetricsHelper.instrumentQuery('EMP', sql, () =>\r\n      this.connectionEmp!.queryWithParams(sql, params)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Query parametrizada MULT (✅ PROTEGIDO contra SQL Injection)\r\n   * ✅ COM MÉTRICAS\r\n   */\r\n  static async queryMultWithParams(sql: string, params: QueryParameter[]): Promise<any> {\r\n    if (this.useMockData) {\r\n      return this.getMockConnection().queryWithParams(sql, params);\r\n    }\r\n\r\n    if (!this.connectionMult) {\r\n      throw new Error('Conexão MULT não inicializada');\r\n    }\r\n\r\n    // ✅ NOVO: Instrumentar com métricas\r\n    return DatabaseMetricsHelper.instrumentQuery('MULT', sql, () =>\r\n      this.connectionMult!.queryWithParams(sql, params)\r\n    );\r\n  }\r\n\r\n  private static getMockConnection(): IConnection {\r\n    return new MockConnection();\r\n  }\r\n\r\n  static getConnectionStatus(): ConnectionStatus {\r\n    return {\r\n      type: this.connectionType,\r\n      mode: this.useMockData ? 'MOCK_DATA' : 'REAL_DATABASE',\r\n      error: this.connectionError || undefined,\r\n    };\r\n  }\r\n\r\n  static isReady(): boolean {\r\n    return this.isInitialized;\r\n  }\r\n\r\n  static async close(): Promise<void> {\r\n    const promises: Promise<void>[] = [];\r\n\r\n    if (this.connectionEmp) {\r\n      promises.push(this.connectionEmp.close());\r\n    }\r\n    if (this.connectionMult) {\r\n      promises.push(this.connectionMult.close());\r\n    }\r\n\r\n    await Promise.all(promises);\r\n\r\n    // ✅ NOVO: Atualizar métricas de conexão\r\n    DatabaseMetricsHelper.setActiveConnections('EMP', 0);\r\n    DatabaseMetricsHelper.setActiveConnections('MULT', 0);\r\n\r\n    this.connectionEmp = null;\r\n    this.connectionMult = null;\r\n    this.isInitialized = false;\r\n\r\n    console.log('🔌 Conexões fechadas');\r\n  }\r\n\r\n  // Métodos legados para compatibilidade\r\n  static getConnectionEmp(): IConnection {\r\n    if (!this.connectionEmp) {\r\n      throw new Error('Conexão EMP não inicializada');\r\n    }\r\n    return this.connectionEmp;\r\n  }\r\n\r\n  static getConnectionMult(): IConnection {\r\n    if (!this.connectionMult) {\r\n      throw new Error('Conexão MULT não inicializada');\r\n    }\r\n    return this.connectionMult;\r\n  }\r\n}"],"version":3}