{"file":"/home/mano/projetos/datasul/lor0138/.stryker-tmp/sandbox-N4zca8/src/infrastructure/metrics/helpers/databaseMetrics.ts","mappings":"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","names":[],"sources":["/home/mano/projetos/datasul/lor0138/.stryker-tmp/sandbox-N4zca8/src/infrastructure/metrics/helpers/databaseMetrics.ts"],"sourcesContent":["// @ts-nocheck\n// src/infrastructure/metrics/helpers/databaseMetrics.ts\n\nimport { metricsManager } from '../MetricsManager';\n\nexport type DatabaseType = 'EMP' | 'MULT';\nexport type QueryOperation = 'select' | 'insert' | 'update' | 'delete' | 'other';\n\n/**\n * Helper para instrumentar queries e coletar métricas de banco de dados\n */\nexport class DatabaseMetricsHelper {\n  /**\n   * Detecta o tipo de operação SQL\n   */\n  private static detectOperation(sql: string): QueryOperation {\n    const normalizedSql = sql.trim().toUpperCase();\n\n    if (normalizedSql.startsWith('SELECT')) return 'select';\n    if (normalizedSql.startsWith('INSERT')) return 'insert';\n    if (normalizedSql.startsWith('UPDATE')) return 'update';\n    if (normalizedSql.startsWith('DELETE')) return 'delete';\n\n    return 'other';\n  }\n\n  /**\n   * Executa uma query e coleta métricas automaticamente\n   */\n  static async instrumentQuery<T>(\n    database: DatabaseType,\n    sql: string,\n    queryFn: () => Promise<T>\n  ): Promise<T> {\n    const operation = this.detectOperation(sql);\n    const startTime = Date.now();\n\n    // Incrementa queries em progresso\n    metricsManager.dbQueriesInProgress.inc({ database });\n\n    try {\n      const result = await queryFn();\n\n      // Sucesso - registra métricas\n      const duration = (Date.now() - startTime) / 1000; // segundos\n\n      metricsManager.dbQueriesTotal.inc({ database, operation });\n      metricsManager.dbQueryDuration.observe({ database, operation }, duration);\n\n      return result;\n    } catch (error) {\n      // Erro - registra métrica de erro\n      const errorType = this.classifyError(error);\n      metricsManager.dbQueryErrors.inc({ database, error_type: errorType });\n\n      throw error;\n    } finally {\n      // Decrementa queries em progresso\n      metricsManager.dbQueriesInProgress.dec({ database });\n    }\n  }\n\n  /**\n   * Classifica o tipo de erro\n   */\n  private static classifyError(error: any): string {\n    const message = error?.message?.toLowerCase() || '';\n\n    if (message.includes('timeout')) return 'timeout';\n    if (message.includes('connection')) return 'connection';\n    if (message.includes('syntax')) return 'syntax';\n    if (message.includes('permission') || message.includes('denied')) return 'permission';\n    if (message.includes('deadlock')) return 'deadlock';\n\n    return 'unknown';\n  }\n\n  /**\n   * Registra erro de conexão\n   */\n  static recordConnectionError(database: DatabaseType, error: any): void {\n    const errorType = this.classifyError(error);\n    metricsManager.dbConnectionErrors.inc({ database, error_type: errorType });\n  }\n\n  /**\n   * Atualiza o gauge de conexões ativas\n   */\n  static setActiveConnections(database: DatabaseType, count: number): void {\n    metricsManager.dbConnectionsActive.set({ database }, count);\n  }\n}"],"version":3}