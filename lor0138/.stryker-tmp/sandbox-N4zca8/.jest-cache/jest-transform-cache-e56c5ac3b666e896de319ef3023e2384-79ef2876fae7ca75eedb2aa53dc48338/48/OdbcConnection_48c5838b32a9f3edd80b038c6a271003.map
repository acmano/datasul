{"file":"/home/mano/projetos/datasul/lor0138/.stryker-tmp/sandbox-N4zca8/src/infrastructure/database/connections/OdbcConnection.ts","mappings":";AAAA,cAAc;AACd,4DAA4D;;;;;;AAE5D,gDAAwB;AAExB,iDAA2C;AAC3C,+CAAyE;AACzE,mDAA4C;AAE5C,MAAa,cAAc;IAKzB,YAAY,gBAAwB,EAAE,OAAe,MAAM;QAJnD,eAAU,GAA2B,IAAI,CAAC;QAKhD,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;QACzC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACnB,CAAC;IAED,KAAK,CAAC,OAAO;QACX,MAAM,OAAO,GAAG,GAAG,IAAI,CAAC,IAAI,SAAS,CAAC;QAEtC,YAAG,CAAC,IAAI,CAAC,cAAc,OAAO,KAAK,CAAC,CAAC;QAErC,wCAAwC;QACxC,MAAM,YAAY,GAAG;YACnB,WAAW,EAAE,mBAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,WAAW;YAC9C,YAAY,EAAE,mBAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,YAAY;YAChD,QAAQ,EAAE,mBAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ;YACxC,aAAa,EAAE,mBAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,aAAa;YAClD,MAAM,EAAE,IAAI;YACZ,OAAO,EAAE,CAAC,KAAY,EAAE,OAAe,EAAE,KAAa,EAAE,EAAE;gBACxD,+BAA+B;gBAC/B,IAAI,CAAC,IAAA,wBAAgB,EAAC,KAAK,CAAC,EAAE,CAAC;oBAC7B,YAAG,CAAC,KAAK,CAAC,GAAG,OAAO,iCAAiC,EAAE;wBACrD,KAAK,EAAE,KAAK,CAAC,OAAO;wBACpB,OAAO;qBACR,CAAC,CAAC;oBACH,MAAM,KAAK,CAAC;gBACd,CAAC;YACH,CAAC;SACF,CAAC;QAEF,IAAI,CAAC;YACH,IAAI,CAAC,UAAU,GAAG,MAAM,IAAA,wBAAgB,EACtC,KAAK,IAAI,EAAE;gBACT,MAAM,IAAI,GAAG,MAAM,cAAI,CAAC,OAAO,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;gBACvD,OAAO,IAAI,CAAC;YACd,CAAC,EACD,YAAY,EACZ,OAAO,CACR,CAAC;YAEF,YAAG,CAAC,IAAI,CAAC,GAAG,OAAO,YAAY,CAAC,CAAC;QACnC,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,YAAG,CAAC,KAAK,CAAC,GAAG,OAAO,2CAA2C,EAAE;gBAC/D,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,mBAAmB;gBACnE,WAAW,EAAE,YAAY,CAAC,WAAW;aACtC,CAAC,CAAC;YACH,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAED,KAAK,CAAC,KAAK,CAAC,GAAW;QACrB,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC;YACrB,MAAM,IAAI,KAAK,CAAC,GAAG,IAAI,CAAC,IAAI,4BAA4B,CAAC,CAAC;QAC5D,CAAC;QAED,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAChD,OAAO,MAAM,CAAC;QAChB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,YAAG,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,IAAI,iBAAiB,EAAE;gBACvC,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,mBAAmB;gBACnE,GAAG,EAAE,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC;aAC3B,CAAC,CAAC;YACH,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAED,KAAK,CAAC,eAAe,CAAC,GAAW,EAAE,MAAwB;QACzD,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC;YACrB,MAAM,IAAI,KAAK,CAAC,GAAG,IAAI,CAAC,IAAI,4BAA4B,CAAC,CAAC;QAC5D,CAAC;QAED,IAAI,CAAC;YACH,gCAAgC;YAChC,MAAM,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;YACxC,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;YACxD,OAAO,MAAM,CAAC;QAChB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,YAAG,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,IAAI,+BAA+B,EAAE;gBACrD,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,mBAAmB;gBACnE,MAAM,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;aAC1D,CAAC,CAAC;YACH,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAED,KAAK,CAAC,KAAK;QACT,IAAI,IAAI,CAAC,UAAU,EAAE,CAAC;YACpB,MAAM,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;YAC9B,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;YACvB,YAAG,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,eAAe,CAAC,CAAC;QACxC,CAAC;IACH,CAAC;IAED,WAAW;QACT,OAAO,IAAI,CAAC,UAAU,KAAK,IAAI,CAAC;IAClC,CAAC;IAED,KAAK,CAAC,WAAW;QACf,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAE7B,IAAI,CAAC;YACH,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC;gBACrB,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,YAAY,EAAE,CAAC,EAAE,CAAC;YAC/C,CAAC;YAED,MAAM,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC;YAClD,MAAM,YAAY,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,CAAC;YAE5C,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,YAAY,EAAE,CAAC;QAC3C,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,YAAG,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,IAAI,uBAAuB,EAAE;gBAC7C,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,mBAAmB;aACpE,CAAC,CAAC;YACH,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,YAAY,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,EAAE,CAAC;QACpE,CAAC;IACH,CAAC;CACF;AAzHD,wCAyHC","names":[],"sources":["/home/mano/projetos/datasul/lor0138/.stryker-tmp/sandbox-N4zca8/src/infrastructure/database/connections/OdbcConnection.ts"],"sourcesContent":["// @ts-nocheck\n// src/infrastructure/database/connections/OdbcConnection.ts\r\n\r\nimport odbc from 'odbc';\r\nimport { IConnection, QueryParameter } from '../types';\r\nimport { log } from '@shared/utils/logger';\r\nimport { retryWithBackoff, isRetryableError } from '@shared/utils/retry';\r\nimport { config } from '@config/env.config';\r\n\r\nexport class OdbcConnection implements IConnection {\r\n  private connection: odbc.Connection | null = null;\r\n  private connectionString: string;\r\n  private name: string;\r\n\r\n  constructor(connectionString: string, name: string = 'ODBC') {\r\n    this.connectionString = connectionString;\r\n    this.name = name;\r\n  }\r\n\r\n  async connect(): Promise<void> {\r\n    const context = `${this.name} (ODBC)`;\r\n    \r\n    log.info(`Conectando ${context}...`);\r\n\r\n    // ✅ NOVO: Retry com backoff exponencial\r\n    const retryOptions = {\r\n      maxAttempts: config.database.retry.maxAttempts,\r\n      initialDelay: config.database.retry.initialDelay,\r\n      maxDelay: config.database.retry.maxDelay,\r\n      backoffFactor: config.database.retry.backoffFactor,\r\n      jitter: true,\r\n      onRetry: (error: Error, attempt: number, delay: number) => {\r\n        // Só retry em erros de conexão\r\n        if (!isRetryableError(error)) {\r\n          log.error(`${context}: Erro não-retryable, abortando`, {\r\n            error: error.message,\r\n            attempt,\r\n          });\r\n          throw error;\r\n        }\r\n      },\r\n    };\r\n\r\n    try {\r\n      this.connection = await retryWithBackoff(\r\n        async () => {\r\n          const conn = await odbc.connect(this.connectionString);\r\n          return conn;\r\n        },\r\n        retryOptions,\r\n        context\r\n      );\r\n\r\n      log.info(`${context} conectado`);\r\n    } catch (error) {\r\n      log.error(`${context}: Falha após todas as tentativas de retry`, {\r\n        error: error instanceof Error ? error.message : 'Erro desconhecido',\r\n        maxAttempts: retryOptions.maxAttempts,\r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async query(sql: string): Promise<any> {\r\n    if (!this.connection) {\r\n      throw new Error(`${this.name}: Conexão não inicializada`);\r\n    }\r\n\r\n    try {\r\n      const result = await this.connection.query(sql);\r\n      return result;\r\n    } catch (error) {\r\n      log.error(`${this.name}: Erro na query`, {\r\n        error: error instanceof Error ? error.message : 'Erro desconhecido',\r\n        sql: sql.substring(0, 100),\r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async queryWithParams(sql: string, params: QueryParameter[]): Promise<any> {\r\n    if (!this.connection) {\r\n      throw new Error(`${this.name}: Conexão não inicializada`);\r\n    }\r\n\r\n    try {\r\n      // ODBC usa '?' como placeholder\r\n      const values = params.map(p => p.value);\r\n      const result = await this.connection.query(sql, values);\r\n      return result;\r\n    } catch (error) {\r\n      log.error(`${this.name}: Erro na query parametrizada`, {\r\n        error: error instanceof Error ? error.message : 'Erro desconhecido',\r\n        params: params.map(p => ({ name: p.name, type: p.type })),\r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async close(): Promise<void> {\r\n    if (this.connection) {\r\n      await this.connection.close();\r\n      this.connection = null;\r\n      log.info(`${this.name} desconectado`);\r\n    }\r\n  }\r\n\r\n  isConnected(): boolean {\r\n    return this.connection !== null;\r\n  }\r\n\r\n  async healthCheck(): Promise<{ connected: boolean; responseTime: number }> {\r\n    const startTime = Date.now();\r\n\r\n    try {\r\n      if (!this.connection) {\r\n        return { connected: false, responseTime: 0 };\r\n      }\r\n\r\n      await this.connection.query('SELECT 1 AS health');\r\n      const responseTime = Date.now() - startTime;\r\n\r\n      return { connected: true, responseTime };\r\n    } catch (error) {\r\n      log.error(`${this.name}: Health check falhou`, {\r\n        error: error instanceof Error ? error.message : 'Erro desconhecido',\r\n      });\r\n      return { connected: false, responseTime: Date.now() - startTime };\r\n    }\r\n  }\r\n}"],"version":3}