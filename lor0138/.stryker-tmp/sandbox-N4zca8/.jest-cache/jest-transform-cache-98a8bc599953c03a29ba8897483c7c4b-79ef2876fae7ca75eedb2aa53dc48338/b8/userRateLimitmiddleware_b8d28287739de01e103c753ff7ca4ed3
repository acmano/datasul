2fa2f96bbf8e51ae3c97e98149edbd4a
"use strict";
// src/shared/middlewares/userRateLimit.middleware.ts
Object.defineProperty(exports, "__esModule", { value: true });
exports.userRateLimit = userRateLimit;
exports.createUserRateLimit = createUserRateLimit;
const UserRateLimiter_1 = require("@shared/utils/UserRateLimiter");
const errors_1 = require("@shared/errors");
const logger_1 = require("@shared/utils/logger");
/**
 * Middleware de rate limiting por usuário
 * Requer que apiKeyAuth middleware seja executado antes
 */
function userRateLimit(req, res, next) {
    try {
        // Se não há usuário autenticado, aplica rate limit genérico por IP
        if (!req.user) {
            logger_1.log.debug('Rate limit por IP (sem autenticação)', {
                correlationId: req.id,
                ip: req.ip
            });
            // Fallback para rate limit genérico
            return next();
        }
        const { id: userId, tier } = req.user;
        // Verifica rate limit
        const result = UserRateLimiter_1.UserRateLimiter.check(userId, tier);
        // Adiciona headers de rate limit
        res.setHeader('X-RateLimit-Limit', result.limit.toString());
        res.setHeader('X-RateLimit-Remaining', result.remaining.toString());
        res.setHeader('X-RateLimit-Reset', new Date(result.resetAt).toISOString());
        if (!result.allowed) {
            // Rate limit excedido
            logger_1.log.warn('Rate limit por usuário excedido', {
                correlationId: req.id,
                userId,
                tier,
                limit: result.limit,
                resetAt: new Date(result.resetAt)
            });
            // Adiciona header Retry-After
            if (result.retryAfter) {
                res.setHeader('Retry-After', result.retryAfter.toString());
            }
            throw new errors_1.RateLimitError(result.retryAfter);
        }
        logger_1.log.debug('Rate limit OK', {
            correlationId: req.id,
            userId,
            tier,
            remaining: result.remaining,
            limit: result.limit
        });
        next();
    }
    catch (error) {
        next(error);
    }
}
/**
 * Cria middleware de rate limit customizado para endpoints específicos
 */
function createUserRateLimit(options) {
    return (req, res, next) => {
        try {
            // Se configurado para pular autenticados e usuário está autenticado
            if (options?.skipAuthenticated && req.user) {
                return next();
            }
            if (!req.user) {
                return next();
            }
            const { id: userId, tier } = req.user;
            const result = UserRateLimiter_1.UserRateLimiter.check(userId, tier);
            // Aplica multiplicador se configurado
            const limit = options?.multiplier
                ? result.limit * options.multiplier
                : result.limit;
            res.setHeader('X-RateLimit-Limit', limit.toString());
            res.setHeader('X-RateLimit-Remaining', result.remaining.toString());
            res.setHeader('X-RateLimit-Reset', new Date(result.resetAt).toISOString());
            if (!result.allowed) {
                if (result.retryAfter) {
                    res.setHeader('Retry-After', result.retryAfter.toString());
                }
                throw new errors_1.RateLimitError(result.retryAfter);
            }
            next();
        }
        catch (error) {
            next(error);
        }
    };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,