{"file":"/home/mano/projetos/datasul/lor0138/src/infrastructure/database/connections/SqlServerConnection.ts","mappings":"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","names":[],"sources":["/home/mano/projetos/datasul/lor0138/src/infrastructure/database/connections/SqlServerConnection.ts"],"sourcesContent":["// src/infrastructure/database/connections/SqlServerConnection.ts\r\n\r\nimport sql from 'mssql';\r\nimport { IConnection, DatabaseConfig, QueryParameter } from '../types';\r\nimport { log } from '@shared/utils/logger';\r\nimport { retryWithBackoff, isRetryableError } from '@shared/utils/retry';\r\nimport { config } from '@config/env.config';\r\n\r\nexport class SqlServerConnection implements IConnection {\r\n  private pool: sql.ConnectionPool | null = null;\r\n  private config: DatabaseConfig;\r\n  private name: string;\r\n\r\n  constructor(config: DatabaseConfig, name: string = 'SQL Server') {\r\n    this.config = config;\r\n    this.name = name;\r\n  }\r\n\r\n  async connect(): Promise<void> {\r\n    const context = `${this.name} (SQL Server)`;\r\n    \r\n    log.info(`Conectando ${context}...`);\r\n    log.debug('üîç DEBUG - Config recebida:', {\r\n      server: this.config.server,\r\n      user: this.config.user,\r\n      password: '*********',\r\n      database: this.config.database,\r\n      port: this.config.port,\r\n    });\r\n\r\n    const sqlConfig: sql.config = {\r\n      server: this.config.server || '',\r\n      port: this.config.port || 1433,\r\n      user: this.config.user || '',\r\n      password: this.config.password || '',\r\n      database: this.config.database || '',\r\n      connectionTimeout: this.config.connectionTimeout || 15000,\r\n      requestTimeout: this.config.requestTimeout || 30000,\r\n      options: {\r\n        encrypt: this.config.encrypt ?? false,\r\n        trustServerCertificate: this.config.trustServerCertificate ?? true,\r\n        enableArithAbort: true,\r\n      },\r\n      pool: {\r\n        max: 10,\r\n        min: 0,\r\n        idleTimeoutMillis: 30000,\r\n      },\r\n    };\r\n\r\n    // ‚úÖ NOVO: Retry com backoff exponencial\r\n    const retryOptions = {\r\n      maxAttempts: config.database.retry.maxAttempts,\r\n      initialDelay: config.database.retry.initialDelay,\r\n      maxDelay: config.database.retry.maxDelay,\r\n      backoffFactor: config.database.retry.backoffFactor,\r\n      jitter: true,\r\n      onRetry: (error: Error, attempt: number, delay: number) => {\r\n        // S√≥ retry em erros de conex√£o\r\n        if (!isRetryableError(error)) {\r\n          log.error(`${context}: Erro n√£o-retryable, abortando`, {\r\n            error: error.message,\r\n            attempt,\r\n          });\r\n          throw error;\r\n        }\r\n      },\r\n    };\r\n\r\n    try {\r\n      this.pool = await retryWithBackoff(\r\n        async () => {\r\n          const pool = new sql.ConnectionPool(sqlConfig);\r\n          \r\n          // ‚úÖ CRITICAL: Timeout manual para for√ßar erro se travar\r\n          const connectPromise = pool.connect();\r\n          const timeoutPromise = new Promise<never>((_, reject) => {\r\n            setTimeout(() => {\r\n              reject(new Error(`Connection timeout after ${sqlConfig.connectionTimeout}ms`));\r\n            }, sqlConfig.connectionTimeout);\r\n          });\r\n\r\n          // Race: o que resolver/rejeitar primeiro ganha\r\n          await Promise.race([connectPromise, timeoutPromise]);\r\n          \r\n          return pool;\r\n        },\r\n        retryOptions,\r\n        context\r\n      );\r\n\r\n      log.info(`${context} conectado`);\r\n    } catch (error) {\r\n      log.error(`${context}: Falha ap√≥s todas as tentativas de retry`, {\r\n        error: error instanceof Error ? error.message : 'Erro desconhecido',\r\n        maxAttempts: retryOptions.maxAttempts,\r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async query(sql: string): Promise<any> {\r\n    if (!this.pool) {\r\n      throw new Error(`${this.name}: Pool n√£o inicializado`);\r\n    }\r\n\r\n    try {\r\n      const result = await this.pool.request().query(sql);\r\n      return result.recordset;\r\n    } catch (error) {\r\n      log.error(`${this.name}: Erro na query`, {\r\n        error: error instanceof Error ? error.message : 'Erro desconhecido',\r\n        sql: sql.substring(0, 100), // Log apenas in√≠cio da query\r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async queryWithParams(sql: string, params: QueryParameter[]): Promise<any> {\r\n    if (!this.pool) {\r\n      throw new Error(`${this.name}: Pool n√£o inicializado`);\r\n    }\r\n\r\n    try {\r\n      const request = this.pool.request();\r\n\r\n      // Adicionar par√¢metros\r\n      params.forEach(param => {\r\n        const sqlType = this.getSqlType(param.type);\r\n        request.input(param.name, sqlType, param.value);\r\n      });\r\n\r\n      const result = await request.query(sql);\r\n      return result.recordset;\r\n    } catch (error) {\r\n      log.error(`${this.name}: Erro na query parametrizada`, {\r\n        error: error instanceof Error ? error.message : 'Erro desconhecido',\r\n        params: params.map(p => ({ name: p.name, type: p.type })),\r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async close(): Promise<void> {\r\n    if (this.pool) {\r\n      await this.pool.close();\r\n      this.pool = null;\r\n      log.info(`${this.name} desconectado`);\r\n    }\r\n  }\r\n\r\n  isConnected(): boolean {\r\n    return this.pool !== null;\r\n  }\r\n\r\n  async healthCheck(): Promise<{ connected: boolean; responseTime: number }> {\r\n    const startTime = Date.now();\r\n\r\n    try {\r\n      if (!this.pool) {\r\n        return { connected: false, responseTime: 0 };\r\n      }\r\n\r\n      await this.pool.request().query('SELECT 1 AS health');\r\n      const responseTime = Date.now() - startTime;\r\n\r\n      return { connected: true, responseTime };\r\n    } catch (error) {\r\n      log.error(`${this.name}: Health check falhou`, {\r\n        error: error instanceof Error ? error.message : 'Erro desconhecido',\r\n      });\r\n      return { connected: false, responseTime: Date.now() - startTime };\r\n    }\r\n  }\r\n\r\n  private getSqlType(type: string): any {\r\n    const typeMap: Record<string, any> = {\r\n      varchar: sql.VarChar,\r\n      int: sql.Int,\r\n      bigint: sql.BigInt,\r\n      float: sql.Float,\r\n      decimal: sql.Decimal,\r\n      datetime: sql.DateTime,\r\n      bit: sql.Bit,\r\n    };\r\n\r\n    return typeMap[type.toLowerCase()] || sql.VarChar;\r\n  }\r\n}"],"version":3}