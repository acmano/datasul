9c96607403b35f9cbae905471bc8d796
"use strict";
// @ts-nocheck
// src/infrastructure/database/connections/OdbcConnection.ts
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OdbcConnection = void 0;
const odbc_1 = __importDefault(require("odbc"));
const logger_1 = require("@shared/utils/logger");
const retry_1 = require("@shared/utils/retry");
const env_config_1 = require("@config/env.config");
class OdbcConnection {
    constructor(connectionString, name = 'ODBC') {
        this.connection = null;
        this.connectionString = connectionString;
        this.name = name;
    }
    async connect() {
        const context = `${this.name} (ODBC)`;
        logger_1.log.info(`Conectando ${context}...`);
        // ✅ NOVO: Retry com backoff exponencial
        const retryOptions = {
            maxAttempts: env_config_1.config.database.retry.maxAttempts,
            initialDelay: env_config_1.config.database.retry.initialDelay,
            maxDelay: env_config_1.config.database.retry.maxDelay,
            backoffFactor: env_config_1.config.database.retry.backoffFactor,
            jitter: true,
            onRetry: (error, attempt, delay) => {
                // Só retry em erros de conexão
                if (!(0, retry_1.isRetryableError)(error)) {
                    logger_1.log.error(`${context}: Erro não-retryable, abortando`, {
                        error: error.message,
                        attempt,
                    });
                    throw error;
                }
            },
        };
        try {
            this.connection = await (0, retry_1.retryWithBackoff)(async () => {
                const conn = await odbc_1.default.connect(this.connectionString);
                return conn;
            }, retryOptions, context);
            logger_1.log.info(`${context} conectado`);
        }
        catch (error) {
            logger_1.log.error(`${context}: Falha após todas as tentativas de retry`, {
                error: error instanceof Error ? error.message : 'Erro desconhecido',
                maxAttempts: retryOptions.maxAttempts,
            });
            throw error;
        }
    }
    async query(sql) {
        if (!this.connection) {
            throw new Error(`${this.name}: Conexão não inicializada`);
        }
        try {
            const result = await this.connection.query(sql);
            return result;
        }
        catch (error) {
            logger_1.log.error(`${this.name}: Erro na query`, {
                error: error instanceof Error ? error.message : 'Erro desconhecido',
                sql: sql.substring(0, 100),
            });
            throw error;
        }
    }
    async queryWithParams(sql, params) {
        if (!this.connection) {
            throw new Error(`${this.name}: Conexão não inicializada`);
        }
        try {
            // ODBC usa '?' como placeholder
            const values = params.map(p => p.value);
            const result = await this.connection.query(sql, values);
            return result;
        }
        catch (error) {
            logger_1.log.error(`${this.name}: Erro na query parametrizada`, {
                error: error instanceof Error ? error.message : 'Erro desconhecido',
                params: params.map(p => ({ name: p.name, type: p.type })),
            });
            throw error;
        }
    }
    async close() {
        if (this.connection) {
            await this.connection.close();
            this.connection = null;
            logger_1.log.info(`${this.name} desconectado`);
        }
    }
    isConnected() {
        return this.connection !== null;
    }
    async healthCheck() {
        const startTime = Date.now();
        try {
            if (!this.connection) {
                return { connected: false, responseTime: 0 };
            }
            await this.connection.query('SELECT 1 AS health');
            const responseTime = Date.now() - startTime;
            return { connected: true, responseTime };
        }
        catch (error) {
            logger_1.log.error(`${this.name}: Health check falhou`, {
                error: error instanceof Error ? error.message : 'Erro desconhecido',
            });
            return { connected: false, responseTime: Date.now() - startTime };
        }
    }
}
exports.OdbcConnection = OdbcConnection;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,