aede0a18871dec16341f3e37ff868acd
"use strict";
// @ts-nocheck
// src/infrastructure/database/config/odbcConfig.ts
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateOdbcConfig = exports.getOdbcConfig = exports.getOdbcConnectionString = void 0;
/**
 * Retorna connection string ODBC para o database especificado
 */
const getOdbcConnectionString = (database) => {
    const dsnName = database === 'EMP'
        ? process.env.ODBC_DSN_EMP || 'PRD_EMS2EMP'
        : process.env.ODBC_DSN_MULT || 'PRD_EMS2MULT';
    const user = process.env.ODBC_USER || process.env.DB_USER || '';
    const password = process.env.ODBC_PASSWORD || process.env.DB_PASSWORD || '';
    return `DSN=${dsnName};UID=${user};PWD=${password}`;
};
exports.getOdbcConnectionString = getOdbcConnectionString;
/**
 * ✅ NOVO: Retorna configuração completa com timeouts
 */
const getOdbcConfig = (database) => {
    const connectionString = (0, exports.getOdbcConnectionString)(database);
    // ✅ IMPORTANTE: Usa parseInt() direto, então .env deve ter milissegundos puros
    const connectionTimeout = parseInt(process.env.ODBC_CONNECTION_TIMEOUT || '15000', 10);
    const commandTimeout = parseInt(process.env.ODBC_COMMAND_TIMEOUT || '30000', 10);
    return {
        connectionString,
        connectionTimeout,
        commandTimeout
    };
};
exports.getOdbcConfig = getOdbcConfig;
/**
 * Valida configuração ODBC
 */
const validateOdbcConfig = () => {
    const requiredVars = ['DB_USER', 'DB_PASSWORD'];
    for (const varName of requiredVars) {
        if (!process.env[varName]) {
            throw new Error(`Variável de ambiente obrigatória não encontrada: ${varName}`);
        }
    }
    // Verifica timeouts
    const connectionTimeout = parseInt(process.env.ODBC_CONNECTION_TIMEOUT || '15000', 10);
    const commandTimeout = parseInt(process.env.ODBC_COMMAND_TIMEOUT || '30000', 10);
    if (isNaN(connectionTimeout) || connectionTimeout < 1000) {
        throw new Error(`ODBC_CONNECTION_TIMEOUT inválido: deve ser >= 1000ms (recebido: ${process.env.ODBC_CONNECTION_TIMEOUT})`);
    }
    if (isNaN(commandTimeout) || commandTimeout < 1000) {
        throw new Error(`ODBC_COMMAND_TIMEOUT inválido: deve ser >= 1000ms (recebido: ${process.env.ODBC_COMMAND_TIMEOUT})`);
    }
};
exports.validateOdbcConfig = validateOdbcConfig;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvbWFuby9wcm9qZXRvcy9kYXRhc3VsL2xvcjAxMzgvLnN0cnlrZXItdG1wL3NhbmRib3gtRVM1cWNML3NyYy9pbmZyYXN0cnVjdHVyZS9kYXRhYmFzZS9jb25maWcvb2RiY0NvbmZpZy50cyIsIm1hcHBpbmdzIjoiO0FBQUEsY0FBYztBQUNkLG1EQUFtRDs7O0FBUW5EOztHQUVHO0FBQ0ksTUFBTSx1QkFBdUIsR0FBRyxDQUFDLFFBQXdCLEVBQVUsRUFBRTtJQUMxRSxNQUFNLE9BQU8sR0FDWCxRQUFRLEtBQUssS0FBSztRQUNoQixDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLElBQUksYUFBYTtRQUMzQyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLElBQUksY0FBYyxDQUFDO0lBRWxELE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxJQUFJLEVBQUUsQ0FBQztJQUNoRSxNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsSUFBSSxFQUFFLENBQUM7SUFFNUUsT0FBTyxPQUFPLE9BQU8sUUFBUSxJQUFJLFFBQVEsUUFBUSxFQUFFLENBQUM7QUFDdEQsQ0FBQyxDQUFDO0FBVlcsUUFBQSx1QkFBdUIsMkJBVWxDO0FBRUY7O0dBRUc7QUFDSSxNQUFNLGFBQWEsR0FBRyxDQUFDLFFBQXdCLEVBQWMsRUFBRTtJQUNwRSxNQUFNLGdCQUFnQixHQUFHLElBQUEsK0JBQXVCLEVBQUMsUUFBUSxDQUFDLENBQUM7SUFFM0QsK0VBQStFO0lBQy9FLE1BQU0saUJBQWlCLEdBQUcsUUFBUSxDQUNoQyxPQUFPLENBQUMsR0FBRyxDQUFDLHVCQUF1QixJQUFJLE9BQU8sRUFDOUMsRUFBRSxDQUNILENBQUM7SUFFRixNQUFNLGNBQWMsR0FBRyxRQUFRLENBQzdCLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLElBQUksT0FBTyxFQUMzQyxFQUFFLENBQ0gsQ0FBQztJQUVGLE9BQU87UUFDTCxnQkFBZ0I7UUFDaEIsaUJBQWlCO1FBQ2pCLGNBQWM7S0FDZixDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBbkJXLFFBQUEsYUFBYSxpQkFtQnhCO0FBRUY7O0dBRUc7QUFDSSxNQUFNLGtCQUFrQixHQUFHLEdBQVMsRUFBRTtJQUMzQyxNQUFNLFlBQVksR0FBRyxDQUFDLFNBQVMsRUFBRSxhQUFhLENBQUMsQ0FBQztJQUVoRCxLQUFLLE1BQU0sT0FBTyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ25DLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7WUFDMUIsTUFBTSxJQUFJLEtBQUssQ0FBQyxvREFBb0QsT0FBTyxFQUFFLENBQUMsQ0FBQztRQUNqRixDQUFDO0lBQ0gsQ0FBQztJQUVELG9CQUFvQjtJQUNwQixNQUFNLGlCQUFpQixHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLHVCQUF1QixJQUFJLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQztJQUN2RixNQUFNLGNBQWMsR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsSUFBSSxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFFakYsSUFBSSxLQUFLLENBQUMsaUJBQWlCLENBQUMsSUFBSSxpQkFBaUIsR0FBRyxJQUFJLEVBQUUsQ0FBQztRQUN6RCxNQUFNLElBQUksS0FBSyxDQUNiLG1FQUFtRSxPQUFPLENBQUMsR0FBRyxDQUFDLHVCQUF1QixHQUFHLENBQzFHLENBQUM7SUFDSixDQUFDO0lBRUQsSUFBSSxLQUFLLENBQUMsY0FBYyxDQUFDLElBQUksY0FBYyxHQUFHLElBQUksRUFBRSxDQUFDO1FBQ25ELE1BQU0sSUFBSSxLQUFLLENBQ2IsZ0VBQWdFLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLEdBQUcsQ0FDcEcsQ0FBQztJQUNKLENBQUM7QUFDSCxDQUFDLENBQUM7QUF4QlcsUUFBQSxrQkFBa0Isc0JBd0I3QiIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS9tYW5vL3Byb2pldG9zL2RhdGFzdWwvbG9yMDEzOC8uc3RyeWtlci10bXAvc2FuZGJveC1FUzVxY0wvc3JjL2luZnJhc3RydWN0dXJlL2RhdGFiYXNlL2NvbmZpZy9vZGJjQ29uZmlnLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEB0cy1ub2NoZWNrXG4vLyBzcmMvaW5mcmFzdHJ1Y3R1cmUvZGF0YWJhc2UvY29uZmlnL29kYmNDb25maWcudHNcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgT2RiY0NvbmZpZyB7XHJcbiAgY29ubmVjdGlvblN0cmluZzogc3RyaW5nO1xyXG4gIGNvbm5lY3Rpb25UaW1lb3V0OiBudW1iZXI7IC8vIG1pbGlzc2VndW5kb3NcclxuICBjb21tYW5kVGltZW91dDogbnVtYmVyOyAgICAvLyBtaWxpc3NlZ3VuZG9zXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXRvcm5hIGNvbm5lY3Rpb24gc3RyaW5nIE9EQkMgcGFyYSBvIGRhdGFiYXNlIGVzcGVjaWZpY2Fkb1xyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGdldE9kYmNDb25uZWN0aW9uU3RyaW5nID0gKGRhdGFiYXNlOiAnRU1QJyB8ICdNVUxUJyk6IHN0cmluZyA9PiB7XHJcbiAgY29uc3QgZHNuTmFtZSA9XHJcbiAgICBkYXRhYmFzZSA9PT0gJ0VNUCdcclxuICAgICAgPyBwcm9jZXNzLmVudi5PREJDX0RTTl9FTVAgfHwgJ1BSRF9FTVMyRU1QJ1xyXG4gICAgICA6IHByb2Nlc3MuZW52Lk9EQkNfRFNOX01VTFQgfHwgJ1BSRF9FTVMyTVVMVCc7XHJcblxyXG4gIGNvbnN0IHVzZXIgPSBwcm9jZXNzLmVudi5PREJDX1VTRVIgfHwgcHJvY2Vzcy5lbnYuREJfVVNFUiB8fCAnJztcclxuICBjb25zdCBwYXNzd29yZCA9IHByb2Nlc3MuZW52Lk9EQkNfUEFTU1dPUkQgfHwgcHJvY2Vzcy5lbnYuREJfUEFTU1dPUkQgfHwgJyc7XHJcblxyXG4gIHJldHVybiBgRFNOPSR7ZHNuTmFtZX07VUlEPSR7dXNlcn07UFdEPSR7cGFzc3dvcmR9YDtcclxufTtcclxuXHJcbi8qKlxyXG4gKiDinIUgTk9WTzogUmV0b3JuYSBjb25maWd1cmHDp8OjbyBjb21wbGV0YSBjb20gdGltZW91dHNcclxuICovXHJcbmV4cG9ydCBjb25zdCBnZXRPZGJjQ29uZmlnID0gKGRhdGFiYXNlOiAnRU1QJyB8ICdNVUxUJyk6IE9kYmNDb25maWcgPT4ge1xyXG4gIGNvbnN0IGNvbm5lY3Rpb25TdHJpbmcgPSBnZXRPZGJjQ29ubmVjdGlvblN0cmluZyhkYXRhYmFzZSk7XHJcblxyXG4gIC8vIOKchSBJTVBPUlRBTlRFOiBVc2EgcGFyc2VJbnQoKSBkaXJldG8sIGVudMOjbyAuZW52IGRldmUgdGVyIG1pbGlzc2VndW5kb3MgcHVyb3NcclxuICBjb25zdCBjb25uZWN0aW9uVGltZW91dCA9IHBhcnNlSW50KFxyXG4gICAgcHJvY2Vzcy5lbnYuT0RCQ19DT05ORUNUSU9OX1RJTUVPVVQgfHwgJzE1MDAwJyxcclxuICAgIDEwXHJcbiAgKTtcclxuXHJcbiAgY29uc3QgY29tbWFuZFRpbWVvdXQgPSBwYXJzZUludChcclxuICAgIHByb2Nlc3MuZW52Lk9EQkNfQ09NTUFORF9USU1FT1VUIHx8ICczMDAwMCcsXHJcbiAgICAxMFxyXG4gICk7XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBjb25uZWN0aW9uU3RyaW5nLFxyXG4gICAgY29ubmVjdGlvblRpbWVvdXQsXHJcbiAgICBjb21tYW5kVGltZW91dFxyXG4gIH07XHJcbn07XHJcblxyXG4vKipcclxuICogVmFsaWRhIGNvbmZpZ3VyYcOnw6NvIE9EQkNcclxuICovXHJcbmV4cG9ydCBjb25zdCB2YWxpZGF0ZU9kYmNDb25maWcgPSAoKTogdm9pZCA9PiB7XHJcbiAgY29uc3QgcmVxdWlyZWRWYXJzID0gWydEQl9VU0VSJywgJ0RCX1BBU1NXT1JEJ107XHJcblxyXG4gIGZvciAoY29uc3QgdmFyTmFtZSBvZiByZXF1aXJlZFZhcnMpIHtcclxuICAgIGlmICghcHJvY2Vzcy5lbnZbdmFyTmFtZV0pIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBWYXJpw6F2ZWwgZGUgYW1iaWVudGUgb2JyaWdhdMOzcmlhIG7Do28gZW5jb250cmFkYTogJHt2YXJOYW1lfWApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gVmVyaWZpY2EgdGltZW91dHNcclxuICBjb25zdCBjb25uZWN0aW9uVGltZW91dCA9IHBhcnNlSW50KHByb2Nlc3MuZW52Lk9EQkNfQ09OTkVDVElPTl9USU1FT1VUIHx8ICcxNTAwMCcsIDEwKTtcclxuICBjb25zdCBjb21tYW5kVGltZW91dCA9IHBhcnNlSW50KHByb2Nlc3MuZW52Lk9EQkNfQ09NTUFORF9USU1FT1VUIHx8ICczMDAwMCcsIDEwKTtcclxuXHJcbiAgaWYgKGlzTmFOKGNvbm5lY3Rpb25UaW1lb3V0KSB8fCBjb25uZWN0aW9uVGltZW91dCA8IDEwMDApIHtcclxuICAgIHRocm93IG5ldyBFcnJvcihcclxuICAgICAgYE9EQkNfQ09OTkVDVElPTl9USU1FT1VUIGludsOhbGlkbzogZGV2ZSBzZXIgPj0gMTAwMG1zIChyZWNlYmlkbzogJHtwcm9jZXNzLmVudi5PREJDX0NPTk5FQ1RJT05fVElNRU9VVH0pYFxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIGlmIChpc05hTihjb21tYW5kVGltZW91dCkgfHwgY29tbWFuZFRpbWVvdXQgPCAxMDAwKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoXHJcbiAgICAgIGBPREJDX0NPTU1BTkRfVElNRU9VVCBpbnbDoWxpZG86IGRldmUgc2VyID49IDEwMDBtcyAocmVjZWJpZG86ICR7cHJvY2Vzcy5lbnYuT0RCQ19DT01NQU5EX1RJTUVPVVR9KWBcclxuICAgICk7XHJcbiAgfVxyXG59OyJdLCJ2ZXJzaW9uIjozfQ==