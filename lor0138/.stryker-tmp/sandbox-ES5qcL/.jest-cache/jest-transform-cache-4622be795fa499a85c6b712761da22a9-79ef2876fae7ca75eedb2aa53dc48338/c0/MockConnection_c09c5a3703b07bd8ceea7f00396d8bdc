fb7f37916aa64d58fe74830f57694683
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockConnection = void 0;
class MockConnection {
    constructor() {
        this.mockData = {
            item: {
                itemCodigo: 'MOCK001',
                itemDescricao: 'Item Mock para Testes',
                itemUnidade: 'UN',
            },
            estabelecimentos: [
                {
                    itemCodigo: 'MOCK001',
                    estabCodigo: '01',
                    estabNome: 'Estabelecimento Mock',
                    codObsoleto: 0,
                },
            ],
        };
    }
    async connect() {
        console.log('Mock connection iniciada');
    }
    async query(queryString) {
        console.log('Mock query executada:', queryString);
        if (queryString.includes('pub.item')) {
            return [this.mockData.item];
        }
        if (queryString.includes('item-uni-estab')) {
            return this.mockData.estabelecimentos;
        }
        return [];
    }
    async queryWithParams(queryString, params) {
        console.log('Mock query parametrizada:', queryString, params);
        if (queryString.includes('pub.item')) {
            return [this.mockData.item];
        }
        if (queryString.includes('item-uni-estab')) {
            return this.mockData.estabelecimentos;
        }
        return [];
    }
    async close() {
        console.log('Mock connection fechada');
    }
    isConnected() {
        return true;
    }
}
exports.MockConnection = MockConnection;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvbWFuby9wcm9qZXRvcy9kYXRhc3VsL2xvcjAxMzgvLnN0cnlrZXItdG1wL3NhbmRib3gtRVM1cWNML3NyYy9pbmZyYXN0cnVjdHVyZS9kYXRhYmFzZS9jb25uZWN0aW9ucy9Nb2NrQ29ubmVjdGlvbi50cyIsIm1hcHBpbmdzIjoiOzs7QUFHQSxNQUFhLGNBQWM7SUFBM0I7UUFDVSxhQUFRLEdBQUc7WUFDakIsSUFBSSxFQUFFO2dCQUNKLFVBQVUsRUFBRSxTQUFTO2dCQUNyQixhQUFhLEVBQUUsdUJBQXVCO2dCQUN0QyxXQUFXLEVBQUUsSUFBSTthQUNsQjtZQUNELGdCQUFnQixFQUFFO2dCQUNoQjtvQkFDRSxVQUFVLEVBQUUsU0FBUztvQkFDckIsV0FBVyxFQUFFLElBQUk7b0JBQ2pCLFNBQVMsRUFBRSxzQkFBc0I7b0JBQ2pDLFdBQVcsRUFBRSxDQUFDO2lCQUNmO2FBQ0Y7U0FDRixDQUFDO0lBeUNKLENBQUM7SUF2Q0MsS0FBSyxDQUFDLE9BQU87UUFDWCxPQUFPLENBQUMsR0FBRyxDQUFDLDBCQUEwQixDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVELEtBQUssQ0FBQyxLQUFLLENBQUMsV0FBbUI7UUFDN0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUVsRCxJQUFJLFdBQVcsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQztZQUNyQyxPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM5QixDQUFDO1FBRUQsSUFBSSxXQUFXLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsQ0FBQztZQUMzQyxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUM7UUFDeEMsQ0FBQztRQUVELE9BQU8sRUFBRSxDQUFDO0lBQ1osQ0FBQztJQUVELEtBQUssQ0FBQyxlQUFlLENBQUMsV0FBbUIsRUFBRSxNQUF3QjtRQUNqRSxPQUFPLENBQUMsR0FBRyxDQUFDLDJCQUEyQixFQUFFLFdBQVcsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUU5RCxJQUFJLFdBQVcsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQztZQUNyQyxPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM5QixDQUFDO1FBRUQsSUFBSSxXQUFXLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsQ0FBQztZQUMzQyxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUM7UUFDeEMsQ0FBQztRQUVELE9BQU8sRUFBRSxDQUFDO0lBQ1osQ0FBQztJQUVELEtBQUssQ0FBQyxLQUFLO1FBQ1QsT0FBTyxDQUFDLEdBQUcsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFRCxXQUFXO1FBQ1QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0NBQ0Y7QUF4REQsd0NBd0RDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9ob21lL21hbm8vcHJvamV0b3MvZGF0YXN1bC9sb3IwMTM4Ly5zdHJ5a2VyLXRtcC9zYW5kYm94LUVTNXFjTC9zcmMvaW5mcmFzdHJ1Y3R1cmUvZGF0YWJhc2UvY29ubmVjdGlvbnMvTW9ja0Nvbm5lY3Rpb24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQHRzLW5vY2hlY2tcbmltcG9ydCB7IElDb25uZWN0aW9uLCBRdWVyeVBhcmFtZXRlciB9IGZyb20gJy4uL3R5cGVzJztcclxuXHJcbmV4cG9ydCBjbGFzcyBNb2NrQ29ubmVjdGlvbiBpbXBsZW1lbnRzIElDb25uZWN0aW9uIHtcclxuICBwcml2YXRlIG1vY2tEYXRhID0ge1xyXG4gICAgaXRlbToge1xyXG4gICAgICBpdGVtQ29kaWdvOiAnTU9DSzAwMScsXHJcbiAgICAgIGl0ZW1EZXNjcmljYW86ICdJdGVtIE1vY2sgcGFyYSBUZXN0ZXMnLFxyXG4gICAgICBpdGVtVW5pZGFkZTogJ1VOJyxcclxuICAgIH0sXHJcbiAgICBlc3RhYmVsZWNpbWVudG9zOiBbXHJcbiAgICAgIHtcclxuICAgICAgICBpdGVtQ29kaWdvOiAnTU9DSzAwMScsXHJcbiAgICAgICAgZXN0YWJDb2RpZ286ICcwMScsXHJcbiAgICAgICAgZXN0YWJOb21lOiAnRXN0YWJlbGVjaW1lbnRvIE1vY2snLFxyXG4gICAgICAgIGNvZE9ic29sZXRvOiAwLFxyXG4gICAgICB9LFxyXG4gICAgXSxcclxuICB9O1xyXG5cclxuICBhc3luYyBjb25uZWN0KCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgY29uc29sZS5sb2coJ01vY2sgY29ubmVjdGlvbiBpbmljaWFkYScpO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgcXVlcnkocXVlcnlTdHJpbmc6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICBjb25zb2xlLmxvZygnTW9jayBxdWVyeSBleGVjdXRhZGE6JywgcXVlcnlTdHJpbmcpO1xyXG5cclxuICAgIGlmIChxdWVyeVN0cmluZy5pbmNsdWRlcygncHViLml0ZW0nKSkge1xyXG4gICAgICByZXR1cm4gW3RoaXMubW9ja0RhdGEuaXRlbV07XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHF1ZXJ5U3RyaW5nLmluY2x1ZGVzKCdpdGVtLXVuaS1lc3RhYicpKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLm1vY2tEYXRhLmVzdGFiZWxlY2ltZW50b3M7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIFtdO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgcXVlcnlXaXRoUGFyYW1zKHF1ZXJ5U3RyaW5nOiBzdHJpbmcsIHBhcmFtczogUXVlcnlQYXJhbWV0ZXJbXSk6IFByb21pc2U8YW55PiB7XHJcbiAgICBjb25zb2xlLmxvZygnTW9jayBxdWVyeSBwYXJhbWV0cml6YWRhOicsIHF1ZXJ5U3RyaW5nLCBwYXJhbXMpO1xyXG5cclxuICAgIGlmIChxdWVyeVN0cmluZy5pbmNsdWRlcygncHViLml0ZW0nKSkge1xyXG4gICAgICByZXR1cm4gW3RoaXMubW9ja0RhdGEuaXRlbV07XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHF1ZXJ5U3RyaW5nLmluY2x1ZGVzKCdpdGVtLXVuaS1lc3RhYicpKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLm1vY2tEYXRhLmVzdGFiZWxlY2ltZW50b3M7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIFtdO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgY2xvc2UoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICBjb25zb2xlLmxvZygnTW9jayBjb25uZWN0aW9uIGZlY2hhZGEnKTtcclxuICB9XHJcblxyXG4gIGlzQ29ubmVjdGVkKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG59Il0sInZlcnNpb24iOjN9