{"file":"/home/mano/projetos/datasul/lor0138/.stryker-tmp/sandbox-ES5qcL/src/infrastructure/metrics/MetricsManager.ts","mappings":"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","names":[],"sources":["/home/mano/projetos/datasul/lor0138/.stryker-tmp/sandbox-ES5qcL/src/infrastructure/metrics/MetricsManager.ts"],"sourcesContent":["// @ts-nocheck\n// src/infrastructure/metrics/MetricsManager.ts\n\nimport client from 'prom-client';\nimport { MetricsConfig } from '@shared/types/metrics.types';\n\n/**\n * Gerenciador central de m√©tricas Prometheus\n * Singleton que gerencia todas as m√©tricas da aplica√ß√£o\n */\nexport class MetricsManager {\n  private static instance: MetricsManager | null = null;\n  private registry: client.Registry;\n  private isInitialized: boolean = false;\n\n  // üìä HTTP Metrics\n  public httpRequestsTotal: client.Counter<string>;\n  public httpRequestDuration: client.Histogram<string>;\n  public httpRequestsInProgress: client.Gauge<string>;\n\n  // üóÑÔ∏è Database Metrics\n  public dbQueriesTotal: client.Counter<string>;\n  public dbQueryDuration: client.Histogram<string>;\n  public dbQueriesInProgress: client.Gauge<string>;\n  public dbQueryErrors: client.Counter<string>;\n  public dbConnectionsActive: client.Gauge<string>;\n  public dbConnectionErrors: client.Counter<string>;\n\n  // üîí Rate Limit Metrics\n  public rateLimitRequestsBlocked: client.Counter<string>;\n  public rateLimitRequestsAllowed: client.Counter<string>;\n\n  // ‚öïÔ∏è Health Metrics\n  public healthCheckStatus: client.Gauge<string>;\n  public healthCheckDuration: client.Histogram<string>;\n\n  private constructor(config: MetricsConfig) {\n    this.registry = new client.Registry();\n\n    // Labels padr√£o para todas as m√©tricas\n    if (config.defaultLabels) {\n      this.registry.setDefaultLabels(config.defaultLabels);\n    }\n\n    // Prefixo para todas as m√©tricas\n    const prefix = config.prefix || 'lor0138_';\n\n    // ========================================\n    // üìä HTTP METRICS\n    // ========================================\n    this.httpRequestsTotal = new client.Counter({\n      name: `${prefix}http_requests_total`,\n      help: 'Total de requisi√ß√µes HTTP',\n      labelNames: ['method', 'route', 'status_code'],\n      registers: [this.registry],\n    });\n\n    this.httpRequestDuration = new client.Histogram({\n      name: `${prefix}http_request_duration_seconds`,\n      help: 'Dura√ß√£o das requisi√ß√µes HTTP em segundos',\n      labelNames: ['method', 'route', 'status_code'],\n      buckets: [0.005, 0.01, 0.025, 0.05, 0.1, 0.25, 0.5, 1, 2.5, 5, 10],\n      registers: [this.registry],\n    });\n\n    this.httpRequestsInProgress = new client.Gauge({\n      name: `${prefix}http_requests_in_progress`,\n      help: 'N√∫mero de requisi√ß√µes HTTP em andamento',\n      labelNames: ['method', 'route'],\n      registers: [this.registry],\n    });\n\n    // ========================================\n    // üóÑÔ∏è DATABASE METRICS\n    // ========================================\n    this.dbQueriesTotal = new client.Counter({\n      name: `${prefix}db_queries_total`,\n      help: 'Total de queries executadas',\n      labelNames: ['database', 'operation'],\n      registers: [this.registry],\n    });\n\n    this.dbQueryDuration = new client.Histogram({\n      name: `${prefix}db_query_duration_seconds`,\n      help: 'Dura√ß√£o das queries em segundos',\n      labelNames: ['database', 'operation'],\n      buckets: [0.001, 0.005, 0.01, 0.025, 0.05, 0.1, 0.25, 0.5, 1, 2.5, 5],\n      registers: [this.registry],\n    });\n\n    this.dbQueriesInProgress = new client.Gauge({\n      name: `${prefix}db_queries_in_progress`,\n      help: 'N√∫mero de queries em andamento',\n      labelNames: ['database'],\n      registers: [this.registry],\n    });\n\n    this.dbQueryErrors = new client.Counter({\n      name: `${prefix}db_query_errors_total`,\n      help: 'Total de erros em queries',\n      labelNames: ['database', 'error_type'],\n      registers: [this.registry],\n    });\n\n    this.dbConnectionsActive = new client.Gauge({\n      name: `${prefix}db_connections_active`,\n      help: 'N√∫mero de conex√µes ativas com o banco',\n      labelNames: ['database'],\n      registers: [this.registry],\n    });\n\n    this.dbConnectionErrors = new client.Counter({\n      name: `${prefix}db_connection_errors_total`,\n      help: 'Total de erros de conex√£o',\n      labelNames: ['database', 'error_type'],\n      registers: [this.registry],\n    });\n\n    // ========================================\n    // üîí RATE LIMIT METRICS\n    // ========================================\n    this.rateLimitRequestsBlocked = new client.Counter({\n      name: `${prefix}rate_limit_requests_blocked_total`,\n      help: 'Total de requisi√ß√µes bloqueadas por rate limit',\n      labelNames: ['route', 'user_id', 'reason'],\n      registers: [this.registry],\n    });\n\n    this.rateLimitRequestsAllowed = new client.Counter({\n      name: `${prefix}rate_limit_requests_allowed_total`,\n      help: 'Total de requisi√ß√µes permitidas',\n      labelNames: ['route', 'user_id'],\n      registers: [this.registry],\n    });\n\n    // ========================================\n    // ‚öïÔ∏è HEALTH METRICS\n    // ========================================\n    this.healthCheckStatus = new client.Gauge({\n      name: `${prefix}health_check_status`,\n      help: 'Status do health check (1 = healthy, 0 = unhealthy)',\n      labelNames: ['component'],\n      registers: [this.registry],\n    });\n\n    this.healthCheckDuration = new client.Histogram({\n      name: `${prefix}health_check_duration_seconds`,\n      help: 'Dura√ß√£o do health check em segundos',\n      labelNames: ['component'],\n      buckets: [0.001, 0.005, 0.01, 0.025, 0.05, 0.1],\n      registers: [this.registry],\n    });\n\n    // ========================================\n    // üíª SYSTEM METRICS (Node.js default)\n    // ========================================\n    if (config.collectDefaultMetrics !== false) {\n      client.collectDefaultMetrics({\n        register: this.registry,\n        prefix,\n      });\n    }\n\n    this.isInitialized = true;\n    console.log('‚úÖ MetricsManager inicializado');\n  }\n\n  /**\n   * Retorna inst√¢ncia singleton\n   */\n  static getInstance(config?: MetricsConfig): MetricsManager {\n    if (!this.instance) {\n      const defaultConfig: MetricsConfig = {\n        enabled: true,\n        collectDefaultMetrics: true,\n        prefix: 'lor0138_',\n        defaultLabels: {\n          app: 'lor0138',\n          environment: process.env.NODE_ENV || 'development',\n          version: process.env.npm_package_version || '1.0.0',\n        },\n      };\n\n      this.instance = new MetricsManager({ ...defaultConfig, ...config });\n    }\n\n    return this.instance;\n  }\n\n  /**\n   * Retorna as m√©tricas no formato Prometheus\n   */\n  async getMetrics(): Promise<string> {\n    return this.registry.metrics();\n  }\n\n  /**\n   * Retorna o registro para uso externo\n   */\n  getRegistry(): client.Registry {\n    return this.registry;\n  }\n\n  /**\n   * Reseta todas as m√©tricas (√∫til para testes)\n   */\n  reset(): void {\n    this.registry.resetMetrics();\n  }\n\n  /**\n   * Verifica se est√° inicializado\n   */\n  isReady(): boolean {\n    return this.isInitialized;\n  }\n\n  /**\n   * Registra m√©trica customizada\n   */\n  registerCustomMetric(metric: client.Metric): void {\n    this.registry.registerMetric(metric);\n  }\n}\n\n// Export singleton instance\nexport const metricsManager = MetricsManager.getInstance();"],"version":3}