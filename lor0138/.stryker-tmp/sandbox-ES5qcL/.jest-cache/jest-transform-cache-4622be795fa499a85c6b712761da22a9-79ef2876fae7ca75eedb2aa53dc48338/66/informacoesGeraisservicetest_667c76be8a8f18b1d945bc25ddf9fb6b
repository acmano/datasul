b147ba6f41b50195db989476b92e3417
"use strict";
// @ts-nocheck
// tests/unit/services/informacoesGerais.service.test.ts
Object.defineProperty(exports, "__esModule", { value: true });
// Mock do Repository
jest.mock('@api/lor0138/item/dadosCadastrais/informacoesGerais/repository/informacoesGerais.repository');
// Mock do logger
jest.mock('@shared/utils/logger', () => ({
    log: {
        info: jest.fn(),
        error: jest.fn(),
        warn: jest.fn(),
    },
}));
const informacoesGerais_service_1 = require("@api/lor0138/item/dadosCadastrais/informacoesGerais/service/informacoesGerais.service");
const informacoesGerais_repository_1 = require("@api/lor0138/item/dadosCadastrais/informacoesGerais/repository/informacoesGerais.repository");
const CustomErrors_1 = require("@shared/errors/CustomErrors");
const item_factory_1 = require("../../factories/item.factory");
describe('Service - InformacoesGeraisService', () => {
    beforeEach(() => {
        jest.clearAllMocks();
    });
    // ========================================
    // CASOS DE SUCESSO
    // ========================================
    describe('getInformacoesGerais - Sucesso', () => {
        it('deve retornar informações completas do item', async () => {
            const mockItem = (0, item_factory_1.createItemMasterQueryResult)();
            const mockEstabs = [
                (0, item_factory_1.createItemEstabQueryResult)(),
                (0, item_factory_1.createItemEstabQueryResult)({ estabCodigo: '02.01', codObsoleto: 1 })
            ];
            informacoesGerais_repository_1.ItemInformacoesGeraisRepository.getItemMaster.mockResolvedValue(mockItem);
            informacoesGerais_repository_1.ItemInformacoesGeraisRepository.getItemEstabelecimentos.mockResolvedValue(mockEstabs);
            const result = await informacoesGerais_service_1.InformacoesGeraisService.getInformacoesGerais('7530110');
            expect(result).toBeDefined();
            expect(result.identificacaoItemCodigo).toBe('7530110');
            expect(result.identificacaoItemDescricao).toBe('VALVULA DE ESFERA 1/2" BRONZE');
            expect(result.identificacaoItemUnidade).toBe('UN');
            expect(result.identificacaoItensEstabelecimentos).toHaveLength(2);
        });
        it('deve transformar dados do repository para DTO de resposta', async () => {
            const mockItem = (0, item_factory_1.createItemMasterQueryResult)();
            const mockEstabs = [(0, item_factory_1.createItemEstabQueryResult)()];
            informacoesGerais_repository_1.ItemInformacoesGeraisRepository.getItemMaster.mockResolvedValue(mockItem);
            informacoesGerais_repository_1.ItemInformacoesGeraisRepository.getItemEstabelecimentos.mockResolvedValue(mockEstabs);
            const result = await informacoesGerais_service_1.InformacoesGeraisService.getInformacoesGerais('7530110');
            // Valida mapeamento de campos
            expect(result).toHaveProperty('identificacaoItemCodigo');
            expect(result).toHaveProperty('identificacaoItemDescricao');
            expect(result).toHaveProperty('identificacaoItemUnidade');
            expect(result).toHaveProperty('identificacaoItensEstabelecimentos');
        });
        it('deve calcular statusIndex corretamente (0 = ativo)', async () => {
            const mockItem = (0, item_factory_1.createItemMasterQueryResult)();
            const mockEstabs = [
                (0, item_factory_1.createItemEstabQueryResult)({ codObsoleto: 0 }) // Ativo
            ];
            informacoesGerais_repository_1.ItemInformacoesGeraisRepository.getItemMaster.mockResolvedValue(mockItem);
            informacoesGerais_repository_1.ItemInformacoesGeraisRepository.getItemEstabelecimentos.mockResolvedValue(mockEstabs);
            const result = await informacoesGerais_service_1.InformacoesGeraisService.getInformacoesGerais('7530110');
            expect(result.identificacaoItensEstabelecimentos[0].statusIndex).toBe(1);
        });
        it('deve calcular statusIndex corretamente (1+ = inativo)', async () => {
            const mockItem = (0, item_factory_1.createItemMasterQueryResult)();
            const mockEstabs = [
                (0, item_factory_1.createItemEstabQueryResult)({ codObsoleto: 1 }), // Inativo
                (0, item_factory_1.createItemEstabQueryResult)({ codObsoleto: 2 }), // Inativo
                (0, item_factory_1.createItemEstabQueryResult)({ codObsoleto: 99 }) // Inativo
            ];
            informacoesGerais_repository_1.ItemInformacoesGeraisRepository.getItemMaster.mockResolvedValue(mockItem);
            informacoesGerais_repository_1.ItemInformacoesGeraisRepository.getItemEstabelecimentos.mockResolvedValue(mockEstabs);
            const result = await informacoesGerais_service_1.InformacoesGeraisService.getInformacoesGerais('7530110');
            expect(result.identificacaoItensEstabelecimentos[0].statusIndex).toBe(2);
            expect(result.identificacaoItensEstabelecimentos[1].statusIndex).toBe(2);
            expect(result.identificacaoItensEstabelecimentos[2].statusIndex).toBe(2);
        });
        it('deve retornar item com array vazio de estabelecimentos', async () => {
            const mockItem = (0, item_factory_1.createItemMasterQueryResult)();
            informacoesGerais_repository_1.ItemInformacoesGeraisRepository.getItemMaster.mockResolvedValue(mockItem);
            informacoesGerais_repository_1.ItemInformacoesGeraisRepository.getItemEstabelecimentos.mockResolvedValue([]);
            const result = await informacoesGerais_service_1.InformacoesGeraisService.getInformacoesGerais('7530110');
            expect(result.identificacaoItensEstabelecimentos).toEqual([]);
        });
        it('deve mapear todos os campos do estabelecimento', async () => {
            const mockItem = (0, item_factory_1.createItemMasterQueryResult)();
            const mockEstabs = [(0, item_factory_1.createItemEstabQueryResult)({
                    itemCodigo: '7530110',
                    estabCodigo: '01.01',
                    estabNome: 'CD São Paulo',
                    codObsoleto: 0
                })];
            informacoesGerais_repository_1.ItemInformacoesGeraisRepository.getItemMaster.mockResolvedValue(mockItem);
            informacoesGerais_repository_1.ItemInformacoesGeraisRepository.getItemEstabelecimentos.mockResolvedValue(mockEstabs);
            const result = await informacoesGerais_service_1.InformacoesGeraisService.getInformacoesGerais('7530110');
            const estab = result.identificacaoItensEstabelecimentos[0];
            expect(estab.itemCodigo).toBe('7530110');
            expect(estab.estabCodigo).toBe('01.01');
            expect(estab.estabNome).toBe('CD São Paulo');
            expect(estab.statusIndex).toBe(1);
        });
    });
    // ========================================
    // ITEM NÃO ENCONTRADO
    // ========================================
    describe('getInformacoesGerais - Item Não Encontrado', () => {
        it('deve lançar ItemNotFoundError quando item não existe', async () => {
            informacoesGerais_repository_1.ItemInformacoesGeraisRepository.getItemMaster.mockResolvedValue(null);
            await expect(informacoesGerais_service_1.InformacoesGeraisService.getInformacoesGerais('INEXISTENTE')).rejects.toThrow(CustomErrors_1.ItemNotFoundError);
        });
        it('deve incluir código do item na mensagem de erro', async () => {
            informacoesGerais_repository_1.ItemInformacoesGeraisRepository.getItemMaster.mockResolvedValue(null);
            try {
                await informacoesGerais_service_1.InformacoesGeraisService.getInformacoesGerais('ABC123');
                fail('Deveria ter lançado erro');
            }
            catch (error) {
                expect(error).toBeInstanceOf(CustomErrors_1.ItemNotFoundError);
                expect(error.message).toContain('ABC123');
            }
        });
        it('deve logar quando item não é encontrado', async () => {
            const { log } = require('@shared/utils/logger');
            informacoesGerais_repository_1.ItemInformacoesGeraisRepository.getItemMaster.mockResolvedValue(null);
            try {
                await informacoesGerais_service_1.InformacoesGeraisService.getInformacoesGerais('7530110');
            }
            catch (error) {
                // Esperado
            }
            expect(log.info).toHaveBeenCalledWith('Item não encontrado', { itemCodigo: '7530110' });
        });
    });
    // ========================================
    // TRATAMENTO DE ERROS
    // ========================================
    describe('getInformacoesGerais - Tratamento de Erros', () => {
        it('deve re-lançar ItemNotFoundError sem conversão', async () => {
            const notFoundError = new CustomErrors_1.ItemNotFoundError('7530110');
            informacoesGerais_repository_1.ItemInformacoesGeraisRepository.getItemMaster.mockRejectedValue(notFoundError);
            await expect(informacoesGerais_service_1.InformacoesGeraisService.getInformacoesGerais('7530110')).rejects.toThrow(CustomErrors_1.ItemNotFoundError);
        });
        it('deve converter erros de banco em DatabaseError', async () => {
            const dbError = new Error('Conexão perdida');
            informacoesGerais_repository_1.ItemInformacoesGeraisRepository.getItemMaster.mockRejectedValue(dbError);
            await expect(informacoesGerais_service_1.InformacoesGeraisService.getInformacoesGerais('7530110')).rejects.toThrow(CustomErrors_1.DatabaseError);
        });
        it('deve incluir erro original em DatabaseError', async () => {
            const originalError = new Error('Timeout SQL');
            informacoesGerais_repository_1.ItemInformacoesGeraisRepository.getItemMaster.mockRejectedValue(originalError);
            try {
                await informacoesGerais_service_1.InformacoesGeraisService.getInformacoesGerais('7530110');
                fail('Deveria ter lançado erro');
            }
            catch (error) {
                expect(error).toBeInstanceOf(CustomErrors_1.DatabaseError);
                expect(error.message).toContain('Falha ao buscar');
            }
        });
        it('deve logar erros de banco', async () => {
            const { log } = require('@shared/utils/logger');
            const dbError = new Error('Erro SQL');
            informacoesGerais_repository_1.ItemInformacoesGeraisRepository.getItemMaster.mockRejectedValue(dbError);
            try {
                await informacoesGerais_service_1.InformacoesGeraisService.getInformacoesGerais('7530110');
            }
            catch (error) {
                // Esperado
            }
            expect(log.error).toHaveBeenCalledWith('Erro ao buscar informações gerais', expect.objectContaining({
                itemCodigo: '7530110',
                error: 'Erro SQL'
            }));
        });
        it('deve tratar erro na busca de estabelecimentos', async () => {
            const mockItem = (0, item_factory_1.createItemMasterQueryResult)();
            const estabError = new Error('Erro ao buscar estabelecimentos');
            informacoesGerais_repository_1.ItemInformacoesGeraisRepository.getItemMaster.mockResolvedValue(mockItem);
            informacoesGerais_repository_1.ItemInformacoesGeraisRepository.getItemEstabelecimentos.mockRejectedValue(estabError);
            await expect(informacoesGerais_service_1.InformacoesGeraisService.getInformacoesGerais('7530110')).rejects.toThrow(CustomErrors_1.DatabaseError);
        });
    });
    // ========================================
    // INTEGRAÇÃO COM REPOSITORY
    // ========================================
    describe('Integração com Repository', () => {
        it('deve chamar getItemMaster com código correto', async () => {
            const mockItem = (0, item_factory_1.createItemMasterQueryResult)();
            informacoesGerais_repository_1.ItemInformacoesGeraisRepository.getItemMaster.mockResolvedValue(mockItem);
            informacoesGerais_repository_1.ItemInformacoesGeraisRepository.getItemEstabelecimentos.mockResolvedValue([]);
            await informacoesGerais_service_1.InformacoesGeraisService.getInformacoesGerais('ABC123');
            expect(informacoesGerais_repository_1.ItemInformacoesGeraisRepository.getItemMaster).toHaveBeenCalledWith('ABC123');
        });
        it('deve chamar getItemEstabelecimentos com código correto', async () => {
            const mockItem = (0, item_factory_1.createItemMasterQueryResult)();
            informacoesGerais_repository_1.ItemInformacoesGeraisRepository.getItemMaster.mockResolvedValue(mockItem);
            informacoesGerais_repository_1.ItemInformacoesGeraisRepository.getItemEstabelecimentos.mockResolvedValue([]);
            await informacoesGerais_service_1.InformacoesGeraisService.getInformacoesGerais('ABC123');
            expect(informacoesGerais_repository_1.ItemInformacoesGeraisRepository.getItemEstabelecimentos).toHaveBeenCalledWith('ABC123');
        });
        it('deve chamar Repository na ordem correta (master → estabelecimentos)', async () => {
            const mockItem = (0, item_factory_1.createItemMasterQueryResult)();
            const callOrder = [];
            informacoesGerais_repository_1.ItemInformacoesGeraisRepository.getItemMaster.mockImplementation(async () => {
                callOrder.push('master');
                return mockItem;
            });
            informacoesGerais_repository_1.ItemInformacoesGeraisRepository.getItemEstabelecimentos.mockImplementation(async () => {
                callOrder.push('estabelecimentos');
                return [];
            });
            await informacoesGerais_service_1.InformacoesGeraisService.getInformacoesGerais('7530110');
            expect(callOrder).toEqual(['master', 'estabelecimentos']);
        });
        it('não deve buscar estabelecimentos se item não existe', async () => {
            informacoesGerais_repository_1.ItemInformacoesGeraisRepository.getItemMaster.mockResolvedValue(null);
            try {
                await informacoesGerais_service_1.InformacoesGeraisService.getInformacoesGerais('7530110');
            }
            catch (error) {
                // Esperado
            }
            expect(informacoesGerais_repository_1.ItemInformacoesGeraisRepository.getItemEstabelecimentos).not.toHaveBeenCalled();
        });
    });
    // ========================================
    // EDGE CASES
    // ========================================
    describe('Edge Cases', () => {
        it('deve tratar item com descrição vazia', async () => {
            const mockItem = (0, item_factory_1.createItemMasterQueryResult)({ itemDescricao: '' });
            informacoesGerais_repository_1.ItemInformacoesGeraisRepository.getItemMaster.mockResolvedValue(mockItem);
            informacoesGerais_repository_1.ItemInformacoesGeraisRepository.getItemEstabelecimentos.mockResolvedValue([]);
            const result = await informacoesGerais_service_1.InformacoesGeraisService.getInformacoesGerais('7530110');
            expect(result.identificacaoItemDescricao).toBe('');
        });
        it('deve tratar múltiplos estabelecimentos (10+)', async () => {
            const mockItem = (0, item_factory_1.createItemMasterQueryResult)();
            const mockEstabs = Array.from({ length: 15 }, (_, i) => (0, item_factory_1.createItemEstabQueryResult)({
                estabCodigo: `0${i + 1}.01`,
                codObsoleto: i % 2
            }));
            informacoesGerais_repository_1.ItemInformacoesGeraisRepository.getItemMaster.mockResolvedValue(mockItem);
            informacoesGerais_repository_1.ItemInformacoesGeraisRepository.getItemEstabelecimentos.mockResolvedValue(mockEstabs);
            const result = await informacoesGerais_service_1.InformacoesGeraisService.getInformacoesGerais('7530110');
            expect(result.identificacaoItensEstabelecimentos).toHaveLength(15);
        });
        it('deve tratar nome de estabelecimento null', async () => {
            const mockItem = (0, item_factory_1.createItemMasterQueryResult)();
            const mockEstabs = [
                (0, item_factory_1.createItemEstabQueryResult)({ estabNome: null })
            ];
            informacoesGerais_repository_1.ItemInformacoesGeraisRepository.getItemMaster.mockResolvedValue(mockItem);
            informacoesGerais_repository_1.ItemInformacoesGeraisRepository.getItemEstabelecimentos.mockResolvedValue(mockEstabs);
            const result = await informacoesGerais_service_1.InformacoesGeraisService.getInformacoesGerais('7530110');
            expect(result.identificacaoItensEstabelecimentos[0].estabNome).toBeNull();
        });
        it('deve tratar valores negativos de codObsoleto', async () => {
            const mockItem = (0, item_factory_1.createItemMasterQueryResult)();
            const mockEstabs = [
                (0, item_factory_1.createItemEstabQueryResult)({ codObsoleto: -1 })
            ];
            informacoesGerais_repository_1.ItemInformacoesGeraisRepository.getItemMaster.mockResolvedValue(mockItem);
            informacoesGerais_repository_1.ItemInformacoesGeraisRepository.getItemEstabelecimentos.mockResolvedValue(mockEstabs);
            const result = await informacoesGerais_service_1.InformacoesGeraisService.getInformacoesGerais('7530110');
            // -1 não é 0, então statusIndex = 2
            expect(result.identificacaoItensEstabelecimentos[0].statusIndex).toBe(2);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,