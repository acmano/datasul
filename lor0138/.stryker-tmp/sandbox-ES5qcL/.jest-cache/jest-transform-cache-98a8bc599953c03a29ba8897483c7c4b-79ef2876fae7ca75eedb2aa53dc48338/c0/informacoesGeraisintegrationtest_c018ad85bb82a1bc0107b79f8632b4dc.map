{"file":"/home/mano/projetos/datasul/lor0138/tests/integration/api/informacoesGerais.integration.test.ts","mappings":"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","names":[],"sources":["/home/mano/projetos/datasul/lor0138/tests/integration/api/informacoesGerais.integration.test.ts"],"sourcesContent":["// tests/integration/api/informacoesGerais.integration.test.ts\n\nimport request from 'supertest';\nimport { DatabaseTestHelper } from '../../helpers/database.helper';\nimport app from '../../../src/app';\n\n/**\n * TESTES DE INTEGRAÇÃO COM BANCO REAL\n * \n * Estes testes conectam no banco de produção (somente leitura)\n * Se o banco não estiver disponível, usam MOCK automaticamente\n */\n\ndescribe('INTEGRAÇÃO - API InformacoesGerais (Banco Real)', () => {\n  \n  let usingRealDatabase = false;\n  let testItemCode: string;\n\n  // ========================================\n  // SETUP\n  // ========================================\n  beforeAll(async () => {\n    await DatabaseTestHelper.initialize();\n    usingRealDatabase = DatabaseTestHelper.isUsingRealDatabase();\n    \n    // Buscar código de item real para testes\n    testItemCode = await DatabaseTestHelper.getTestItemCode();\n    \n    console.log(`🔗 Banco: ${usingRealDatabase ? 'REAL' : 'MOCK'}`);\n    console.log(`📦 Item de teste: ${testItemCode}`);\n  });\n\n  afterAll(async () => {\n    await DatabaseTestHelper.cleanup();\n  });\n\n  // ========================================\n  // TESTE 1: CONEXÃO COM BANCO\n  // ========================================\n  describe('Conexão com Banco de Dados', () => {\n    \n    it('deve conectar com banco ou usar mock', async () => {\n      const isReady = await DatabaseTestHelper.waitUntilReady(5000);\n      expect(isReady).toBe(true);\n    });\n\n    it('deve reportar status correto no health check', async () => {\n      const response = await request(app)\n        .get('/health')\n        .expect((res) => {\n          expect([200, 503]).toContain(res.status);\n        });\n\n      expect(response.body).toHaveProperty('database');\n      expect(response.body.database).toHaveProperty('connected');\n      \n      if (usingRealDatabase) {\n        expect(response.body.database.connected).toBe(true);\n        expect(response.body.database.type).toBe('sqlserver');\n      }\n    });\n\n  });\n\n  // ========================================\n  // TESTE 2: BUSCAR ITEM REAL\n  // ========================================\n  describe('Buscar Informações Gerais (Dados Reais)', () => {\n    \n    it('deve buscar item existente com sucesso', async () => {\n      const startTime = Date.now();\n      \n      const response = await request(app)\n        .get(`/api/lor0138/item/dadosCadastrais/informacoesGerais/${testItemCode}`)\n        .expect(200);\n\n      const duration = Date.now() - startTime;\n\n      // Validações básicas\n      expect(response.body).toHaveProperty('success', true);\n      expect(response.body).toHaveProperty('data');\n      \n      // Se banco real, validar dados\n      if (usingRealDatabase) {\n        expect(response.body.data).toHaveProperty('item');\n        expect(response.body.data.item).toHaveProperty('codigo', testItemCode);\n        expect(response.body.data.item).toHaveProperty('descricao');\n        expect(response.body.data.item).toHaveProperty('unidade');\n        \n        // Validar performance (banco real deve responder rápido)\n        expect(duration).toRespondWithin(5000); // max 5s\n      }\n    });\n\n    it('deve retornar 404 para item inexistente', async () => {\n      const invalidCode = 'INVALID999';\n      \n      const response = await request(app)\n        .get(`/api/lor0138/item/dadosCadastrais/informacoesGerais/${invalidCode}`)\n        .expect(404);\n\n      expect(response.body).toHaveProperty('error');\n      expect(response.body.message).toMatch(/não encontrado/i);\n    });\n\n  });\n\n  // ========================================\n  // TESTE 3: VALIDAÇÃO COM DADOS REAIS\n  // ========================================\n  describe('Validação de Dados do Banco', () => {\n    \n    it('deve retornar estrutura de dados correta', async () => {\n      const response = await request(app)\n        .get(`/api/lor0138/item/dadosCadastrais/informacoesGerais/${testItemCode}`)\n        .expect(200);\n\n      const { data } = response.body;\n\n      // Estrutura esperada\n      expect(data).toHaveProperty('item');\n      expect(data).toHaveProperty('estabelecimentos');\n\n      // Item deve ter campos obrigatórios\n      expect(data.item).toMatchObject({\n        codigo: expect.any(String),\n        descricao: expect.any(String),\n        unidade: expect.any(String),\n      });\n\n      // Estabelecimentos deve ser array\n      expect(Array.isArray(data.estabelecimentos)).toBe(true);\n    });\n\n    it('campos do item devem ter tipos corretos', async () => {\n      const response = await request(app)\n        .get(`/api/lor0138/item/dadosCadastrais/informacoesGerais/${testItemCode}`)\n        .expect(200);\n\n      const { item } = response.body.data;\n\n      expect(typeof item.codigo).toBe('string');\n      expect(typeof item.descricao).toBe('string');\n      expect(typeof item.unidade).toBe('string');\n      \n      // Se tiver campos opcionais\n      if (item.tipo) {\n        expect(typeof item.tipo).toBe('string');\n      }\n    });\n\n  });\n\n  // ========================================\n  // TESTE 4: PERFORMANCE COM BANCO REAL\n  // ========================================\n  describe('Performance (Banco Real)', () => {\n    \n    it('deve responder em menos de 3 segundos', async function() {\n      // Pular se não for banco real\n      if (!usingRealDatabase) {\n        console.log('⏭️  Teste de performance pulado - usando mock');\n        return;\n      }\n\n      const startTime = Date.now();\n      \n      await request(app)\n        .get(`/api/lor0138/item/dadosCadastrais/informacoesGerais/${testItemCode}`)\n        .expect(200);\n\n      const duration = Date.now() - startTime;\n      expect(duration).toBeLessThan(3000);\n    });\n\n    it('deve manter performance consistente em múltiplas requisições', async function() {\n      if (!usingRealDatabase) {\n        console.log('⏭️  Teste de performance pulado - usando mock');\n        return;\n      }\n\n      const durations: number[] = [];\n      const iterations = 5;\n\n      for (let i = 0; i < iterations; i++) {\n        const start = Date.now();\n        \n        await request(app)\n          .get(`/api/lor0138/item/dadosCadastrais/informacoesGerais/${testItemCode}`)\n          .expect(200);\n\n        durations.push(Date.now() - start);\n      }\n\n      const avgDuration = durations.reduce((a, b) => a + b, 0) / durations.length;\n      \n      console.log(`📊 Média de ${iterations} requisições: ${avgDuration.toFixed(0)}ms`);\n      expect(avgDuration).toBeLessThan(3000);\n    });\n\n  });\n\n  // ========================================\n  // TESTE 5: EDGE CASES COM BANCO REAL\n  // ========================================\n  describe('Edge Cases (Banco Real)', () => {\n    \n    it('deve buscar item com código alfanumérico', async () => {\n      // Usar código conhecido ou pular se não houver\n      const codes = DatabaseTestHelper.getKnownTestCodes();\n      \n      const response = await request(app)\n        .get(`/api/lor0138/item/dadosCadastrais/informacoesGerais/${codes.validItem}`)\n        .expect((res) => {\n          // Aceita 200 (encontrado) ou 404 (não encontrado, mas validou)\n          expect([200, 404]).toContain(res.status);\n        });\n\n      if (response.status === 200) {\n        expect(response.body.success).toBe(true);\n      }\n    });\n\n    it('deve validar código com 16 caracteres (máximo)', async () => {\n      const maxCode = '1234567890123456';\n      \n      const response = await request(app)\n        .get(`/api/lor0138/item/dadosCadastrais/informacoesGerais/${maxCode}`)\n        .expect((res) => {\n          expect([200, 404]).toContain(res.status);\n        });\n\n      // Não deve dar erro de validação (400)\n      expect(response.status).not.toBe(400);\n    });\n\n    it('deve rejeitar código com 17 caracteres', async () => {\n      const tooLongCode = '12345678901234567'; // 17 chars\n      \n      const response = await request(app)\n        .get(`/api/lor0138/item/dadosCadastrais/informacoesGerais/${tooLongCode}`)\n        .expect(400);\n\n      expect(response.body).toHaveProperty('error');\n    });\n\n  });\n\n  // ========================================\n  // TESTE 6: ESTABELECIMENTOS (se disponível)\n  // ========================================\n  describe('Estabelecimentos do Item', () => {\n    \n    it('deve retornar estabelecimentos se existirem', async () => {\n      const response = await request(app)\n        .get(`/api/lor0138/item/dadosCadastrais/informacoesGerais/${testItemCode}`)\n        .expect(200);\n\n      const { estabelecimentos } = response.body.data;\n\n      expect(Array.isArray(estabelecimentos)).toBe(true);\n\n      // Se houver estabelecimentos, validar estrutura\n      if (estabelecimentos.length > 0) {\n        const estab = estabelecimentos[0];\n        \n        expect(estab).toHaveProperty('codigo');\n        expect(estab).toHaveProperty('nome');\n        expect(typeof estab.codigo).toBe('string');\n        expect(typeof estab.nome).toBe('string');\n      }\n    });\n\n  });\n\n  // ========================================\n  // TESTE 7: CORRELATION ID E HEADERS\n  // ========================================\n  describe('Headers e Correlation ID', () => {\n    \n    it('deve incluir Correlation ID na resposta', async () => {\n      const response = await request(app)\n        .get(`/api/lor0138/item/dadosCadastrais/informacoesGerais/${testItemCode}`);\n\n      expect(response.headers['x-correlation-id']).toBeDefined();\n    });\n\n    it('deve aceitar Correlation ID customizado', async () => {\n      const customId = 'integration-test-123';\n      \n      const response = await request(app)\n        .get(`/api/lor0138/item/dadosCadastrais/informacoesGerais/${testItemCode}`)\n        .set('X-Correlation-ID', customId);\n\n      expect(response.headers['x-correlation-id']).toBe(customId);\n    });\n\n  });\n\n  // ========================================\n  // TESTE 8: TIMEOUT E RESILÊNCIA\n  // ========================================\n  describe('Timeout e Resilência', () => {\n    \n    it('não deve travar em requisição inválida', async () => {\n      const response = await request(app)\n        .get('/api/lor0138/item/dadosCadastrais/informacoesGerais/INVALID')\n        .timeout(5000); // 5s max\n\n      expect(response.status).toBeDefined();\n      expect([200, 404, 400]).toContain(response.status);\n    });\n\n  });\n\n  // ========================================\n  // TESTE 9: COMPARAÇÃO MOCK vs REAL\n  // ========================================\n  describe('Comparação Mock vs Real', () => {\n    \n    it('deve informar qual fonte de dados está sendo usada', () => {\n      console.log(`\n        📊 RESULTADO DOS TESTES:\n        - Fonte de dados: ${usingRealDatabase ? 'BANCO REAL' : 'MOCK'}\n        - Código testado: ${testItemCode}\n        - Ambiente: ${process.env.NODE_ENV}\n      `);\n\n      expect(usingRealDatabase).toBeDefined();\n    });\n\n  });\n\n});"],"version":3}