{"file":"/home/mano/projetos/datasul/lor0138/src/api/metrics/routes.ts","mappings":";AAAA,4BAA4B;;AAE5B,qCAAoD;AACpD,2EAAwE;AAExE,MAAM,MAAM,GAAG,IAAA,gBAAM,GAAE,CAAC;AAExB;;;;;GAKG;AACH,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,EAAE,GAAY,EAAE,GAAa,EAAE,EAAE;IACpD,IAAI,CAAC;QACH,GAAG,CAAC,GAAG,CAAC,cAAc,EAAE,+BAAc,CAAC,WAAW,EAAE,CAAC,WAAW,CAAC,CAAC;QAClE,MAAM,OAAO,GAAG,MAAM,+BAAc,CAAC,UAAU,EAAE,CAAC;QAClD,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IACnB,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,yBAAyB,EAAE,KAAK,CAAC,CAAC;QAChD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,KAAK,EAAE,wBAAwB;YAC/B,OAAO,EAAG,KAAe,CAAC,OAAO;SAClC,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC,CAAC;AAEH;;;GAGG;AACH,MAAM,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC,GAAY,EAAE,GAAa,EAAE,EAAE;IACpD,MAAM,OAAO,GAAG,+BAAc,CAAC,OAAO,EAAE,CAAC;IAEzC,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;QACnC,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,WAAW;QACzC,OAAO,EAAE;YACP,OAAO,EAAE,IAAI;YACb,KAAK,EAAE,OAAO;SACf;KACF,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,kBAAe,MAAM,CAAC","names":[],"sources":["/home/mano/projetos/datasul/lor0138/src/api/metrics/routes.ts"],"sourcesContent":["// src/api/metrics/routes.ts\n\nimport { Router, Request, Response } from 'express';\nimport { metricsManager } from '@infrastructure/metrics/MetricsManager';\n\nconst router = Router();\n\n/**\n * GET /metrics\n * Retorna todas as métricas no formato Prometheus\n * \n * Este endpoint é usado pelo Prometheus para scraping\n */\nrouter.get('/', async (req: Request, res: Response) => {\n  try {\n    res.set('Content-Type', metricsManager.getRegistry().contentType);\n    const metrics = await metricsManager.getMetrics();\n    res.end(metrics);\n  } catch (error) {\n    console.error('Erro ao obter métricas:', error);\n    res.status(500).json({\n      error: 'Erro ao obter métricas',\n      message: (error as Error).message,\n    });\n  }\n});\n\n/**\n * GET /metrics/health\n * Health check específico para métricas\n */\nrouter.get('/health', (req: Request, res: Response) => {\n  const isReady = metricsManager.isReady();\n\n  res.status(isReady ? 200 : 503).json({\n    status: isReady ? 'healthy' : 'unhealthy',\n    metrics: {\n      enabled: true,\n      ready: isReady,\n    },\n  });\n});\n\nexport default router;"],"version":3}