// src/server.ts

import { App } from './app'; // ‚úÖ CORRIGIDO: import named export
import { envConfig } from './config/env.config'; // ‚úÖ CORRIGIDO: path relativo
import { DatabaseManager } from './infrastructure/database/DatabaseManager'; // ‚úÖ CORRIGIDO: path relativo
import { ConfigValidator } from './config/configValidator'; // ‚úÖ CORRIGIDO: path relativo

/**
 * Inicializa o servidor
 */
async function startServer() {
  try {
    // ========================================
    // 1. VALIDA CONFIGURA√á√ïES (Fail Fast)
    // ========================================
    ConfigValidator.validateAndExit(); // Encerra se houver erros
    ConfigValidator.printSummary(); // Mostra resumo

    // ========================================
    // 2. INICIALIZA BANCO DE DADOS
    // ========================================
    console.log('üîå Inicializando conex√µes com banco de dados...');
    await DatabaseManager.initialize();
    console.log('‚úÖ Banco de dados conectado!\n');

    // ========================================
    // 3. CRIA INST√ÇNCIA DA APLICA√á√ÉO
    // ========================================
    // ‚úÖ CORRIGIDO: instanciar a classe App
    const appInstance = new App();

    // ========================================
    // 4. INICIA SERVIDOR HTTP
    // ========================================
    // ‚úÖ CORRIGIDO: usar appInstance.app para acessar o Express
    const server = appInstance.app.listen(envConfig.port, () => {
      console.log('üöÄ Servidor iniciado com sucesso!');
      console.log(`   URL: http://localhost:${envConfig.port}`);
      console.log(`   Ambiente: ${envConfig.nodeEnv}`);
      console.log(`   Health Check: http://localhost:${envConfig.port}/health`);
      console.log(`   API Docs: http://localhost:${envConfig.port}/api-docs`);
      console.log('');
    });

    // ========================================
    // 5. GRACEFUL SHUTDOWN
    // ========================================
    const gracefulShutdown = async (signal: string) => {
      console.log(`\n${signal} recebido, fechando servidor...`);

      // Para de aceitar novas conex√µes
      server.close(async () => {
        console.log('üîå Servidor HTTP fechado');

        try {
          // Fecha conex√µes do banco
          await DatabaseManager.close();
          console.log('üîå Conex√µes com banco fechadas');

          // Encerra o processo
          process.exit(0);
        } catch (error) {
          console.error('Erro ao fechar conex√µes:', error);
          process.exit(1);
        }
      });

      // Timeout: for√ßa encerramento ap√≥s 10 segundos
      setTimeout(() => {
        console.error('‚ùå Timeout ao fechar servidor, for√ßando encerramento...');
        process.exit(1);
      }, 10000);
    };

    // Escuta sinais de encerramento
    process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
    process.on('SIGINT', () => gracefulShutdown('SIGINT'));

    // Trata erros n√£o capturados
    process.on('unhandledRejection', (reason, promise) => {
      console.error('‚ùå Unhandled Rejection:', reason);
      console.error('   Promise:', promise);
    });

    process.on('uncaughtException', (error) => {
      console.error('‚ùå Uncaught Exception:', error);
      process.exit(1);
    });
  } catch (error) {
    console.error('‚ùå Erro ao iniciar servidor:', error);
    process.exit(1);
  }
}

// Inicia o servidor
startServer();