// src/infrastructure/database/config/sqlServerConfig.ts

/**
 * @fileoverview Configura√ß√£o de conex√£o SQL Server usando env.config centralizado
 *
 * ‚úÖ VANTAGEM: Este arquivo usa parseTimeout() do env.config.ts
 * Isso significa que aceita m√∫ltiplos formatos de timeout no .env:
 * - '30s' ‚Üí 30000ms
 * - '30000ms' ‚Üí 30000ms
 * - '30000' ‚Üí 30000ms
 * - '5m' ‚Üí 300000ms
 *
 * Diferen√ßas entre arquivos de configura√ß√£o:
 * - **sqlServerConfig.ts** (este arquivo): ‚úÖ parseTimeout(), aceita '30s'
 * - **serverConfig.ts**: parseInt() direto, APENAS ms puros
 * - **env.config.ts**: configura√ß√£o centralizada com parseTimeout()
 *
 * ‚ö†Ô∏è IMPORTANTE: Este √© o arquivo RECOMENDADO para usar.
 * O serverConfig.ts existe para compatibilidade legacy.
 *
 * @module infrastructure/database/config/sqlServerConfig
 * @requires ../types
 * @requires @config/env.config
 *
 * @example Uso recomendado
 * ```typescript
 * import { getSqlServerConfigEmp, getSqlServerConfigMult } from './sqlServerConfig';
 *
 * const empConfig = getSqlServerConfigEmp();
 * const connection = new SqlServerConnection(empConfig, 'EMP');
 * await connection.connect();
 * ```
 *
 * @example Formato de .env suportado
 * ```env
 * # ‚úÖ TODAS as formas abaixo funcionam
 * DB_CONNECTION_TIMEOUT=30s      # Segundos
 * DB_CONNECTION_TIMEOUT=30000ms  # Milissegundos
 * DB_CONNECTION_TIMEOUT=30000    # N√∫mero puro
 * DB_CONNECTION_TIMEOUT=0.5m     # Minutos (0.5m = 30s)
 * ```
 *
 * @see {@link serverConfig.ts} para vers√£o sem parseTimeout()
 * @see {@link env.config.ts} para configura√ß√£o centralizada
 * @see {@link ARCHITECTURE.md} para arquitetura completa
 */

import { DatabaseConfig } from '../types';
import { config } from '@config/env.config';

/**
 * Retorna configura√ß√£o de conex√£o SQL Server para o banco EMP
 *
 * @function getSqlServerConfigEmp
 *
 * @returns {DatabaseConfig} Configura√ß√£o completa para conex√£o EMP
 *
 * @description
 * Constr√≥i objeto de configura√ß√£o para conex√£o com o banco EMP
 * lendo da configura√ß√£o centralizada (env.config.ts).
 *
 * Vantagens desta abordagem:
 * - ‚úÖ Usa parseTimeout() ‚Üí aceita '30s', '30000ms', '5m'
 * - ‚úÖ Configura√ß√£o centralizada em um √∫nico lugar
 * - ‚úÖ Valida√ß√£o de configs via ConfigValidator
 * - ‚úÖ Valores padr√£o consistentes
 * - ‚úÖ F√°cil manuten√ß√£o e testes
 *
 * Configura√ß√µes lidas de env.config.ts:
 * - server: Endere√ßo do SQL Server
 * - port: Porta de conex√£o
 * - user: Usu√°rio do banco
 * - password: Senha do banco
 * - databaseEmp: Nome do banco EMP (pode ser vazio)
 * - connectionTimeout: Timeout de conex√£o (em ms)
 * - requestTimeout: Timeout de queries (em ms)
 * - encrypt: Se deve encriptar conex√£o
 * - trustServerCertificate: Se deve confiar no certificado
 *
 * @example Configura√ß√£o t√≠pica no .env
 * ```env
 * DB_SERVER=10.105.0.4\LOREN
 * DB_PORT=1433
 * DB_USER=dcloren
 * DB_PASSWORD='#dcloren#'
 * DB_DATABASE_EMP=
 *
 * # ‚úÖ Pode usar formatos leg√≠veis
 * DB_CONNECTION_TIMEOUT=30s
 * DB_REQUEST_TIMEOUT=60s
 *
 * DB_ENCRYPT=false
 * DB_TRUST_SERVER_CERTIFICATE=true
 * ```
 *
 * @example Uso b√°sico
 * ```typescript
 * import { getSqlServerConfigEmp } from './sqlServerConfig';
 *
 * const config = getSqlServerConfigEmp();
 * console.log(config);
 * // {
 * //   server: '10.105.0.4\\LOREN',
 * //   port: 1433,
 * //   user: 'dcloren',
 * //   password: '#dcloren#',
 * //   database: '',  // vazio = usa default do SQL user
 * //   connectionTimeout: 30000,  // convertido de '30s'
 * //   requestTimeout: 60000,     // convertido de '60s'
 * //   encrypt: false,
 * //   trustServerCertificate: true
 * // }
 * ```
 *
 * @example Compara√ß√£o com serverConfig.ts
 * ```typescript
 * // sqlServerConfig.ts (este arquivo)
 * // .env: DB_CONNECTION_TIMEOUT=30s
 * const config1 = getSqlServerConfigEmp();
 * console.log(config1.connectionTimeout);  // 30000ms ‚úÖ CORRETO
 *
 * // serverConfig.ts (legacy)
 * // .env: DB_CONNECTION_TIMEOUT=30s
 * const config2 = getSqlServerConfigEmp();
 * console.log(config2.connectionTimeout);  // 30ms ‚ùå ERRADO (parseInt ignora 's')
 * ```
 *
 * @example Usando em DatabaseManager
 * ```typescript
 * import { DatabaseManager } from '../DatabaseManager';
 * import { SqlServerConnection } from '../connections/SqlServerConnection';
 * import { getSqlServerConfigEmp } from './sqlServerConfig';
 *
 * // DatabaseManager usa este m√©todo internamente
 * const config = getSqlServerConfigEmp();
 * const connection = new SqlServerConnection(config, 'EMP');
 * await connection.connect();
 * ```
 *
 * @example Testando conex√£o
 * ```typescript
 * import { getSqlServerConfigEmp } from './sqlServerConfig';
 * import { SqlServerConnection } from '../connections/SqlServerConnection';
 *
 * const config = getSqlServerConfigEmp();
 * const connection = new SqlServerConnection(config, 'EMP');
 *
 * try {
 *   await connection.connect();
 *   console.log('‚úÖ Conectado ao banco EMP');
 *
 *   const result = await connection.query('SELECT GETDATE() as data');
 *   console.log('Data do servidor:', result.recordset[0].data);
 * } catch (error) {
 *   console.error('‚ùå Erro ao conectar:', error);
 * } finally {
 *   await connection.close();
 * }
 * ```
 *
 * @remarks
 * ‚ö†Ô∏è Ponto cr√≠tico: DB_DATABASE_EMP pode ser vazio (string vazia).
 * Quando vazio, o SQL Server usa o banco padr√£o do usu√°rio.
 *
 * Isso √© √∫til quando:
 * - O usu√°rio SQL j√° tem um default database configurado
 * - Voc√™ quer conectar sem especificar database
 * - O usu√°rio tem permiss√£o apenas no seu database padr√£o
 *
 * @remarks
 * ‚úÖ Vantagem do parseTimeout():
 * Formatos aceitos no .env:
 * ```env
 * DB_CONNECTION_TIMEOUT=30s      # ‚úÖ Leg√≠vel
 * DB_CONNECTION_TIMEOUT=30000ms  # ‚úÖ Expl√≠cito
 * DB_CONNECTION_TIMEOUT=30000    # ‚úÖ Compat√≠vel
 * DB_CONNECTION_TIMEOUT=0.5m     # ‚úÖ Minutos
 * ```
 *
 * Todos s√£o convertidos para milissegundos automaticamente.
 *
 * @remarks
 * üí° Senha com caracteres especiais:
 * Se a senha cont√©m # ou outros caracteres especiais, use aspas simples no .env:
 * ```env
 * DB_PASSWORD='#senha#'  # ‚úÖ CORRETO
 * DB_PASSWORD=#senha#    # ‚ùå ERRADO (# √© coment√°rio em bash)
 * ```
 *
 * @remarks
 * üîß Troubleshooting de timeouts:
 *
 * Se voc√™ v√™ erros de timeout:
 * 1. Verifique se os valores no .env est√£o corretos
 * 2. Confirme que est√° usando ESTE arquivo (sqlServerConfig.ts)
 * 3. Teste a conectividade: `telnet 10.105.0.4 1433`
 * 4. Aumente os timeouts se necess√°rio:
 *    ```env
 *    DB_CONNECTION_TIMEOUT=60s  # 60 segundos
 *    DB_REQUEST_TIMEOUT=2m      # 2 minutos
 *    ```
 *
 * @remarks
 * üìä Valores recomendados por ambiente:
 *
 * **Desenvolvimento:**
 * ```env
 * DB_CONNECTION_TIMEOUT=30s
 * DB_REQUEST_TIMEOUT=60s
 * ```
 *
 * **Produ√ß√£o (rede est√°vel):**
 * ```env
 * DB_CONNECTION_TIMEOUT=15s
 * DB_REQUEST_TIMEOUT=30s
 * ```
 *
 * **Produ√ß√£o (rede inst√°vel):**
 * ```env
 * DB_CONNECTION_TIMEOUT=60s
 * DB_REQUEST_TIMEOUT=2m
 * ```
 *
 * @see {@link env.config.ts} para ver a fun√ß√£o parseTimeout()
 * @see {@link DatabaseConfig} para estrutura completa de configura√ß√£o
 */
export function getSqlServerConfigEmp(): DatabaseConfig {
  const dbConfig = config.database.sqlServer;

  return {
    server: dbConfig.server,
    port: dbConfig.port,
    user: dbConfig.user,
    password: dbConfig.password,
    database: dbConfig.databaseEmp,
    connectionTimeout: dbConfig.connectionTimeout,
    requestTimeout: dbConfig.requestTimeout,
    encrypt: dbConfig.encrypt,
    trustServerCertificate: dbConfig.trustServerCertificate,
  };
}

/**
 * Retorna configura√ß√£o de conex√£o SQL Server para o banco MULT
 *
 * @function getSqlServerConfigMult
 *
 * @returns {DatabaseConfig} Configura√ß√£o completa para conex√£o MULT
 *
 * @description
 * Constr√≥i objeto de configura√ß√£o para conex√£o com o banco MULT.
 * Reutiliza todas as configura√ß√µes de conex√£o (server, port, user, password, timeouts)
 * e altera apenas o database para usar DB_DATABASE_MULT.
 *
 * Esta abordagem garante:
 * - Consist√™ncia entre as duas configura√ß√µes
 * - Redu√ß√£o de duplica√ß√£o de c√≥digo
 * - Facilita manuten√ß√£o (muda em um lugar, afeta ambos)
 * - Apenas o banco de dados alvo muda
 *
 * Vari√°veis de ambiente lidas:
 * - Todas as de EMP (via config.database.sqlServer)
 * - DB_DATABASE_MULT: Nome do banco MULT (pode ser vazio)
 *
 * @example Configura√ß√£o t√≠pica no .env
 * ```env
 * # Configura√ß√µes compartilhadas (EMP e MULT usam as mesmas)
 * DB_SERVER=10.105.0.4\LOREN
 * DB_PORT=1433
 * DB_USER=dcloren
 * DB_PASSWORD='#dcloren#'
 * DB_CONNECTION_TIMEOUT=30s
 * DB_REQUEST_TIMEOUT=60s
 *
 * # Configura√ß√µes espec√≠ficas (apenas o database muda)
 * DB_DATABASE_EMP=
 * DB_DATABASE_MULT=
 * ```
 *
 * @example Uso b√°sico
 * ```typescript
 * import { getSqlServerConfigMult } from './sqlServerConfig';
 *
 * const config = getSqlServerConfigMult();
 * console.log(config);
 * // {
 * //   server: '10.105.0.4\\LOREN',  // mesmo de EMP
 * //   port: 1433,                    // mesmo de EMP
 * //   user: 'dcloren',               // mesmo de EMP
 * //   password: '#dcloren#',         // mesmo de EMP
 * //   database: '',                  // DB_DATABASE_MULT
 * //   connectionTimeout: 30000,      // mesmo de EMP
 * //   requestTimeout: 60000,         // mesmo de EMP
 * //   encrypt: false,                // mesmo de EMP
 * //   trustServerCertificate: true   // mesmo de EMP
 * // }
 * ```
 *
 * @example Comparando EMP e MULT
 * ```typescript
 * import { getSqlServerConfigEmp, getSqlServerConfigMult } from './sqlServerConfig';
 *
 * const empConfig = getSqlServerConfigEmp();
 * const multConfig = getSqlServerConfigMult();
 *
 * // Todas as propriedades s√£o iguais...
 * console.log(empConfig.server === multConfig.server);  // true
 * console.log(empConfig.port === multConfig.port);      // true
 * console.log(empConfig.user === multConfig.user);      // true
 * console.log(empConfig.connectionTimeout === multConfig.connectionTimeout);  // true
 *
 * // ...exceto o database
 * console.log(empConfig.database === multConfig.database);  // false (√∫nica diferen√ßa)
 * ```
 *
 * @example Usando ambas as conex√µes
 * ```typescript
 * import { DatabaseManager } from '../DatabaseManager';
 *
 * // DatabaseManager cria ambas as conex√µes internamente
 * await DatabaseManager.initialize();
 *
 * // Query no banco EMP
 * const empResult = await DatabaseManager.queryEmp('SELECT * FROM item WHERE it-codigo = "7530110"');
 * console.log('Item do EMP:', empResult);
 *
 * // Query no banco MULT
 * const multResult = await DatabaseManager.queryMult('SELECT * FROM estabelec WHERE cod-estabel = "101"');
 * console.log('Estabelecimento do MULT:', multResult);
 * ```
 *
 * @example Testando ambas as conex√µes
 * ```typescript
 * import { getSqlServerConfigEmp, getSqlServerConfigMult } from './sqlServerConfig';
 * import { SqlServerConnection } from '../connections/SqlServerConnection';
 *
 * async function testConnections() {
 *   // Testar EMP
 *   const empConfig = getSqlServerConfigEmp();
 *   const empConnection = new SqlServerConnection(empConfig, 'EMP');
 *
 *   try {
 *     await empConnection.connect();
 *     console.log('‚úÖ EMP conectado');
 *   } catch (error) {
 *     console.error('‚ùå EMP falhou:', error);
 *   } finally {
 *     await empConnection.close();
 *   }
 *
 *   // Testar MULT
 *   const multConfig = getSqlServerConfigMult();
 *   const multConnection = new SqlServerConnection(multConfig, 'MULT');
 *
 *   try {
 *     await multConnection.connect();
 *     console.log('‚úÖ MULT conectado');
 *   } catch (error) {
 *     console.error('‚ùå MULT falhou:', error);
 *   } finally {
 *     await multConnection.close();
 *   }
 * }
 *
 * testConnections();
 * ```
 *
 * @remarks
 * üí° Implementa√ß√£o interna:
 * Esta fun√ß√£o n√£o duplica c√≥digo. Ela l√™ o mesmo objeto de configura√ß√£o
 * que EMP e apenas sobrescreve o campo database:
 * ```typescript
 * {
 *   ...config.database.sqlServer,  // Todas as props de EMP
 *   database: dbConfig.databaseMult  // Sobrescreve apenas database
 * }
 * ```
 *
 * @remarks
 * ‚ö†Ô∏è Ponto cr√≠tico: Assim como EMP, DB_DATABASE_MULT pode ser vazio.
 * Quando vazio, usa o banco padr√£o do usu√°rio SQL.
 *
 * @remarks
 * üèóÔ∏è Diferen√ßa entre bancos EMP e MULT:
 *
 * **EMP (Empresa):**
 * - Dados transacionais da empresa
 * - Itens, pedidos, notas fiscais, estoque
 * - Movimenta√ß√µes financeiras
 * - Dados de produ√ß√£o
 *
 * **MULT (Multi-empresa):**
 * - Dados compartilhados entre empresas
 * - Cadastro de estabelecimentos
 * - Configura√ß√µes globais
 * - Par√¢metros do sistema
 * - Tabelas auxiliares
 *
 * @remarks
 * üîç Debug de configura√ß√£o:
 * ```typescript
 * import { getSqlServerConfigEmp, getSqlServerConfigMult } from './sqlServerConfig';
 *
 * console.log('EMP Config:', getSqlServerConfigEmp());
 * console.log('MULT Config:', getSqlServerConfigMult());
 *
 * // Verificar diferen√ßas
 * const emp = getSqlServerConfigEmp();
 * const mult = getSqlServerConfigMult();
 *
 * Object.keys(emp).forEach(key => {
 *   if (emp[key] !== mult[key]) {
 *     console.log(`Diferen√ßa em ${key}:`, emp[key], 'vs', mult[key]);
 *   }
 * });
 * // Output: Diferen√ßa em database: '' vs ''
 * ```
 *
 * @see {@link getSqlServerConfigEmp} para documenta√ß√£o completa da config base
 * @see {@link DatabaseConfig} para estrutura de dados
 * @see {@link DatabaseManager} para uso das duas conex√µes
 */
export function getSqlServerConfigMult(): DatabaseConfig {
  const dbConfig = config.database.sqlServer;

  return {
    server: dbConfig.server,
    port: dbConfig.port,
    user: dbConfig.user,
    password: dbConfig.password,
    database: dbConfig.databaseMult,
    connectionTimeout: dbConfig.connectionTimeout,
    requestTimeout: dbConfig.requestTimeout,
    encrypt: dbConfig.encrypt,
    trustServerCertificate: dbConfig.trustServerCertificate,
  };
}