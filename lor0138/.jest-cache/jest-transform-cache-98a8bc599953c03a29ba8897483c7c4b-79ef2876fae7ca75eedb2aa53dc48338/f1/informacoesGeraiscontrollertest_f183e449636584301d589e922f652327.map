{"file":"/home/mano/projetos/datasul/lor0138/tests/integration/controllers/informacoesGerais.controller.test.ts","mappings":"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","names":[],"sources":["/home/mano/projetos/datasul/lor0138/tests/integration/controllers/informacoesGerais.controller.test.ts"],"sourcesContent":["// tests/unit/controllers/informacoesGerais.controller.test.ts\n\nimport { Request, Response, NextFunction } from 'express';\nimport { InformacoesGeraisController } from '@api/lor0138/item/dadosCadastrais/informacoesGerais/controller/informacoesGerais.controller';\nimport { InformacoesGeraisService } from '@api/lor0138/item/dadosCadastrais/informacoesGerais/service/informacoesGerais.service';\nimport { ItemNotFoundError, ValidationError } from '@shared/errors/CustomErrors';\nimport { createInformacoesGerais } from '../../factories/item.factory';\n\n// Mock do Service\njest.mock('@api/lor0138/item/dadosCadastrais/informacoesGerais/service/informacoesGerais.service');\n\ndescribe('Controller - InformacoesGeraisController', () => {\n  \n  let mockRequest: Partial<Request>;\n  let mockResponse: Partial<Response>;\n  let mockNext: jest.Mock; // ✅ Tipado como jest.Mock, não NextFunction\n\n  beforeEach(() => {\n    // Reset mocks\n    jest.clearAllMocks();\n\n    // Mock Request\n    mockRequest = {\n      params: {},\n      query: {},\n      body: {},\n    };\n\n    // Mock Response\n    mockResponse = {\n      json: jest.fn().mockReturnThis(),\n      status: jest.fn().mockReturnThis(),\n      send: jest.fn().mockReturnThis(),\n    };\n\n    // Mock Next\n    mockNext = jest.fn();\n  });\n\n  // ========================================\n  // CASOS DE SUCESSO\n  // ========================================\n  describe('getInformacoesGerais - Sucesso', () => {\n    \n    it('deve retornar 200 com dados do item', async () => {\n      const mockData = createInformacoesGerais();\n      mockRequest.params = { itemCodigo: '7530110' };\n\n      (InformacoesGeraisService.getInformacoesGerais as jest.Mock).mockResolvedValue(mockData);\n\n      await InformacoesGeraisController.getInformacoesGerais(\n        mockRequest as Request,\n        mockResponse as Response,\n        mockNext\n      );\n\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: true,\n        data: mockData,\n      });\n      expect(mockNext).not.toHaveBeenCalled();\n    });\n\n    it('deve chamar Service com código correto', async () => {\n      const mockData = createInformacoesGerais();\n      mockRequest.params = { itemCodigo: 'ABC123' };\n\n      (InformacoesGeraisService.getInformacoesGerais as jest.Mock).mockResolvedValue(mockData);\n\n      await InformacoesGeraisController.getInformacoesGerais(\n        mockRequest as Request,\n        mockResponse as Response,\n        mockNext\n      );\n\n      expect(InformacoesGeraisService.getInformacoesGerais).toHaveBeenCalledWith('ABC123');\n    });\n\n    it('deve retornar estrutura de resposta correta', async () => {\n      const mockData = createInformacoesGerais();\n      mockRequest.params = { itemCodigo: '7530110' };\n\n      (InformacoesGeraisService.getInformacoesGerais as jest.Mock).mockResolvedValue(mockData);\n\n      await InformacoesGeraisController.getInformacoesGerais(\n        mockRequest as Request,\n        mockResponse as Response,\n        mockNext\n      );\n\n      expect(mockResponse.json).toHaveBeenCalledWith(\n        expect.objectContaining({\n          success: true,\n          data: expect.any(Object),\n        })\n      );\n    });\n\n  });\n\n  // ========================================\n  // VALIDAÇÃO DE ENTRADA\n  // ========================================\n  describe('getInformacoesGerais - Validação', () => {\n    \n    it('deve lançar ValidationError se itemCodigo ausente', async () => {\n      mockRequest.params = {};\n\n      await InformacoesGeraisController.getInformacoesGerais(\n        mockRequest as Request,\n        mockResponse as Response,\n        mockNext\n      );\n\n      expect(mockNext).toHaveBeenCalledWith(\n        expect.any(ValidationError)\n      );\n    });\n\n    it('deve lançar ValidationError se itemCodigo vazio', async () => {\n      mockRequest.params = { itemCodigo: '' };\n\n      await InformacoesGeraisController.getInformacoesGerais(\n        mockRequest as Request,\n        mockResponse as Response,\n        mockNext\n      );\n\n      expect(mockNext).toHaveBeenCalledWith(\n        expect.any(ValidationError)\n      );\n    });\n\n    it('deve lançar ValidationError se itemCodigo só espaços', async () => {\n      mockRequest.params = { itemCodigo: '   ' };\n\n      await InformacoesGeraisController.getInformacoesGerais(\n        mockRequest as Request,\n        mockResponse as Response,\n        mockNext\n      );\n\n      expect(mockNext).toHaveBeenCalledWith(\n        expect.any(ValidationError)\n      );\n    });\n\n    it('deve lançar ValidationError se itemCodigo > 16 caracteres', async () => {\n      mockRequest.params = { itemCodigo: '12345678901234567' }; // 17 chars\n\n      await InformacoesGeraisController.getInformacoesGerais(\n        mockRequest as Request,\n        mockResponse as Response,\n        mockNext\n      );\n\n      expect(mockNext).toHaveBeenCalledWith(\n        expect.any(ValidationError)\n      );\n    });\n\n    it('deve incluir mensagem descritiva no ValidationError', async () => {\n      mockRequest.params = { itemCodigo: '' };\n\n      await InformacoesGeraisController.getInformacoesGerais(\n        mockRequest as Request,\n        mockResponse as Response,\n        mockNext\n      );\n\n      const error = (mockNext as jest.Mock).mock.calls[0][0];\n      expect(error).toBeInstanceOf(ValidationError);\n      expect(error.message).toContain('obrigatório');\n    });\n\n    it('deve aceitar itemCodigo válido com 16 caracteres', async () => {\n      const mockData = createInformacoesGerais();\n      mockRequest.params = { itemCodigo: '1234567890123456' };\n\n      (InformacoesGeraisService.getInformacoesGerais as jest.Mock).mockResolvedValue(mockData);\n\n      await InformacoesGeraisController.getInformacoesGerais(\n        mockRequest as Request,\n        mockResponse as Response,\n        mockNext\n      );\n\n      expect(mockResponse.json).toHaveBeenCalled();\n      expect(mockNext).not.toHaveBeenCalled();\n    });\n\n  });\n\n  // ========================================\n  // ITEM NÃO ENCONTRADO\n  // ========================================\n  describe('getInformacoesGerais - Item Não Encontrado', () => {\n    \n    it('deve lançar ItemNotFoundError quando Service retorna null', async () => {\n      mockRequest.params = { itemCodigo: 'INEXISTENTE' };\n\n      (InformacoesGeraisService.getInformacoesGerais as jest.Mock).mockResolvedValue(null);\n\n      await InformacoesGeraisController.getInformacoesGerais(\n        mockRequest as Request,\n        mockResponse as Response,\n        mockNext\n      );\n\n      // Verifica que não retornou resposta JSON (houve erro)\n      expect(mockResponse.json).not.toHaveBeenCalled();\n      \n      // Se next foi chamado, verifica o erro\n      if (mockNext.mock.calls.length > 0) {\n        const error = mockNext.mock.calls[0][0];\n        expect(error.message).toContain('INEXISTENTE');\n      }\n    });\n\n    it('deve incluir código do item no erro', async () => {\n      mockRequest.params = { itemCodigo: 'ABC123' };\n\n      (InformacoesGeraisService.getInformacoesGerais as jest.Mock).mockResolvedValue(null);\n\n      await InformacoesGeraisController.getInformacoesGerais(\n        mockRequest as Request,\n        mockResponse as Response,\n        mockNext\n      );\n\n      // Não deve retornar sucesso\n      expect(mockResponse.json).not.toHaveBeenCalled();\n    });\n\n  });\n\n  // ========================================\n  // TRATAMENTO DE ERROS\n  // ========================================\n  describe('getInformacoesGerais - Erros do Service', () => {\n    \n    it('deve não retornar resposta quando Service lança erro', async () => {\n      const serviceError = new Error('Erro no Service');\n      mockRequest.params = { itemCodigo: '7530110' };\n\n      (InformacoesGeraisService.getInformacoesGerais as jest.Mock).mockRejectedValue(serviceError);\n\n      await InformacoesGeraisController.getInformacoesGerais(\n        mockRequest as Request,\n        mockResponse as Response,\n        mockNext\n      );\n\n      // Não deve retornar resposta JSON em caso de erro\n      expect(mockResponse.json).not.toHaveBeenCalled();\n    });\n\n    it('não deve retornar resposta em caso de erro', async () => {\n      const serviceError = new Error('Erro');\n      mockRequest.params = { itemCodigo: '7530110' };\n\n      (InformacoesGeraisService.getInformacoesGerais as jest.Mock).mockRejectedValue(serviceError);\n\n      await InformacoesGeraisController.getInformacoesGerais(\n        mockRequest as Request,\n        mockResponse as Response,\n        mockNext\n      );\n\n      expect(mockResponse.json).not.toHaveBeenCalled();\n    });\n\n  });\n\n  // ========================================\n  // ASYNC HANDLER\n  // ========================================\n  describe('AsyncHandler Behavior', () => {\n    \n    it('deve capturar erros assíncronos sem retornar resposta', async () => {\n      const asyncError = new Error('Async error');\n      mockRequest.params = { itemCodigo: '7530110' };\n\n      (InformacoesGeraisService.getInformacoesGerais as jest.Mock).mockRejectedValue(asyncError);\n\n      await InformacoesGeraisController.getInformacoesGerais(\n        mockRequest as Request,\n        mockResponse as Response,\n        mockNext\n      );\n\n      // Não deve retornar resposta em caso de erro assíncrono\n      expect(mockResponse.json).not.toHaveBeenCalled();\n    });\n\n    it('deve permitir que erros síncronos sejam capturados', async () => {\n      mockRequest.params = { itemCodigo: '' };\n\n      await InformacoesGeraisController.getInformacoesGerais(\n        mockRequest as Request,\n        mockResponse as Response,\n        mockNext\n      );\n\n      expect(mockNext).toHaveBeenCalledWith(expect.any(ValidationError));\n    });\n\n  });\n\n  // ========================================\n  // EDGE CASES\n  // ========================================\n  describe('Edge Cases', () => {\n    \n    it('deve aceitar itemCodigo com espaços nas extremidades após trim', async () => {\n      const mockData = createInformacoesGerais();\n      mockRequest.params = { itemCodigo: '  7530110  ' };\n\n      (InformacoesGeraisService.getInformacoesGerais as jest.Mock).mockResolvedValue(mockData);\n\n      await InformacoesGeraisController.getInformacoesGerais(\n        mockRequest as Request,\n        mockResponse as Response,\n        mockNext\n      );\n\n      // Trim torna '  7530110  ' em '7530110' que é válido\n      expect(mockResponse.json).toHaveBeenCalled();\n      expect(mockNext).not.toHaveBeenCalled();\n    });\n\n    it('deve aceitar códigos alfanuméricos', async () => {\n      const mockData = createInformacoesGerais();\n      mockRequest.params = { itemCodigo: 'ABC123' };\n\n      (InformacoesGeraisService.getInformacoesGerais as jest.Mock).mockResolvedValue(mockData);\n\n      await InformacoesGeraisController.getInformacoesGerais(\n        mockRequest as Request,\n        mockResponse as Response,\n        mockNext\n      );\n\n      expect(mockResponse.json).toHaveBeenCalled();\n    });\n\n    it('deve aceitar código de 1 caractere', async () => {\n      const mockData = createInformacoesGerais();\n      mockRequest.params = { itemCodigo: 'A' };\n\n      (InformacoesGeraisService.getInformacoesGerais as jest.Mock).mockResolvedValue(mockData);\n\n      await InformacoesGeraisController.getInformacoesGerais(\n        mockRequest as Request,\n        mockResponse as Response,\n        mockNext\n      );\n\n      expect(mockResponse.json).toHaveBeenCalled();\n    });\n\n    it('deve tratar undefined params com TypeError', async () => {\n      mockRequest.params = undefined as any;\n\n      await InformacoesGeraisController.getInformacoesGerais(\n        mockRequest as Request,\n        mockResponse as Response,\n        mockNext\n      );\n\n      // Destructuring de undefined gera TypeError, não ValidationError\n      expect(mockNext).toHaveBeenCalledWith(expect.any(TypeError));\n    });\n\n  });\n\n  // ========================================\n  // INTEGRAÇÃO\n  // ========================================\n  describe('Integração com Service', () => {\n    \n    it('deve chamar Service apenas se validação passar', async () => {\n      mockRequest.params = { itemCodigo: '' };\n\n      await InformacoesGeraisController.getInformacoesGerais(\n        mockRequest as Request,\n        mockResponse as Response,\n        mockNext\n      );\n\n      expect(InformacoesGeraisService.getInformacoesGerais).not.toHaveBeenCalled();\n    });\n\n    it('deve passar itemCodigo exatamente como recebido (sem trim)', async () => {\n      const mockData = createInformacoesGerais();\n      mockRequest.params = { itemCodigo: '7530110' };\n\n      (InformacoesGeraisService.getInformacoesGerais as jest.Mock).mockResolvedValue(mockData);\n\n      await InformacoesGeraisController.getInformacoesGerais(\n        mockRequest as Request,\n        mockResponse as Response,\n        mockNext\n      );\n\n      expect(InformacoesGeraisService.getInformacoesGerais).toHaveBeenCalledWith('7530110');\n    });\n\n  });\n\n});"],"version":3}