76b341a876f6316854529761bc96489b
"use strict";
// tests/unit/controllers/informacoesGerais.controller.test.ts
Object.defineProperty(exports, "__esModule", { value: true });
// Mock do Service
jest.mock('@api/lor0138/item/dadosCadastrais/informacoesGerais/service/informacoesGerais.service');
const informacoesGerais_controller_1 = require("@api/lor0138/item/dadosCadastrais/informacoesGerais/controller/informacoesGerais.controller");
const informacoesGerais_service_1 = require("@api/lor0138/item/dadosCadastrais/informacoesGerais/service/informacoesGerais.service");
const CustomErrors_1 = require("@shared/errors/CustomErrors");
const item_factory_1 = require("../../factories/item.factory");
describe('Controller - InformacoesGeraisController', () => {
    let mockRequest;
    let mockResponse;
    let mockNext;
    beforeEach(() => {
        // Reset mocks
        jest.clearAllMocks();
        // Mock Request
        mockRequest = {
            params: {},
            query: {},
            body: {},
        };
        // Mock Response
        mockResponse = {
            json: jest.fn().mockReturnThis(),
            status: jest.fn().mockReturnThis(),
            send: jest.fn().mockReturnThis(),
        };
        // Mock Next
        mockNext = jest.fn();
    });
    // ========================================
    // CASOS DE SUCESSO
    // ========================================
    describe('getInformacoesGerais - Sucesso', () => {
        it('deve retornar 200 com dados do item', async () => {
            const mockData = (0, item_factory_1.createInformacoesGerais)();
            mockRequest.params = { itemCodigo: '7530110' };
            informacoesGerais_service_1.InformacoesGeraisService.getInformacoesGerais.mockResolvedValue(mockData);
            await informacoesGerais_controller_1.InformacoesGeraisController.getInformacoesGerais(mockRequest, mockResponse, mockNext);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: true,
                data: mockData,
            });
            expect(mockNext).not.toHaveBeenCalled();
        });
        it('deve chamar Service com código correto', async () => {
            const mockData = (0, item_factory_1.createInformacoesGerais)();
            mockRequest.params = { itemCodigo: 'ABC123' };
            informacoesGerais_service_1.InformacoesGeraisService.getInformacoesGerais.mockResolvedValue(mockData);
            await informacoesGerais_controller_1.InformacoesGeraisController.getInformacoesGerais(mockRequest, mockResponse, mockNext);
            expect(informacoesGerais_service_1.InformacoesGeraisService.getInformacoesGerais).toHaveBeenCalledWith('ABC123');
        });
        it('deve retornar estrutura de resposta correta', async () => {
            const mockData = (0, item_factory_1.createInformacoesGerais)();
            mockRequest.params = { itemCodigo: '7530110' };
            informacoesGerais_service_1.InformacoesGeraisService.getInformacoesGerais.mockResolvedValue(mockData);
            await informacoesGerais_controller_1.InformacoesGeraisController.getInformacoesGerais(mockRequest, mockResponse, mockNext);
            expect(mockResponse.json).toHaveBeenCalledWith(expect.objectContaining({
                success: true,
                data: expect.any(Object),
            }));
        });
    });
    // ========================================
    // VALIDAÇÃO DE ENTRADA
    // ========================================
    describe('getInformacoesGerais - Validação', () => {
        it('deve lançar ValidationError se itemCodigo ausente', async () => {
            mockRequest.params = {};
            await informacoesGerais_controller_1.InformacoesGeraisController.getInformacoesGerais(mockRequest, mockResponse, mockNext);
            expect(mockNext).toHaveBeenCalledWith(expect.any(CustomErrors_1.ValidationError));
        });
        it('deve lançar ValidationError se itemCodigo vazio', async () => {
            mockRequest.params = { itemCodigo: '' };
            await informacoesGerais_controller_1.InformacoesGeraisController.getInformacoesGerais(mockRequest, mockResponse, mockNext);
            expect(mockNext).toHaveBeenCalledWith(expect.any(CustomErrors_1.ValidationError));
        });
        it('deve lançar ValidationError se itemCodigo só espaços', async () => {
            mockRequest.params = { itemCodigo: '   ' };
            await informacoesGerais_controller_1.InformacoesGeraisController.getInformacoesGerais(mockRequest, mockResponse, mockNext);
            expect(mockNext).toHaveBeenCalledWith(expect.any(CustomErrors_1.ValidationError));
        });
        it('deve lançar ValidationError se itemCodigo > 16 caracteres', async () => {
            mockRequest.params = { itemCodigo: '12345678901234567' }; // 17 chars
            await informacoesGerais_controller_1.InformacoesGeraisController.getInformacoesGerais(mockRequest, mockResponse, mockNext);
            expect(mockNext).toHaveBeenCalledWith(expect.any(CustomErrors_1.ValidationError));
        });
        it('deve incluir mensagem descritiva no ValidationError', async () => {
            mockRequest.params = { itemCodigo: '' };
            await informacoesGerais_controller_1.InformacoesGeraisController.getInformacoesGerais(mockRequest, mockResponse, mockNext);
            const error = mockNext.mock.calls[0][0];
            expect(error).toBeInstanceOf(CustomErrors_1.ValidationError);
            expect(error.message).toContain('obrigatório');
        });
        it('deve aceitar itemCodigo válido com 16 caracteres', async () => {
            const mockData = (0, item_factory_1.createInformacoesGerais)();
            mockRequest.params = { itemCodigo: '1234567890123456' };
            informacoesGerais_service_1.InformacoesGeraisService.getInformacoesGerais.mockResolvedValue(mockData);
            await informacoesGerais_controller_1.InformacoesGeraisController.getInformacoesGerais(mockRequest, mockResponse, mockNext);
            expect(mockResponse.json).toHaveBeenCalled();
            expect(mockNext).not.toHaveBeenCalled();
        });
    });
    // ========================================
    // ITEM NÃO ENCONTRADO
    // ========================================
    describe('getInformacoesGerais - Item Não Encontrado', () => {
        it('deve lançar ItemNotFoundError quando Service retorna null', async () => {
            mockRequest.params = { itemCodigo: 'INEXISTENTE' };
            informacoesGerais_service_1.InformacoesGeraisService.getInformacoesGerais.mockResolvedValue(null);
            await informacoesGerais_controller_1.InformacoesGeraisController.getInformacoesGerais(mockRequest, mockResponse, mockNext);
            expect(mockNext).toHaveBeenCalledWith(expect.objectContaining({
                message: expect.stringContaining('INEXISTENTE')
            }));
        });
        it('deve incluir código do item no erro', async () => {
            mockRequest.params = { itemCodigo: 'ABC123' };
            informacoesGerais_service_1.InformacoesGeraisService.getInformacoesGerais.mockResolvedValue(null);
            await informacoesGerais_controller_1.InformacoesGeraisController.getInformacoesGerais(mockRequest, mockResponse, mockNext);
            expect(mockNext).toHaveBeenCalled();
            const error = mockNext.mock.calls[0][0];
            expect(error.message).toContain('ABC123');
        });
    });
    // ========================================
    // TRATAMENTO DE ERROS
    // ========================================
    describe('getInformacoesGerais - Erros do Service', () => {
        it('deve propagar erros do Service para middleware via asyncHandler', async () => {
            const serviceError = new Error('Erro no Service');
            mockRequest.params = { itemCodigo: '7530110' };
            informacoesGerais_service_1.InformacoesGeraisService.getInformacoesGerais.mockRejectedValue(serviceError);
            await informacoesGerais_controller_1.InformacoesGeraisController.getInformacoesGerais(mockRequest, mockResponse, mockNext);
            expect(mockNext).toHaveBeenCalled();
            const error = mockNext.mock.calls[0][0];
            expect(error.message).toBe('Erro no Service');
        });
        it('não deve retornar resposta em caso de erro', async () => {
            const serviceError = new Error('Erro');
            mockRequest.params = { itemCodigo: '7530110' };
            informacoesGerais_service_1.InformacoesGeraisService.getInformacoesGerais.mockRejectedValue(serviceError);
            await informacoesGerais_controller_1.InformacoesGeraisController.getInformacoesGerais(mockRequest, mockResponse, mockNext);
            expect(mockResponse.json).not.toHaveBeenCalled();
            expect(mockNext).toHaveBeenCalled();
        });
    });
    // ========================================
    // ASYNC HANDLER
    // ========================================
    describe('AsyncHandler Behavior', () => {
        it('deve usar asyncHandler para capturar erros assíncronos', async () => {
            const asyncError = new Error('Async error');
            mockRequest.params = { itemCodigo: '7530110' };
            informacoesGerais_service_1.InformacoesGeraisService.getInformacoesGerais.mockRejectedValue(asyncError);
            await informacoesGerais_controller_1.InformacoesGeraisController.getInformacoesGerais(mockRequest, mockResponse, mockNext);
            expect(mockNext).toHaveBeenCalled();
            const error = mockNext.mock.calls[0][0];
            expect(error.message).toBe('Async error');
        });
        it('deve permitir que erros síncronos sejam capturados', async () => {
            mockRequest.params = { itemCodigo: '' };
            await informacoesGerais_controller_1.InformacoesGeraisController.getInformacoesGerais(mockRequest, mockResponse, mockNext);
            expect(mockNext).toHaveBeenCalledWith(expect.any(CustomErrors_1.ValidationError));
        });
    });
    // ========================================
    // EDGE CASES
    // ========================================
    describe('Edge Cases', () => {
        it('deve aceitar itemCodigo com espaços nas extremidades após trim', async () => {
            const mockData = (0, item_factory_1.createInformacoesGerais)();
            mockRequest.params = { itemCodigo: '  7530110  ' };
            informacoesGerais_service_1.InformacoesGeraisService.getInformacoesGerais.mockResolvedValue(mockData);
            await informacoesGerais_controller_1.InformacoesGeraisController.getInformacoesGerais(mockRequest, mockResponse, mockNext);
            // Trim torna '  7530110  ' em '7530110' que é válido
            expect(mockResponse.json).toHaveBeenCalled();
            expect(mockNext).not.toHaveBeenCalled();
        });
        it('deve aceitar códigos alfanuméricos', async () => {
            const mockData = (0, item_factory_1.createInformacoesGerais)();
            mockRequest.params = { itemCodigo: 'ABC123' };
            informacoesGerais_service_1.InformacoesGeraisService.getInformacoesGerais.mockResolvedValue(mockData);
            await informacoesGerais_controller_1.InformacoesGeraisController.getInformacoesGerais(mockRequest, mockResponse, mockNext);
            expect(mockResponse.json).toHaveBeenCalled();
        });
        it('deve aceitar código de 1 caractere', async () => {
            const mockData = (0, item_factory_1.createInformacoesGerais)();
            mockRequest.params = { itemCodigo: 'A' };
            informacoesGerais_service_1.InformacoesGeraisService.getInformacoesGerais.mockResolvedValue(mockData);
            await informacoesGerais_controller_1.InformacoesGeraisController.getInformacoesGerais(mockRequest, mockResponse, mockNext);
            expect(mockResponse.json).toHaveBeenCalled();
        });
        it('deve tratar undefined params com TypeError', async () => {
            mockRequest.params = undefined;
            await informacoesGerais_controller_1.InformacoesGeraisController.getInformacoesGerais(mockRequest, mockResponse, mockNext);
            // Destructuring de undefined gera TypeError, não ValidationError
            expect(mockNext).toHaveBeenCalledWith(expect.any(TypeError));
        });
    });
    // ========================================
    // INTEGRAÇÃO
    // ========================================
    describe('Integração com Service', () => {
        it('deve chamar Service apenas se validação passar', async () => {
            mockRequest.params = { itemCodigo: '' };
            await informacoesGerais_controller_1.InformacoesGeraisController.getInformacoesGerais(mockRequest, mockResponse, mockNext);
            expect(informacoesGerais_service_1.InformacoesGeraisService.getInformacoesGerais).not.toHaveBeenCalled();
        });
        it('deve passar itemCodigo exatamente como recebido (sem trim)', async () => {
            const mockData = (0, item_factory_1.createInformacoesGerais)();
            mockRequest.params = { itemCodigo: '7530110' };
            informacoesGerais_service_1.InformacoesGeraisService.getInformacoesGerais.mockResolvedValue(mockData);
            await informacoesGerais_controller_1.InformacoesGeraisController.getInformacoesGerais(mockRequest, mockResponse, mockNext);
            expect(informacoesGerais_service_1.InformacoesGeraisService.getInformacoesGerais).toHaveBeenCalledWith('7530110');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,