11bd4822328f70818c15d2795dad7b6d
"use strict";
// src/shared/utils/cacheManager.ts
// ✅ VERSÃO ATUALIZADA: Suporta Memory, Redis e Layered (L1+L2)
Object.defineProperty(exports, "__esModule", { value: true });
exports.CacheManager = void 0;
exports.generateCacheKey = generateCacheKey;
exports.Cacheable = Cacheable;
const MemoryCacheAdapter_1 = require("./cache/MemoryCacheAdapter");
const RedisCacheAdapter_1 = require("./cache/RedisCacheAdapter");
const LayeredCacheAdapter_1 = require("./cache/LayeredCacheAdapter");
const logger_1 = require("./logger");
/**
 * Gerenciador de cache com suporte a múltiplos backends
 * - Memory: Cache local (padrão)
 * - Redis: Cache compartilhado
 * - Layered: L1 (memory) + L2 (Redis)
 */
class CacheManager {
    /**
     * Inicializa o cache com a estratégia escolhida
     */
    static initialize(strategy) {
        this.enabled = process.env.CACHE_ENABLED !== 'false';
        this.strategy = strategy || process.env.CACHE_STRATEGY || 'memory';
        if (!this.enabled) {
            logger_1.log.warn('❌ Cache desabilitado (CACHE_ENABLED=false)');
            return;
        }
        const ttl = parseInt(process.env.CACHE_DEFAULT_TTL || '300', 10);
        try {
            switch (this.strategy) {
                case 'layered':
                    this.initializeLayered(ttl);
                    break;
                case 'redis':
                    this.initializeRedis(ttl);
                    break;
                case 'memory':
                default:
                    this.initializeMemory(ttl);
                    break;
            }
            logger_1.log.info('✅ Cache inicializado', {
                strategy: this.strategy,
                enabled: this.enabled,
                ttl
            });
        }
        catch (error) {
            logger_1.log.error('❌ Erro ao inicializar cache', { strategy: this.strategy, error });
            // Fallback para memória em caso de erro
            this.initializeMemory(ttl);
        }
    }
    static initializeMemory(ttl) {
        this.adapter = new MemoryCacheAdapter_1.MemoryCacheAdapter(ttl, 'Cache-Memory');
        this.strategy = 'memory';
    }
    static initializeRedis(ttl) {
        const redisUrl = process.env.CACHE_REDIS_URL || 'redis://localhost:6379';
        this.adapter = new RedisCacheAdapter_1.RedisCacheAdapter(redisUrl, 'Cache-Redis');
        this.strategy = 'redis';
    }
    static initializeLayered(ttl) {
        const redisUrl = process.env.CACHE_REDIS_URL || 'redis://localhost:6379';
        const l1 = new MemoryCacheAdapter_1.MemoryCacheAdapter(ttl, 'L1-Memory');
        const l2 = new RedisCacheAdapter_1.RedisCacheAdapter(redisUrl, 'L2-Redis');
        this.adapter = new LayeredCacheAdapter_1.LayeredCacheAdapter(l1, l2, 'Cache-Layered');
        this.strategy = 'layered';
    }
    /**
     * Retorna instância singleton (compatibilidade)
     */
    static getInstance() {
        if (!this.adapter) {
            this.initialize();
        }
        return this;
    }
    /**
     * Busca valor no cache
     */
    static async get(key) {
        if (!this.enabled || !this.adapter) {
            return undefined;
        }
        try {
            return await this.adapter.get(key);
        }
        catch (error) {
            logger_1.log.error('Cache GET error', { key, error });
            return undefined;
        }
    }
    /**
     * Armazena valor no cache
     */
    static async set(key, value, ttl) {
        if (!this.enabled || !this.adapter) {
            return false;
        }
        try {
            return await this.adapter.set(key, value, ttl);
        }
        catch (error) {
            logger_1.log.error('Cache SET error', { key, error });
            return false;
        }
    }
    /**
     * Remove valor do cache
     */
    static async delete(key) {
        if (!this.enabled || !this.adapter) {
            return 0;
        }
        try {
            return await this.adapter.delete(key);
        }
        catch (error) {
            logger_1.log.error('Cache DELETE error', { key, error });
            return 0;
        }
    }
    /**
     * Limpa todo o cache
     */
    static async flush() {
        if (!this.enabled || !this.adapter) {
            return;
        }
        try {
            await this.adapter.flush();
            logger_1.log.info('Cache limpo completamente');
        }
        catch (error) {
            logger_1.log.error('Cache FLUSH error', { error });
        }
    }
    /**
     * Lista chaves em cache
     */
    static async keys(pattern) {
        if (!this.enabled || !this.adapter) {
            return [];
        }
        try {
            return await this.adapter.keys(pattern);
        }
        catch (error) {
            logger_1.log.error('Cache KEYS error', { pattern, error });
            return [];
        }
    }
    /**
     * Invalida chaves por padrão (wildcards)
     */
    static async invalidate(pattern) {
        if (!this.enabled || !this.adapter) {
            return 0;
        }
        try {
            const keys = await this.adapter.keys(pattern);
            if (keys.length === 0) {
                logger_1.log.debug('Nenhuma chave encontrada para invalidar', { pattern });
                return 0;
            }
            const deletePromises = keys.map(key => this.adapter.delete(key));
            const results = await Promise.all(deletePromises);
            const total = results.reduce((sum, count) => sum + count, 0);
            logger_1.log.info('Cache invalidado', { pattern, keys: total });
            return total;
        }
        catch (error) {
            logger_1.log.error('Cache INVALIDATE error', { pattern, error });
            return 0;
        }
    }
    /**
     * Cache-aside pattern: busca ou executa função
     */
    static async getOrSet(key, fetchFn, ttl) {
        // Tenta buscar do cache
        const cached = await this.get(key);
        if (cached !== undefined) {
            return cached;
        }
        // Executa função para buscar dados
        const value = await fetchFn();
        // Armazena no cache
        await this.set(key, value, ttl);
        return value;
    }
    /**
     * Verifica se cache está pronto
     */
    static async isReady() {
        if (!this.enabled || !this.adapter) {
            return false;
        }
        try {
            return await this.adapter.isReady();
        }
        catch (error) {
            logger_1.log.error('Cache isReady error', { error });
            return false;
        }
    }
    /**
     * Retorna estatísticas do cache
     */
    static getStats() {
        if (!this.enabled || !this.adapter) {
            return {
                enabled: false,
                strategy: 'none'
            };
        }
        // LayeredCacheAdapter tem método getStats()
        if (this.adapter instanceof LayeredCacheAdapter_1.LayeredCacheAdapter) {
            return {
                enabled: true,
                strategy: this.strategy,
                ...this.adapter.getStats()
            };
        }
        // MemoryCacheAdapter tem método getStats()
        if (this.adapter instanceof MemoryCacheAdapter_1.MemoryCacheAdapter) {
            return {
                enabled: true,
                strategy: this.strategy,
                ...this.adapter.getStats()
            };
        }
        return {
            enabled: true,
            strategy: this.strategy
        };
    }
    /**
     * Fecha conexões (chamado no graceful shutdown)
     */
    static async close() {
        if (!this.adapter) {
            return;
        }
        try {
            await this.adapter.close();
            logger_1.log.info('Cache fechado');
        }
        catch (error) {
            logger_1.log.error('Cache CLOSE error', { error });
        }
    }
}
exports.CacheManager = CacheManager;
CacheManager.strategy = 'memory';
CacheManager.enabled = true;
/**
 * Gera chave de cache consistente
 */
function generateCacheKey(...parts) {
    return parts.filter(p => p !== undefined && p !== null).join(':');
}
/**
 * Decorator para cachear métodos de classe
 * @example
 * class MyService {
 *   @Cacheable({ ttl: 600, keyPrefix: 'service' })
 *   async getData(id: string) { ... }
 * }
 */
function Cacheable(options = {}) {
    return function (target, propertyKey, descriptor) {
        const originalMethod = descriptor.value;
        descriptor.value = async function (...args) {
            const keyPrefix = options.keyPrefix || target.constructor.name;
            const cacheKey = generateCacheKey(keyPrefix, propertyKey, ...args);
            return CacheManager.getOrSet(cacheKey, () => originalMethod.apply(this, args), options.ttl);
        };
        return descriptor;
    };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,