475ac919efe1bd58fb90aa135a7681df
"use strict";
// src/infrastructure/database/config/odbcConfig.ts
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateOdbcConfig = exports.getOdbcConfig = exports.getOdbcConnectionString = void 0;
/**
 * Retorna connection string ODBC para o database especificado
 */
const getOdbcConnectionString = (database) => {
    const dsnName = database === 'EMP'
        ? process.env.ODBC_DSN_EMP || 'PRD_EMS2EMP'
        : process.env.ODBC_DSN_MULT || 'PRD_EMS2MULT';
    const user = process.env.ODBC_USER || process.env.DB_USER || '';
    const password = process.env.ODBC_PASSWORD || process.env.DB_PASSWORD || '';
    return `DSN=${dsnName};UID=${user};PWD=${password}`;
};
exports.getOdbcConnectionString = getOdbcConnectionString;
/**
 * ✅ NOVO: Retorna configuração completa com timeouts
 */
const getOdbcConfig = (database) => {
    const connectionString = (0, exports.getOdbcConnectionString)(database);
    // ✅ IMPORTANTE: Usa parseInt() direto, então .env deve ter milissegundos puros
    const connectionTimeout = parseInt(process.env.ODBC_CONNECTION_TIMEOUT || '15000', 10);
    const commandTimeout = parseInt(process.env.ODBC_COMMAND_TIMEOUT || '30000', 10);
    return {
        connectionString,
        connectionTimeout,
        commandTimeout
    };
};
exports.getOdbcConfig = getOdbcConfig;
/**
 * Valida configuração ODBC
 */
const validateOdbcConfig = () => {
    const requiredVars = ['DB_USER', 'DB_PASSWORD'];
    for (const varName of requiredVars) {
        if (!process.env[varName]) {
            throw new Error(`Variável de ambiente obrigatória não encontrada: ${varName}`);
        }
    }
    // Verifica timeouts
    const connectionTimeout = parseInt(process.env.ODBC_CONNECTION_TIMEOUT || '15000', 10);
    const commandTimeout = parseInt(process.env.ODBC_COMMAND_TIMEOUT || '30000', 10);
    if (isNaN(connectionTimeout) || connectionTimeout < 1000) {
        throw new Error(`ODBC_CONNECTION_TIMEOUT inválido: deve ser >= 1000ms (recebido: ${process.env.ODBC_CONNECTION_TIMEOUT})`);
    }
    if (isNaN(commandTimeout) || commandTimeout < 1000) {
        throw new Error(`ODBC_COMMAND_TIMEOUT inválido: deve ser >= 1000ms (recebido: ${process.env.ODBC_COMMAND_TIMEOUT})`);
    }
};
exports.validateOdbcConfig = validateOdbcConfig;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvbWFuby9wcm9qZXRvcy9kYXRhc3VsL2xvcjAxMzgvc3JjL2luZnJhc3RydWN0dXJlL2RhdGFiYXNlL2NvbmZpZy9vZGJjQ29uZmlnLnRzIiwibWFwcGluZ3MiOiI7QUFBQSxtREFBbUQ7OztBQVFuRDs7R0FFRztBQUNJLE1BQU0sdUJBQXVCLEdBQUcsQ0FBQyxRQUF3QixFQUFVLEVBQUU7SUFDMUUsTUFBTSxPQUFPLEdBQ1gsUUFBUSxLQUFLLEtBQUs7UUFDaEIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxJQUFJLGFBQWE7UUFDM0MsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFBYSxJQUFJLGNBQWMsQ0FBQztJQUVsRCxNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sSUFBSSxFQUFFLENBQUM7SUFDaEUsTUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLElBQUksRUFBRSxDQUFDO0lBRTVFLE9BQU8sT0FBTyxPQUFPLFFBQVEsSUFBSSxRQUFRLFFBQVEsRUFBRSxDQUFDO0FBQ3RELENBQUMsQ0FBQztBQVZXLFFBQUEsdUJBQXVCLDJCQVVsQztBQUVGOztHQUVHO0FBQ0ksTUFBTSxhQUFhLEdBQUcsQ0FBQyxRQUF3QixFQUFjLEVBQUU7SUFDcEUsTUFBTSxnQkFBZ0IsR0FBRyxJQUFBLCtCQUF1QixFQUFDLFFBQVEsQ0FBQyxDQUFDO0lBRTNELCtFQUErRTtJQUMvRSxNQUFNLGlCQUFpQixHQUFHLFFBQVEsQ0FDaEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsSUFBSSxPQUFPLEVBQzlDLEVBQUUsQ0FDSCxDQUFDO0lBRUYsTUFBTSxjQUFjLEdBQUcsUUFBUSxDQUM3QixPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFvQixJQUFJLE9BQU8sRUFDM0MsRUFBRSxDQUNILENBQUM7SUFFRixPQUFPO1FBQ0wsZ0JBQWdCO1FBQ2hCLGlCQUFpQjtRQUNqQixjQUFjO0tBQ2YsQ0FBQztBQUNKLENBQUMsQ0FBQztBQW5CVyxRQUFBLGFBQWEsaUJBbUJ4QjtBQUVGOztHQUVHO0FBQ0ksTUFBTSxrQkFBa0IsR0FBRyxHQUFTLEVBQUU7SUFDM0MsTUFBTSxZQUFZLEdBQUcsQ0FBQyxTQUFTLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFFaEQsS0FBSyxNQUFNLE9BQU8sSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUNuQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDO1lBQzFCLE1BQU0sSUFBSSxLQUFLLENBQUMsb0RBQW9ELE9BQU8sRUFBRSxDQUFDLENBQUM7UUFDakYsQ0FBQztJQUNILENBQUM7SUFFRCxvQkFBb0I7SUFDcEIsTUFBTSxpQkFBaUIsR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsSUFBSSxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDdkYsTUFBTSxjQUFjLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLElBQUksT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBRWpGLElBQUksS0FBSyxDQUFDLGlCQUFpQixDQUFDLElBQUksaUJBQWlCLEdBQUcsSUFBSSxFQUFFLENBQUM7UUFDekQsTUFBTSxJQUFJLEtBQUssQ0FDYixtRUFBbUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsR0FBRyxDQUMxRyxDQUFDO0lBQ0osQ0FBQztJQUVELElBQUksS0FBSyxDQUFDLGNBQWMsQ0FBQyxJQUFJLGNBQWMsR0FBRyxJQUFJLEVBQUUsQ0FBQztRQUNuRCxNQUFNLElBQUksS0FBSyxDQUNiLGdFQUFnRSxPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFvQixHQUFHLENBQ3BHLENBQUM7SUFDSixDQUFDO0FBQ0gsQ0FBQyxDQUFDO0FBeEJXLFFBQUEsa0JBQWtCLHNCQXdCN0IiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL2hvbWUvbWFuby9wcm9qZXRvcy9kYXRhc3VsL2xvcjAxMzgvc3JjL2luZnJhc3RydWN0dXJlL2RhdGFiYXNlL2NvbmZpZy9vZGJjQ29uZmlnLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9pbmZyYXN0cnVjdHVyZS9kYXRhYmFzZS9jb25maWcvb2RiY0NvbmZpZy50c1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBPZGJjQ29uZmlnIHtcclxuICBjb25uZWN0aW9uU3RyaW5nOiBzdHJpbmc7XHJcbiAgY29ubmVjdGlvblRpbWVvdXQ6IG51bWJlcjsgLy8gbWlsaXNzZWd1bmRvc1xyXG4gIGNvbW1hbmRUaW1lb3V0OiBudW1iZXI7ICAgIC8vIG1pbGlzc2VndW5kb3NcclxufVxyXG5cclxuLyoqXHJcbiAqIFJldG9ybmEgY29ubmVjdGlvbiBzdHJpbmcgT0RCQyBwYXJhIG8gZGF0YWJhc2UgZXNwZWNpZmljYWRvXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgZ2V0T2RiY0Nvbm5lY3Rpb25TdHJpbmcgPSAoZGF0YWJhc2U6ICdFTVAnIHwgJ01VTFQnKTogc3RyaW5nID0+IHtcclxuICBjb25zdCBkc25OYW1lID1cclxuICAgIGRhdGFiYXNlID09PSAnRU1QJ1xyXG4gICAgICA/IHByb2Nlc3MuZW52Lk9EQkNfRFNOX0VNUCB8fCAnUFJEX0VNUzJFTVAnXHJcbiAgICAgIDogcHJvY2Vzcy5lbnYuT0RCQ19EU05fTVVMVCB8fCAnUFJEX0VNUzJNVUxUJztcclxuXHJcbiAgY29uc3QgdXNlciA9IHByb2Nlc3MuZW52Lk9EQkNfVVNFUiB8fCBwcm9jZXNzLmVudi5EQl9VU0VSIHx8ICcnO1xyXG4gIGNvbnN0IHBhc3N3b3JkID0gcHJvY2Vzcy5lbnYuT0RCQ19QQVNTV09SRCB8fCBwcm9jZXNzLmVudi5EQl9QQVNTV09SRCB8fCAnJztcclxuXHJcbiAgcmV0dXJuIGBEU049JHtkc25OYW1lfTtVSUQ9JHt1c2VyfTtQV0Q9JHtwYXNzd29yZH1gO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIOKchSBOT1ZPOiBSZXRvcm5hIGNvbmZpZ3VyYcOnw6NvIGNvbXBsZXRhIGNvbSB0aW1lb3V0c1xyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGdldE9kYmNDb25maWcgPSAoZGF0YWJhc2U6ICdFTVAnIHwgJ01VTFQnKTogT2RiY0NvbmZpZyA9PiB7XHJcbiAgY29uc3QgY29ubmVjdGlvblN0cmluZyA9IGdldE9kYmNDb25uZWN0aW9uU3RyaW5nKGRhdGFiYXNlKTtcclxuXHJcbiAgLy8g4pyFIElNUE9SVEFOVEU6IFVzYSBwYXJzZUludCgpIGRpcmV0bywgZW50w6NvIC5lbnYgZGV2ZSB0ZXIgbWlsaXNzZWd1bmRvcyBwdXJvc1xyXG4gIGNvbnN0IGNvbm5lY3Rpb25UaW1lb3V0ID0gcGFyc2VJbnQoXHJcbiAgICBwcm9jZXNzLmVudi5PREJDX0NPTk5FQ1RJT05fVElNRU9VVCB8fCAnMTUwMDAnLFxyXG4gICAgMTBcclxuICApO1xyXG5cclxuICBjb25zdCBjb21tYW5kVGltZW91dCA9IHBhcnNlSW50KFxyXG4gICAgcHJvY2Vzcy5lbnYuT0RCQ19DT01NQU5EX1RJTUVPVVQgfHwgJzMwMDAwJyxcclxuICAgIDEwXHJcbiAgKTtcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIGNvbm5lY3Rpb25TdHJpbmcsXHJcbiAgICBjb25uZWN0aW9uVGltZW91dCxcclxuICAgIGNvbW1hbmRUaW1lb3V0XHJcbiAgfTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBWYWxpZGEgY29uZmlndXJhw6fDo28gT0RCQ1xyXG4gKi9cclxuZXhwb3J0IGNvbnN0IHZhbGlkYXRlT2RiY0NvbmZpZyA9ICgpOiB2b2lkID0+IHtcclxuICBjb25zdCByZXF1aXJlZFZhcnMgPSBbJ0RCX1VTRVInLCAnREJfUEFTU1dPUkQnXTtcclxuXHJcbiAgZm9yIChjb25zdCB2YXJOYW1lIG9mIHJlcXVpcmVkVmFycykge1xyXG4gICAgaWYgKCFwcm9jZXNzLmVudlt2YXJOYW1lXSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFZhcmnDoXZlbCBkZSBhbWJpZW50ZSBvYnJpZ2F0w7NyaWEgbsOjbyBlbmNvbnRyYWRhOiAke3Zhck5hbWV9YCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBWZXJpZmljYSB0aW1lb3V0c1xyXG4gIGNvbnN0IGNvbm5lY3Rpb25UaW1lb3V0ID0gcGFyc2VJbnQocHJvY2Vzcy5lbnYuT0RCQ19DT05ORUNUSU9OX1RJTUVPVVQgfHwgJzE1MDAwJywgMTApO1xyXG4gIGNvbnN0IGNvbW1hbmRUaW1lb3V0ID0gcGFyc2VJbnQocHJvY2Vzcy5lbnYuT0RCQ19DT01NQU5EX1RJTUVPVVQgfHwgJzMwMDAwJywgMTApO1xyXG5cclxuICBpZiAoaXNOYU4oY29ubmVjdGlvblRpbWVvdXQpIHx8IGNvbm5lY3Rpb25UaW1lb3V0IDwgMTAwMCkge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKFxyXG4gICAgICBgT0RCQ19DT05ORUNUSU9OX1RJTUVPVVQgaW52w6FsaWRvOiBkZXZlIHNlciA+PSAxMDAwbXMgKHJlY2ViaWRvOiAke3Byb2Nlc3MuZW52Lk9EQkNfQ09OTkVDVElPTl9USU1FT1VUfSlgXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgaWYgKGlzTmFOKGNvbW1hbmRUaW1lb3V0KSB8fCBjb21tYW5kVGltZW91dCA8IDEwMDApIHtcclxuICAgIHRocm93IG5ldyBFcnJvcihcclxuICAgICAgYE9EQkNfQ09NTUFORF9USU1FT1VUIGludsOhbGlkbzogZGV2ZSBzZXIgPj0gMTAwMG1zIChyZWNlYmlkbzogJHtwcm9jZXNzLmVudi5PREJDX0NPTU1BTkRfVElNRU9VVH0pYFxyXG4gICAgKTtcclxuICB9XHJcbn07Il0sInZlcnNpb24iOjN9